{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/study-plans": {
      "get": {
        "operationId": "StudyPlansController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Фильтр по группе",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "Фильтр по преподавателю",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список учебных планов с пагинацией",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Получить все учебные планы",
        "tags": [
          "Study Plans"
        ]
      },
      "post": {
        "operationId": "StudyPlansController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStudyPlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Учебный план успешно создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudyPlan"
                }
              }
            }
          },
          "400": {
            "description": "Неверные данные"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Создать новый учебный план",
        "tags": [
          "Study Plans"
        ]
      }
    },
    "/study-plans/me": {
      "get": {
        "operationId": "StudyPlansController_findMyStudyPlans",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Фильтр по группе",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "Фильтр по преподавателю",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список учебных планов студента",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Получить учебные планы текущего студента",
        "tags": [
          "Study Plans"
        ]
      }
    },
    "/study-plans/{id}": {
      "get": {
        "operationId": "StudyPlansController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID учебного плана",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные учебного плана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudyPlan"
                }
              }
            }
          },
          "404": {
            "description": "Учебный план не найден"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Получить учебный план по ID",
        "tags": [
          "Study Plans"
        ]
      },
      "patch": {
        "operationId": "StudyPlansController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID учебного плана",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudyPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Учебный план успешно обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudyPlan"
                }
              }
            }
          },
          "404": {
            "description": "Учебный план не найден"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Обновить учебный план",
        "tags": [
          "Study Plans"
        ]
      },
      "delete": {
        "operationId": "StudyPlansController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID учебного плана",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Учебный план успешно удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudyPlan"
                }
              }
            }
          },
          "404": {
            "description": "Учебный план не найден"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Удалить учебный план (мягкое удаление)",
        "tags": [
          "Study Plans"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "description": "\nАутентификация пользователя в системе.\n\n**Доступные роли:**\n- ADMIN - администратор системы\n- TEACHER - преподаватель  \n- STUDENT - студент\n- PARENT - родитель\n- HR - HR менеджер\n- FINANCIST - финансист\n\n**Пример использования:**\n```json\n{\n  \"email\": \"teacher@abai.edu.kz\",\n  \"password\": \"securePassword123\"\n}\n```\n    ",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Данные для входа в систему",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              },
              "examples": {
                "teacher": {
                  "summary": "Вход преподавателя",
                  "description": "Пример входа для преподавателя",
                  "value": {
                    "email": "teacher@abai.edu.kz",
                    "password": "password123"
                  }
                },
                "admin": {
                  "summary": "Вход администратора",
                  "description": "Пример входа для администратора",
                  "value": {
                    "email": "admin@abai.edu.kz",
                    "password": "admin123"
                  }
                },
                "student": {
                  "summary": "Вход студента",
                  "description": "Пример входа для студента",
                  "value": {
                    "email": "student@abai.edu.kz",
                    "password": "student123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Успешная аутентификация",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "JWT токен для авторизации",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoidGVhY2hlckBhYmFpLmVkdS5reiIsInJvbGUiOiJURUFDSEVSIiwiaWF0IjoxNjQwOTk1MjAwLCJleHAiOjE2NDA5OTg4MDB9.example"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "email": {
                          "type": "string",
                          "example": "teacher@abai.edu.kz"
                        },
                        "name": {
                          "type": "string",
                          "example": "Иван"
                        },
                        "surname": {
                          "type": "string",
                          "example": "Петров"
                        },
                        "middlename": {
                          "type": "string",
                          "example": "Сергеевич"
                        },
                        "role": {
                          "type": "string",
                          "example": "TEACHER",
                          "enum": [
                            "ADMIN",
                            "TEACHER",
                            "STUDENT",
                            "PARENT",
                            "HR",
                            "FINANCIST"
                          ]
                        },
                        "phone": {
                          "type": "string",
                          "example": "+7 700 123 45 67"
                        },
                        "avatar": {
                          "type": "string",
                          "example": "https://example.com/avatar.jpg"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Некорректные данные запроса",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "email must be an email",
                        "password should not be empty"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Неверные учетные данные",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid credentials"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Вход в систему",
        "tags": [
          "Auth"
        ]
      }
    },
    "/lessons": {
      "post": {
        "operationId": "LessonsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLessonDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Урок успешно создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lesson"
                }
              }
            }
          },
          "400": {
            "description": "Неверные данные"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Создать новый урок",
        "tags": [
          "Lessons"
        ]
      },
      "get": {
        "operationId": "LessonsController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "studyPlanId",
            "required": false,
            "in": "query",
            "description": "Фильтр по учебному плану",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Фильтр по группе",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Фильтр по дате начала",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Фильтр по дате окончания",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Фильтр по дате начала (устарело, используйте startDate)",
            "deprecated": true,
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Фильтр по дате окончания (устарело, используйте endDate)",
            "deprecated": true,
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "noPagination",
            "required": false,
            "in": "query",
            "description": "Отключить пагинацию и вернуть простой массив",
            "schema": {
              "example": "true",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список уроков с пагинацией или без (если указан параметр noPagination)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Получить все уроки",
        "tags": [
          "Lessons"
        ]
      }
    },
    "/lessons/me": {
      "get": {
        "operationId": "LessonsController_findMyLessons",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "studyPlanId",
            "required": false,
            "in": "query",
            "description": "Фильтр по учебному плану",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Фильтр по группе",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Фильтр по дате начала",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Фильтр по дате окончания",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Фильтр по дате начала (устарело, используйте startDate)",
            "deprecated": true,
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Фильтр по дате окончания (устарело, используйте endDate)",
            "deprecated": true,
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "noPagination",
            "required": false,
            "in": "query",
            "description": "Отключить пагинацию и вернуть простой массив",
            "schema": {
              "example": "true",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список уроков студента",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Получить уроки текущего студента",
        "tags": [
          "Lessons"
        ]
      }
    },
    "/lessons/available": {
      "get": {
        "description": "Возвращает список уроков из календарно-тематического планирования, которые можно добавить в расписание",
        "operationId": "LessonsController_getAvailableLessons",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по названию урока, предмету или преподавателю",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIds",
            "required": false,
            "in": "query",
            "description": "ID групп (разделенные запятыми)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teacherIds",
            "required": false,
            "in": "query",
            "description": "ID преподавателей (разделенные запятыми)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subjectIds",
            "required": false,
            "in": "query",
            "description": "ID учебных планов/предметов (разделенные запятыми)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Начальная дата в формате YYYY-MM-DD",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Конечная дата в формате YYYY-MM-DD",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список доступных уроков"
          },
          "400": {
            "description": "Некорректные параметры запроса"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Получить доступные уроки для планирования в расписании",
        "tags": [
          "Lessons"
        ]
      }
    },
    "/lessons/by-study-plan/{studyPlanId}": {
      "get": {
        "operationId": "LessonsController_findByStudyPlan",
        "parameters": [
          {
            "name": "studyPlanId",
            "required": true,
            "in": "path",
            "description": "ID учебного плана",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список уроков учебного плана",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Lesson"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Получить уроки по учебному плану",
        "tags": [
          "Lessons"
        ]
      }
    },
    "/lessons/{id}": {
      "get": {
        "operationId": "LessonsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID урока",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные урока",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lesson"
                }
              }
            }
          },
          "404": {
            "description": "Урок не найден"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Получить урок по ID",
        "tags": [
          "Lessons"
        ]
      },
      "patch": {
        "operationId": "LessonsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID урока",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLessonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Урок успешно обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lesson"
                }
              }
            }
          },
          "404": {
            "description": "Урок не найден"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Обновить урок",
        "tags": [
          "Lessons"
        ]
      },
      "delete": {
        "operationId": "LessonsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID урока",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Урок успешно удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lesson"
                }
              }
            }
          },
          "404": {
            "description": "Урок не найден"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Удалить урок (мягкое удаление)",
        "tags": [
          "Lessons"
        ]
      }
    },
    "/materials": {
      "post": {
        "operationId": "MaterialsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMaterialDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Материал успешно создан"
          },
          "400": {
            "description": "Некорректные данные"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новый материал",
        "tags": [
          "Materials"
        ]
      },
      "get": {
        "operationId": "MaterialsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех материалов"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все материалы",
        "tags": [
          "Materials"
        ]
      }
    },
    "/materials/{id}": {
      "get": {
        "operationId": "MaterialsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные материала"
          },
          "404": {
            "description": "Материал не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить материал по ID",
        "tags": [
          "Materials"
        ]
      },
      "patch": {
        "operationId": "MaterialsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMaterialDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Материал успешно обновлен"
          },
          "404": {
            "description": "Материал не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить материал",
        "tags": [
          "Materials"
        ]
      },
      "delete": {
        "operationId": "MaterialsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Материал успешно удален"
          },
          "404": {
            "description": "Материал не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить материал",
        "tags": [
          "Materials"
        ]
      }
    },
    "/materials/lesson/{lessonId}": {
      "get": {
        "operationId": "MaterialsController_findByLesson",
        "parameters": [
          {
            "name": "lessonId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Материалы урока"
          },
          "404": {
            "description": "Урок не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить материалы урока",
        "tags": [
          "Materials"
        ]
      }
    },
    "/materials/lesson/{lessonId}/create-full-materials": {
      "post": {
        "operationId": "MaterialsController_createLessonMaterials",
        "parameters": [
          {
            "name": "lessonId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLessonMaterialsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Материалы урока успешно созданы"
          },
          "400": {
            "description": "Некорректные данные"
          },
          "404": {
            "description": "Урок не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать полные материалы для урока (лекция, видео, презентация, тест, ДЗ)",
        "tags": [
          "Materials"
        ]
      }
    },
    "/materials/{materialId}/attach-to-lesson/{lessonId}": {
      "post": {
        "operationId": "MaterialsController_attachToLesson",
        "parameters": [
          {
            "name": "materialId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lessonId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Материал успешно прикреплен к уроку"
          },
          "404": {
            "description": "Материал или урок не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Прикрепить материал к уроку",
        "tags": [
          "Materials"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Пользователь успешно создан"
          },
          "400": {
            "description": "Некорректные данные"
          },
          "409": {
            "description": "Пользователь с таким email уже существует"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать нового пользователя (регистрация)",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех пользователей"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить всех пользователей",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/role/{role}": {
      "get": {
        "operationId": "UsersController_findByRole",
        "parameters": [
          {
            "name": "role",
            "required": true,
            "in": "path",
            "description": "Роль пользователя",
            "schema": {
              "enum": [
                "STUDENT",
                "TEACHER",
                "PARENT",
                "ADMIN",
                "FINANCIST",
                "HR"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Пользователи с указанной ролью"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить пользователей по роли",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search": {
      "get": {
        "operationId": "UsersController_searchUsers",
        "parameters": [
          {
            "name": "q",
            "required": true,
            "in": "query",
            "description": "Поисковый запрос (имя, фамилия, email, телефон)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Результаты поиска пользователей"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Поиск пользователей",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/statistics": {
      "get": {
        "operationId": "UsersController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Статистика пользователей по ролям"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику пользователей",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID пользователя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Полная информация о пользователе"
          },
          "404": {
            "description": "Пользователь не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить пользователя по ID",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID пользователя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Пользователь успешно обновлен"
          },
          "404": {
            "description": "Пользователь не найден"
          },
          "409": {
            "description": "Email уже используется"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить пользователя",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID пользователя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Пользователь успешно удален"
          },
          "404": {
            "description": "Пользователь не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить пользователя",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/change-password": {
      "post": {
        "operationId": "UsersController_changePassword",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID пользователя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Пароль успешно изменен"
          },
          "404": {
            "description": "Пользователь не найден"
          },
          "409": {
            "description": "Неверный старый пароль"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Изменить пароль пользователя",
        "tags": [
          "Users"
        ]
      }
    },
    "/groups/test": {
      "get": {
        "operationId": "GroupsController_test",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Тестовый endpoint без авторизации",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups": {
      "post": {
        "operationId": "GroupsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Группа успешно создана"
          },
          "400": {
            "description": "Неверные данные для создания группы"
          },
          "403": {
            "description": "Недостаточно прав для создания группы"
          }
        },
        "summary": "Создать новую группу",
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "operationId": "GroupsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех групп"
          }
        },
        "summary": "Получить все группы",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/statistics": {
      "get": {
        "operationId": "GroupsController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Статистика по группам",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupStatisticsDto"
                }
              }
            }
          }
        },
        "summary": "Получить статистику по группам",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/course/{courseNumber}": {
      "get": {
        "operationId": "GroupsController_findByCourse",
        "parameters": [
          {
            "name": "courseNumber",
            "required": true,
            "in": "path",
            "description": "Номер курса (1-6)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Группы указанного курса"
          },
          "400": {
            "description": "Неверный номер курса"
          }
        },
        "summary": "Получить группы по номеру курса",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{id}": {
      "get": {
        "operationId": "GroupsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о группе"
          },
          "404": {
            "description": "Группа не найдена"
          }
        },
        "summary": "Получить группу по ID",
        "tags": [
          "Groups"
        ]
      },
      "patch": {
        "operationId": "GroupsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Группа успешно обновлена"
          },
          "403": {
            "description": "Недостаточно прав для обновления группы"
          },
          "404": {
            "description": "Группа не найдена"
          }
        },
        "summary": "Обновить информацию о группе",
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "operationId": "GroupsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Группа успешно удалена"
          },
          "403": {
            "description": "Недостаточно прав для удаления группы"
          },
          "404": {
            "description": "Группа не найдена"
          }
        },
        "summary": "Удалить группу",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{id}/schedule": {
      "get": {
        "operationId": "GroupsController_getGroupSchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Расписание группы"
          },
          "404": {
            "description": "Группа не найдена"
          }
        },
        "summary": "Получить расписание группы",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{id}/study-plans": {
      "get": {
        "operationId": "GroupsController_getGroupStudyPlans",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Учебные планы группы"
          },
          "404": {
            "description": "Группа не найдена"
          }
        },
        "summary": "Получить учебные планы группы",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{groupId}/students/{studentId}": {
      "post": {
        "operationId": "GroupsController_addStudentToGroup",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "studentId",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Студент успешно добавлен в группу"
          },
          "403": {
            "description": "Недостаточно прав для управления студентами в группах"
          },
          "404": {
            "description": "Группа или студент не найдены"
          }
        },
        "summary": "Добавить студента в группу",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/students/{studentId}": {
      "delete": {
        "operationId": "GroupsController_removeStudentFromGroup",
        "parameters": [
          {
            "name": "studentId",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Студент успешно исключен из группы"
          },
          "403": {
            "description": "Недостаточно прав для управления студентами в группах"
          },
          "404": {
            "description": "Студент не найден"
          }
        },
        "summary": "Исключить студента из группы",
        "tags": [
          "Groups"
        ]
      }
    },
    "/homework": {
      "post": {
        "operationId": "HomeworkController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHomeworkDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Домашнее задание создано"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать домашнее задание",
        "tags": [
          "homework"
        ]
      },
      "get": {
        "operationId": "HomeworkController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Номер страницы",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Количество элементов на странице",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Поле для сортировки",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "description": "Направление сортировки",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по названию",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "lessonId",
            "required": false,
            "in": "query",
            "description": "ID урока",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "studentId",
            "required": false,
            "in": "query",
            "description": "ID студента",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список домашних заданий"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить список домашних заданий",
        "tags": [
          "homework"
        ]
      }
    },
    "/homework/me": {
      "get": {
        "operationId": "HomeworkController_findMyHomework",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Номер страницы",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Количество элементов на странице",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Поле для сортировки",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "description": "Направление сортировки",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по названию",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "lessonId",
            "required": false,
            "in": "query",
            "description": "ID урока",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "studentId",
            "required": false,
            "in": "query",
            "description": "ID студента",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список домашних заданий студента"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить домашние задания текущего студента",
        "tags": [
          "homework"
        ]
      }
    },
    "/homework/stats": {
      "get": {
        "operationId": "HomeworkController_getStats",
        "parameters": [
          {
            "name": "lessonId",
            "required": false,
            "in": "query",
            "description": "ID урока",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studentId",
            "required": false,
            "in": "query",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статистика домашних заданий"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику домашних заданий",
        "tags": [
          "homework"
        ]
      }
    },
    "/homework/{id}": {
      "get": {
        "operationId": "HomeworkController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Домашнее задание найдено"
          },
          "404": {
            "description": "Домашнее задание не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить домашнее задание по ID",
        "tags": [
          "homework"
        ]
      },
      "patch": {
        "operationId": "HomeworkController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHomeworkDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Домашнее задание обновлено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить домашнее задание",
        "tags": [
          "homework"
        ]
      },
      "delete": {
        "operationId": "HomeworkController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Домашнее задание удалено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить домашнее задание",
        "tags": [
          "homework"
        ]
      }
    },
    "/homework/{id}/submit": {
      "post": {
        "operationId": "HomeworkController_submitHomework",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomeworkSubmitDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Домашнее задание отправлено"
          },
          "400": {
            "description": "Ошибка при отправке"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отправить выполненное домашнее задание",
        "tags": [
          "homework"
        ]
      }
    },
    "/homework/{id}/update-submission": {
      "patch": {
        "operationId": "HomeworkController_updateHomeworkSubmission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomeworkSubmitDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Домашнее задание обновлено"
          },
          "400": {
            "description": "Ошибка при обновлении"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить отправленное домашнее задание",
        "tags": [
          "homework"
        ]
      }
    },
    "/homework/{id}/submissions": {
      "get": {
        "operationId": "HomeworkController_getSubmissions",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список отправок"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить отправки домашнего задания",
        "tags": [
          "homework"
        ]
      }
    },
    "/homework/submissions/{submissionId}/grade": {
      "patch": {
        "operationId": "HomeworkController_gradeHomework",
        "parameters": [
          {
            "name": "submissionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GradeHomeworkDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Домашнее задание оценено"
          },
          "403": {
            "description": "Нет прав для оценки"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Оценить домашнее задание",
        "tags": [
          "homework"
        ]
      }
    },
    "/lessons/{lessonId}/homework": {
      "get": {
        "operationId": "LessonHomeworkController_getHomeworksByLesson",
        "parameters": [
          {
            "name": "lessonId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список домашних заданий урока"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить домашние задания урока",
        "tags": [
          "lessons"
        ]
      }
    },
    "/quiz": {
      "post": {
        "operationId": "QuizController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuizDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Тест успешно создан"
          },
          "400": {
            "description": "Некорректные данные"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новый тест",
        "tags": [
          "Quizzes"
        ]
      },
      "get": {
        "operationId": "QuizController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список тестов"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все тесты с пагинацией",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/active": {
      "get": {
        "operationId": "QuizController_findActive",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список активных тестов"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить активные тесты",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/my-submissions": {
      "get": {
        "operationId": "QuizController_getMySubmissions",
        "parameters": [
          {
            "name": "studentId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Результаты студента"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить мои результаты тестов (для студентов)",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/{id}": {
      "get": {
        "operationId": "QuizController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о тесте"
          },
          "404": {
            "description": "Тест не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить тест по ID",
        "tags": [
          "Quizzes"
        ]
      },
      "patch": {
        "operationId": "QuizController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuizDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Тест обновлен"
          },
          "404": {
            "description": "Тест не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить тест",
        "tags": [
          "Quizzes"
        ]
      },
      "delete": {
        "operationId": "QuizController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Тест удален"
          },
          "404": {
            "description": "Тест не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить тест",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/{id}/questions": {
      "get": {
        "operationId": "QuizController_getQuestions",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список вопросов теста"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить вопросы теста",
        "tags": [
          "Quizzes"
        ]
      },
      "post": {
        "operationId": "QuizController_addQuestion",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Вопрос добавлен"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Добавить вопрос к тесту",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/{id}/submissions": {
      "get": {
        "operationId": "QuizController_getSubmissions",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Результаты теста"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все результаты теста",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/{id}/submit": {
      "post": {
        "operationId": "QuizController_submitQuiz",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuizSubmissionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ответы отправлены"
          },
          "400": {
            "description": "Некорректные данные или тест неактивен"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отправить ответы на тест",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/{id}/statistics": {
      "get": {
        "operationId": "QuizController_getStatistics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статистика теста"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику по тесту",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/{id}/activate": {
      "patch": {
        "operationId": "QuizController_toggleActive",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID теста",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статус теста изменен"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Активировать/деактивировать тест",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/quiz/questions/{questionId}": {
      "delete": {
        "operationId": "QuizController_removeQuestion",
        "parameters": [
          {
            "name": "questionId",
            "required": true,
            "in": "path",
            "description": "ID вопроса",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Вопрос удален"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить вопрос",
        "tags": [
          "Quizzes"
        ]
      }
    },
    "/classrooms": {
      "post": {
        "operationId": "ClassroomsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClassroomDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Аудитория успешно создана"
          },
          "400": {
            "description": "Некорректные данные"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новую аудиторию",
        "tags": [
          "Classrooms"
        ]
      },
      "get": {
        "operationId": "ClassroomsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех аудиторий"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все аудитории",
        "tags": [
          "Classrooms"
        ]
      }
    },
    "/classrooms/building/{building}": {
      "get": {
        "operationId": "ClassroomsController_findByBuilding",
        "parameters": [
          {
            "name": "building",
            "required": true,
            "in": "path",
            "description": "Название здания",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Аудитории в указанном здании"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить аудитории по зданию",
        "tags": [
          "Classrooms"
        ]
      }
    },
    "/classrooms/type/{type}": {
      "get": {
        "operationId": "ClassroomsController_findByType",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "Тип аудитории",
            "schema": {
              "enum": [
                "LECTURE",
                "PRACTICE",
                "COMPUTER",
                "LABORATORY",
                "OTHER"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Аудитории указанного типа"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить аудитории по типу",
        "tags": [
          "Classrooms"
        ]
      }
    },
    "/classrooms/capacity/{minCapacity}": {
      "get": {
        "operationId": "ClassroomsController_findByCapacity",
        "parameters": [
          {
            "name": "minCapacity",
            "required": true,
            "in": "path",
            "description": "Минимальная вместимость",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxCapacity",
            "required": false,
            "in": "query",
            "description": "Максимальная вместимость",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Аудитории с подходящей вместимостью"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Найти аудитории по вместимости",
        "tags": [
          "Classrooms"
        ]
      }
    },
    "/classrooms/available/{dayOfWeek}/{startTime}/{endTime}": {
      "get": {
        "operationId": "ClassroomsController_findAvailableClassrooms",
        "parameters": [
          {
            "name": "dayOfWeek",
            "required": true,
            "in": "path",
            "description": "День недели (1-7)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "required": true,
            "in": "path",
            "description": "Время начала (HH:MM)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "required": true,
            "in": "path",
            "description": "Время окончания (HH:MM)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список свободных аудиторий"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Найти свободные аудитории на указанное время",
        "tags": [
          "Classrooms"
        ]
      }
    },
    "/classrooms/by-equipment": {
      "post": {
        "operationId": "ClassroomsController_findByEquipment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Аудитории с указанным оборудованием"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Найти аудитории по оборудованию",
        "tags": [
          "Classrooms"
        ]
      }
    },
    "/classrooms/statistics": {
      "get": {
        "operationId": "ClassroomsController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Статистика аудиторий"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику по аудиториям",
        "tags": [
          "Classrooms"
        ]
      }
    },
    "/classrooms/{id}": {
      "get": {
        "operationId": "ClassroomsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID аудитории",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные аудитории с расписанием"
          },
          "404": {
            "description": "Аудитория не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить аудиторию по ID",
        "tags": [
          "Classrooms"
        ]
      },
      "patch": {
        "operationId": "ClassroomsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID аудитории",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClassroomDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Аудитория успешно обновлена"
          },
          "404": {
            "description": "Аудитория не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить аудиторию",
        "tags": [
          "Classrooms"
        ]
      },
      "delete": {
        "operationId": "ClassroomsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID аудитории",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Аудитория успешно удалена"
          },
          "404": {
            "description": "Аудитория не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить аудиторию",
        "tags": [
          "Classrooms"
        ]
      }
    },
    "/schedule": {
      "post": {
        "operationId": "ScheduleController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Расписание успешно создано"
          },
          "400": {
            "description": "Некорректные данные или конфликт расписания"
          },
          "404": {
            "description": "Связанная сущность не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новое расписание",
        "tags": [
          "Schedule"
        ]
      },
      "get": {
        "operationId": "ScheduleController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех расписаний"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все расписания",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/group/{groupId}": {
      "get": {
        "operationId": "ScheduleController_findByGroup",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Расписание группы"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить расписание группы",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/teacher/{teacherId}": {
      "get": {
        "operationId": "ScheduleController_findByTeacher",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Расписание преподавателя"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить расписание преподавателя",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/classroom/{classroomId}": {
      "get": {
        "operationId": "ScheduleController_findByClassroom",
        "parameters": [
          {
            "name": "classroomId",
            "required": true,
            "in": "path",
            "description": "ID аудитории",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Расписание аудитории"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить расписание аудитории",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/day/{dayOfWeek}": {
      "get": {
        "operationId": "ScheduleController_findByDayOfWeek",
        "parameters": [
          {
            "name": "dayOfWeek",
            "required": true,
            "in": "path",
            "description": "День недели (1-7: понедельник-воскресенье)",
            "schema": {
              "example": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Расписание на день"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить расписание на день недели",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/{id}": {
      "get": {
        "operationId": "ScheduleController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID расписания",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные расписания"
          },
          "404": {
            "description": "Расписание не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить расписание по ID",
        "tags": [
          "Schedule"
        ]
      },
      "patch": {
        "operationId": "ScheduleController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID расписания",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Расписание успешно обновлено"
          },
          "400": {
            "description": "Некорректные данные или конфликт расписания"
          },
          "404": {
            "description": "Расписание не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить расписание",
        "tags": [
          "Schedule"
        ]
      },
      "delete": {
        "operationId": "ScheduleController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID расписания",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Расписание успешно удалено"
          },
          "404": {
            "description": "Расписание не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить расписание",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/ai-generate": {
      "post": {
        "description": "Использует ChatGPT для создания оптимального расписания на основе заданных параметров и ограничений",
        "operationId": "ScheduleController_generateWithAI",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateScheduleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Расписание успешно сгенерировано",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректные параметры генерации"
          },
          "500": {
            "description": "Ошибка при обращении к ИИ сервису"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Генерировать расписание с помощью ИИ",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/ai-analyze": {
      "post": {
        "description": "Использует ChatGPT для анализа расписания на предмет конфликтов и возможностей оптимизации",
        "operationId": "ScheduleController_analyzeWithAI",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Анализ расписания выполнен"
          },
          "400": {
            "description": "Некорректные данные для анализа"
          },
          "500": {
            "description": "Ошибка при обращении к ИИ сервису"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Анализировать существующее расписание с помощью ИИ",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/ai-validate": {
      "post": {
        "description": "Проверяет сгенерированное ИИ расписание на наличие конфликтов и соответствие ограничениям",
        "operationId": "ScheduleController_validateAISchedule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Валидация завершена"
          },
          "400": {
            "description": "Обнаружены критические конфликты"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Валидировать сгенерированное расписание",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/schedule/ai-apply": {
      "post": {
        "description": "Сохраняет проверенное и откорректированное расписание в базу данных",
        "operationId": "ScheduleController_applyAISchedule",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Расписание успешно применено"
          },
          "400": {
            "description": "Расписание содержит ошибки"
          },
          "409": {
            "description": "Конфликт с существующим расписанием"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Применить сгенерированное ИИ расписание",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/students": {
      "post": {
        "description": "\nСоздает запись студента, связывая пользователя с ролью STUDENT с группой.\n\n**Требования:**\n- Пользователь должен существовать и иметь роль STUDENT\n- Группа должна существовать\n- Пользователь не должен быть уже зачислен как студент\n    ",
        "operationId": "StudentsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStudentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Студент успешно зачислен"
          },
          "400": {
            "description": "Некорректные данные"
          },
          "404": {
            "description": "Пользователь или группа не найдены"
          },
          "409": {
            "description": "Пользователь уже является студентом"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Зачислить пользователя как студента",
        "tags": [
          "Students"
        ]
      },
      "get": {
        "operationId": "StudentsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех студентов с информацией о пользователях и группах"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить всех студентов",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/create-full": {
      "post": {
        "description": "\nСоздает нового пользователя с ролью STUDENT и сразу зачисляет его как студента в группу.\n\n**Требования:**\n- Email должен быть уникальным\n- Группа должна существовать\n- Только админы и учителя могут создавать студентов\n    ",
        "operationId": "StudentsController_createFullStudent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFullStudentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Студент успешно создан и зачислен"
          },
          "400": {
            "description": "Некорректные данные"
          },
          "404": {
            "description": "Группа не найдена"
          },
          "409": {
            "description": "Пользователь с таким email уже существует"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать нового студента (пользователь + студент)",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/group/{groupId}": {
      "get": {
        "operationId": "StudentsController_findByGroup",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список студентов указанной группы"
          },
          "404": {
            "description": "Группа не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить студентов группы",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/user/{userId}": {
      "get": {
        "operationId": "StudentsController_findByUser",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "ID пользователя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о студенте"
          },
          "404": {
            "description": "Студент не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить запись студента по ID пользователя",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/{id}/grades": {
      "get": {
        "operationId": "StudentsController_getStudentGrades",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Оценки студента сгруппированные по предметам со статистикой"
          },
          "404": {
            "description": "Студент не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все оценки студента по предметам",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/statistics": {
      "get": {
        "operationId": "StudentsController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Статистика студентов по группам"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику студентов",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/{id}": {
      "get": {
        "operationId": "StudentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Полная информация о студенте"
          },
          "404": {
            "description": "Студент не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить студента по ID",
        "tags": [
          "Students"
        ]
      },
      "patch": {
        "operationId": "StudentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные студента успешно обновлены"
          },
          "404": {
            "description": "Студент не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить данные студента",
        "tags": [
          "Students"
        ]
      },
      "delete": {
        "operationId": "StudentsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Студент успешно отчислен"
          },
          "404": {
            "description": "Студент не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отчислить студента",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/{id}/change-group/{newGroupId}": {
      "patch": {
        "operationId": "StudentsController_changeGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newGroupId",
            "required": true,
            "in": "path",
            "description": "ID новой группы",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Студент успешно переведен в новую группу"
          },
          "404": {
            "description": "Студент или группа не найдены"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Перевести студента в другую группу",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/{id}/parents/{parentId}": {
      "post": {
        "operationId": "StudentsController_addParentToStudent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "description": "ID родителя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Родитель успешно привязан к студенту"
          },
          "404": {
            "description": "Студент или родитель не найден"
          },
          "409": {
            "description": "Родитель уже привязан к этому студенту"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Привязать родителя к студенту",
        "tags": [
          "Students"
        ]
      },
      "delete": {
        "operationId": "StudentsController_removeParentFromStudent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "description": "ID родителя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Родитель успешно отвязан от студента"
          },
          "404": {
            "description": "Студент, родитель не найден или связь не существует"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отвязать родителя от студента",
        "tags": [
          "Students"
        ]
      }
    },
    "/students/{id}/parents": {
      "get": {
        "operationId": "StudentsController_getStudentParents",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список родителей студента"
          },
          "404": {
            "description": "Студент не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить всех родителей студента",
        "tags": [
          "Students"
        ]
      }
    },
    "/teachers": {
      "post": {
        "operationId": "TeachersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeacherDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Teachers"
        ]
      },
      "get": {
        "operationId": "TeachersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Teachers"
        ]
      }
    },
    "/teachers/{id}": {
      "get": {
        "operationId": "TeachersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Teachers"
        ]
      },
      "patch": {
        "operationId": "TeachersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeacherDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Teachers"
        ]
      },
      "delete": {
        "operationId": "TeachersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Teachers"
        ]
      }
    },
    "/parents": {
      "post": {
        "operationId": "ParentsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateParentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Родитель успешно зарегистрирован"
          },
          "409": {
            "description": "Пользователь уже является родителем"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Зарегистрировать пользователя как родителя",
        "tags": [
          "Parents"
        ]
      },
      "get": {
        "operationId": "ParentsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех родителей с информацией о пользователях"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить всех родителей",
        "tags": [
          "Parents"
        ]
      }
    },
    "/parents/user/{userId}": {
      "get": {
        "operationId": "ParentsController_findByUser",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "ID пользователя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о родителе"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить запись родителя по ID пользователя",
        "tags": [
          "Parents"
        ]
      }
    },
    "/parents/search": {
      "get": {
        "operationId": "ParentsController_search",
        "parameters": [
          {
            "name": "q",
            "required": true,
            "in": "query",
            "description": "Поисковый запрос",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Результаты поиска родителей"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Поиск родителей",
        "tags": [
          "Parents"
        ]
      }
    },
    "/parents/statistics": {
      "get": {
        "operationId": "ParentsController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Статистика родителей"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику родителей",
        "tags": [
          "Parents"
        ]
      }
    },
    "/parents/{id}": {
      "get": {
        "operationId": "ParentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID родителя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Полная информация о родителе"
          },
          "404": {
            "description": "Родитель не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить родителя по ID",
        "tags": [
          "Parents"
        ]
      },
      "patch": {
        "operationId": "ParentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID родителя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные родителя успешно обновлены"
          },
          "404": {
            "description": "Родитель не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить данные родителя",
        "tags": [
          "Parents"
        ]
      },
      "delete": {
        "operationId": "ParentsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID родителя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Родитель успешно удален"
          },
          "404": {
            "description": "Родитель не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить родителя",
        "tags": [
          "Parents"
        ]
      }
    },
    "/payments": {
      "post": {
        "operationId": "PaymentsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "operationId": "PaymentsController_findAll",
        "parameters": [
          {
            "name": "grade",
            "required": false,
            "in": "query",
            "description": "Класс ученика",
            "schema": {
              "example": "9А",
              "type": "string"
            }
          },
          {
            "name": "serviceType",
            "required": false,
            "in": "query",
            "description": "Тип услуги",
            "schema": {
              "type": "string",
              "enum": [
                "TUITION",
                "BOOKS",
                "DORMITORY",
                "MEAL",
                "TRANSPORT",
                "EXAM",
                "CERTIFICATE",
                "OTHER"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Статус платежа",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "PAID",
                "PARTIAL",
                "OVERDUE",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "studentId",
            "required": false,
            "in": "query",
            "description": "ID ученика",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-09-01",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-09-30",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по имени ученика или названию услуги",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Номер страницы",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Количество записей на странице",
            "schema": {
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/summary": {
      "get": {
        "operationId": "PaymentsController_getSummary",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "operationId": "PaymentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Payments"
        ]
      },
      "patch": {
        "operationId": "PaymentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Payments"
        ]
      },
      "delete": {
        "operationId": "PaymentsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{id}/remind": {
      "post": {
        "operationId": "PaymentsController_sendReminder",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{id}/invoice": {
      "get": {
        "operationId": "PaymentsController_generateInvoice",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/budget": {
      "post": {
        "operationId": "BudgetController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBudgetItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Статья бюджета создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать статью бюджета",
        "tags": [
          "budget"
        ]
      },
      "get": {
        "operationId": "BudgetController_findAll",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsible",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список статей бюджета"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить список статей бюджета",
        "tags": [
          "budget"
        ]
      }
    },
    "/budget/analytics/{period}": {
      "get": {
        "operationId": "BudgetController_getAnalytics",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Аналитика бюджета"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить аналитику по бюджету",
        "tags": [
          "budget"
        ]
      }
    },
    "/budget/{id}": {
      "get": {
        "operationId": "BudgetController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статья бюджета",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetItem"
                }
              }
            }
          },
          "404": {
            "description": "Статья бюджета не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статью бюджета по ID",
        "tags": [
          "budget"
        ]
      },
      "patch": {
        "operationId": "BudgetController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBudgetItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Статья бюджета обновлена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetItem"
                }
              }
            }
          },
          "404": {
            "description": "Статья бюджета не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить статью бюджета",
        "tags": [
          "budget"
        ]
      },
      "delete": {
        "operationId": "BudgetController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статья бюджета удалена"
          },
          "404": {
            "description": "Статья бюджета не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить статью бюджета",
        "tags": [
          "budget"
        ]
      }
    },
    "/budget/periods/{period}/close": {
      "post": {
        "operationId": "BudgetController_closePeriod",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Период закрыт"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Закрыть период бюджета",
        "tags": [
          "budget"
        ]
      }
    },
    "/reports/generate": {
      "post": {
        "operationId": "ReportsController_generateReport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Отчет успешно сгенерирован"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Сгенерировать финансовый отчет",
        "tags": [
          "reports"
        ]
      }
    },
    "/reports/cashflow": {
      "get": {
        "operationId": "ReportsController_getCashflowData",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные движения денежных средств"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить данные движения денежных средств",
        "tags": [
          "reports"
        ]
      }
    },
    "/reports/performance": {
      "get": {
        "operationId": "ReportsController_getPerformanceMetrics",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Показатели эффективности"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить показатели эффективности",
        "tags": [
          "reports"
        ]
      }
    },
    "/reports/forecast": {
      "get": {
        "operationId": "ReportsController_getForecastData",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "months",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Финансовый прогноз"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить финансовый прогноз",
        "tags": [
          "reports"
        ]
      }
    },
    "/reports/variance": {
      "get": {
        "operationId": "ReportsController_getVarianceAnalysis",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Анализ отклонений"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить анализ отклонений",
        "tags": [
          "reports"
        ]
      }
    },
    "/reports/trends": {
      "get": {
        "operationId": "ReportsController_getBudgetTrends",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Тренды бюджета"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить тренды бюджета",
        "tags": [
          "reports"
        ]
      }
    },
    "/reports/{type}": {
      "get": {
        "operationId": "ReportsController_getReportByType",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные отчета"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить отчет по типу",
        "tags": [
          "reports"
        ]
      }
    },
    "/workload": {
      "post": {
        "operationId": "WorkloadController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkloadDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workload created successfully"
          }
        },
        "summary": "Create teacher workload",
        "tags": [
          "workload"
        ]
      },
      "get": {
        "operationId": "WorkloadController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "academicYear",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "periodValue",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of workloads retrieved successfully"
          }
        },
        "summary": "Get all teacher workloads",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/analytics": {
      "get": {
        "operationId": "WorkloadController_getAnalytics",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "academicYear",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "periodValue",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics retrieved successfully"
          }
        },
        "summary": "Get workload analytics",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/teacher/{teacherId}": {
      "get": {
        "operationId": "WorkloadController_findByTeacher",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "academicYear",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher workloads retrieved successfully"
          }
        },
        "summary": "Get workloads by teacher",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/{id}": {
      "get": {
        "operationId": "WorkloadController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workload retrieved successfully"
          },
          "404": {
            "description": "Workload not found"
          }
        },
        "summary": "Get workload by id",
        "tags": [
          "workload"
        ]
      },
      "patch": {
        "operationId": "WorkloadController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkloadDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workload updated successfully"
          },
          "404": {
            "description": "Workload not found"
          }
        },
        "summary": "Update workload",
        "tags": [
          "workload"
        ]
      },
      "delete": {
        "operationId": "WorkloadController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workload deleted successfully"
          },
          "404": {
            "description": "Workload not found"
          }
        },
        "summary": "Delete workload",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/{id}/daily-hours": {
      "post": {
        "operationId": "WorkloadController_addDailyHours",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Daily hours added successfully"
          }
        },
        "summary": "Add daily hours to workload",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/{id}/recalculate": {
      "post": {
        "operationId": "WorkloadController_recalculateWorkload",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workload recalculated successfully"
          }
        },
        "summary": "Recalculate workload automatically",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/generate-from-schedule": {
      "post": {
        "operationId": "WorkloadController_generateFromSchedule",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Workload generated from schedule successfully"
          }
        },
        "summary": "Generate workload from schedule",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/calculate-from-schedule/{teacherId}": {
      "get": {
        "operationId": "WorkloadController_calculateFromSchedule",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "academicYear",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workload calculated successfully"
          }
        },
        "summary": "Calculate workload from schedule without creating",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/export": {
      "get": {
        "operationId": "WorkloadController_exportWorkloads",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "default": "id",
              "example": "id",
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": true,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          },
          {
            "name": "academicYear",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "periodValue",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workload export file"
          }
        },
        "summary": "Export workloads",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/template": {
      "get": {
        "operationId": "WorkloadController_downloadTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workload template file"
          }
        },
        "summary": "Download workload template",
        "tags": [
          "workload"
        ]
      }
    },
    "/workload/teacher/{teacherId}/export": {
      "get": {
        "operationId": "WorkloadController_exportTeacherWorkload",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "academicYear",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher workload export file"
          }
        },
        "summary": "Export teacher workload",
        "tags": [
          "workload"
        ]
      }
    },
    "/salaries": {
      "post": {
        "operationId": "SalariesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSalaryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Зарплата создана"
          },
          "400": {
            "description": "Неверные данные"
          },
          "404": {
            "description": "Учитель не найден"
          }
        },
        "summary": "Создать зарплату",
        "tags": [
          "salaries"
        ]
      },
      "get": {
        "operationId": "SalariesController_findAll",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "APPROVED",
                "PAID",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "month",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список зарплат"
          }
        },
        "summary": "Получить список зарплат",
        "tags": [
          "salaries"
        ]
      }
    },
    "/salaries/statistics": {
      "get": {
        "operationId": "SalariesController_getStatistics",
        "parameters": [
          {
            "name": "year",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "month",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статистика зарплат"
          }
        },
        "summary": "Получить статистику по зарплатам",
        "tags": [
          "salaries"
        ]
      }
    },
    "/salaries/history/{teacherId}": {
      "get": {
        "operationId": "SalariesController_getSalaryHistory",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "История зарплат учителя"
          },
          "404": {
            "description": "Учитель не найден"
          }
        },
        "summary": "Получить историю зарплат учителя",
        "tags": [
          "salaries"
        ]
      }
    },
    "/salaries/{id}": {
      "get": {
        "operationId": "SalariesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Зарплата найдена"
          },
          "404": {
            "description": "Зарплата не найдена"
          }
        },
        "summary": "Получить зарплату по ID",
        "tags": [
          "salaries"
        ]
      },
      "patch": {
        "operationId": "SalariesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSalaryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Зарплата обновлена"
          },
          "404": {
            "description": "Зарплата не найдена"
          }
        },
        "summary": "Обновить зарплату",
        "tags": [
          "salaries"
        ]
      },
      "delete": {
        "operationId": "SalariesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Зарплата удалена"
          },
          "404": {
            "description": "Зарплата не найдена"
          }
        },
        "summary": "Удалить зарплату",
        "tags": [
          "salaries"
        ]
      }
    },
    "/salaries/{id}/approve": {
      "post": {
        "operationId": "SalariesController_approveSalary",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Зарплата утверждена"
          },
          "400": {
            "description": "Нельзя утвердить зарплату"
          },
          "404": {
            "description": "Зарплата не найдена"
          }
        },
        "summary": "Утвердить зарплату",
        "tags": [
          "salaries"
        ]
      }
    },
    "/salaries/{id}/mark-paid": {
      "post": {
        "operationId": "SalariesController_markAsPaid",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Зарплата отмечена как выплаченная"
          },
          "400": {
            "description": "Нельзя отметить зарплату как выплаченную"
          },
          "404": {
            "description": "Зарплата не найдена"
          }
        },
        "summary": "Отметить зарплату как выплаченную",
        "tags": [
          "salaries"
        ]
      }
    },
    "/salaries/export": {
      "get": {
        "operationId": "SalariesController_exportSalaries",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "APPROVED",
                "PAID",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "month",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Файл экспорта зарплат"
          }
        },
        "summary": "Экспорт зарплат",
        "tags": [
          "salaries"
        ]
      }
    },
    "/salaries/recalculate": {
      "post": {
        "operationId": "SalariesController_recalculateSalaries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Зарплаты пересчитаны"
          }
        },
        "summary": "Пересчитать зарплаты",
        "tags": [
          "salaries"
        ]
      }
    },
    "/performance/statistics": {
      "get": {
        "description": "Возвращает общие показатели успеваемости, посещаемости и выполнения заданий",
        "operationId": "PerformanceController_getStatistics",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "ID предмета для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "example": "month",
              "type": "string",
              "enum": [
                "week",
                "month",
                "semester",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Метрика для анализа тренда",
            "schema": {
              "example": "grade",
              "type": "string",
              "enum": [
                "grade",
                "attendance",
                "assignments",
                "participation"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Пороговый балл для отстающих студентов",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статистика успешно получена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить общую статистику успеваемости",
        "tags": [
          "performance"
        ]
      }
    },
    "/performance/subjects": {
      "get": {
        "description": "Возвращает показатели успеваемости по каждому предмету",
        "operationId": "PerformanceController_getSubjects",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "ID предмета для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "example": "month",
              "type": "string",
              "enum": [
                "week",
                "month",
                "semester",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Метрика для анализа тренда",
            "schema": {
              "example": "grade",
              "type": "string",
              "enum": [
                "grade",
                "attendance",
                "assignments",
                "participation"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Пороговый балл для отстающих студентов",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статистика по предметам успешно получена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику по предметам",
        "tags": [
          "performance"
        ]
      }
    },
    "/performance/classes": {
      "get": {
        "description": "Возвращает показатели успеваемости по каждой группе",
        "operationId": "PerformanceController_getClasses",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Статистика по группам успешно получена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassesResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику по группам",
        "tags": [
          "performance"
        ]
      }
    },
    "/performance/students/low-performing": {
      "get": {
        "description": "Возвращает студентов с низкой успеваемостью и рекомендации для улучшения",
        "operationId": "PerformanceController_getLowPerformingStudents",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "ID предмета для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "example": "month",
              "type": "string",
              "enum": [
                "week",
                "month",
                "semester",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Метрика для анализа тренда",
            "schema": {
              "example": "grade",
              "type": "string",
              "enum": [
                "grade",
                "attendance",
                "assignments",
                "participation"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Пороговый балл для отстающих студентов",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список отстающих студентов успешно получен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LowPerformingStudentsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить список отстающих студентов",
        "tags": [
          "performance"
        ]
      }
    },
    "/performance/students/high-progress": {
      "get": {
        "description": "Возвращает студентов, которые показывают значительное улучшение результатов",
        "operationId": "PerformanceController_getHighProgressStudents",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "ID предмета для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "example": "month",
              "type": "string",
              "enum": [
                "week",
                "month",
                "semester",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Метрика для анализа тренда",
            "schema": {
              "example": "grade",
              "type": "string",
              "enum": [
                "grade",
                "attendance",
                "assignments",
                "participation"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Пороговый балл для отстающих студентов",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список прогрессирующих студентов успешно получен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HighProgressStudentsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить список студентов с высоким прогрессом",
        "tags": [
          "performance"
        ]
      }
    },
    "/performance/trends": {
      "get": {
        "description": "Возвращает динамику изменения показателей успеваемости за период",
        "operationId": "PerformanceController_getTrends",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "ID предмета для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "example": "month",
              "type": "string",
              "enum": [
                "week",
                "month",
                "semester",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Метрика для анализа тренда",
            "schema": {
              "example": "grade",
              "type": "string",
              "enum": [
                "grade",
                "attendance",
                "assignments",
                "participation"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Пороговый балл для отстающих студентов",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Тренды успеваемости успешно получены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить тренды успеваемости",
        "tags": [
          "performance"
        ]
      }
    },
    "/performance/monthly-data": {
      "get": {
        "description": "Возвращает данные по успеваемости, посещаемости и заданиям по месяцам",
        "operationId": "PerformanceController_getMonthlyData",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "ID предмета для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "example": "month",
              "type": "string",
              "enum": [
                "week",
                "month",
                "semester",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Метрика для анализа тренда",
            "schema": {
              "example": "grade",
              "type": "string",
              "enum": [
                "grade",
                "attendance",
                "assignments",
                "participation"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Пороговый балл для отстающих студентов",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Помесячные данные успешно получены",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonthlyDataDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить помесячные данные",
        "tags": [
          "performance"
        ]
      }
    },
    "/performance/grade-distribution": {
      "get": {
        "description": "Возвращает статистику распределения оценок студентов",
        "operationId": "PerformanceController_getGradeDistribution",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "ID предмета для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "example": "month",
              "type": "string",
              "enum": [
                "week",
                "month",
                "semester",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Метрика для анализа тренда",
            "schema": {
              "example": "grade",
              "type": "string",
              "enum": [
                "grade",
                "attendance",
                "assignments",
                "participation"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Пороговый балл для отстающих студентов",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Распределение оценок успешно получено",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GradeDistributionDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить распределение оценок",
        "tags": [
          "performance"
        ]
      }
    },
    "/performance/metrics": {
      "get": {
        "description": "Возвращает основные показатели для радарной диаграммы",
        "operationId": "PerformanceController_getPerformanceMetrics",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "ID предмета для фильтрации",
            "schema": {
              "example": "1",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "example": "month",
              "type": "string",
              "enum": [
                "week",
                "month",
                "semester",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Метрика для анализа тренда",
            "schema": {
              "example": "grade",
              "type": "string",
              "enum": [
                "grade",
                "attendance",
                "assignments",
                "participation"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Пороговый балл для отстающих студентов",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Метрики производительности успешно получены",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PerformanceMetricDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить общие метрики производительности",
        "tags": [
          "performance"
        ]
      }
    },
    "/kpi/overview": {
      "get": {
        "operationId": "KpiController_getOverview",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "ID отдела/кафедры",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Тип метрики",
            "schema": {
              "type": "string",
              "enum": [
                "teaching_quality",
                "student_satisfaction",
                "attendance",
                "workload",
                "professional_development"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешно получены данные",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KpiOverviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить общие показатели KPI",
        "tags": [
          "KPI"
        ]
      }
    },
    "/kpi/teachers": {
      "get": {
        "operationId": "KpiController_getTeacherKpi",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "ID отдела/кафедры",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Тип метрики",
            "schema": {
              "type": "string",
              "enum": [
                "teaching_quality",
                "student_satisfaction",
                "attendance",
                "workload",
                "professional_development"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешно получены данные",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherKpiResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить KPI преподавателей",
        "tags": [
          "KPI"
        ]
      }
    },
    "/kpi/departments": {
      "get": {
        "operationId": "KpiController_getDepartmentKpi",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "ID отдела/кафедры",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Тип метрики",
            "schema": {
              "type": "string",
              "enum": [
                "teaching_quality",
                "student_satisfaction",
                "attendance",
                "workload",
                "professional_development"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешно получены данные",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentKpiResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить KPI отделов",
        "tags": [
          "KPI"
        ]
      }
    },
    "/kpi/trends": {
      "get": {
        "operationId": "KpiController_getTrends",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "ID отдела/кафедры",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Тип метрики",
            "schema": {
              "type": "string",
              "enum": [
                "teaching_quality",
                "student_satisfaction",
                "attendance",
                "workload",
                "professional_development"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешно получены данные",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KpiTrendsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить тренды KPI",
        "tags": [
          "KPI"
        ]
      }
    },
    "/kpi/goals": {
      "get": {
        "operationId": "KpiController_getGoals",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "ID отдела/кафедры",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Тип метрики",
            "schema": {
              "type": "string",
              "enum": [
                "teaching_quality",
                "student_satisfaction",
                "attendance",
                "workload",
                "professional_development"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешно получены данные",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KpiGoalsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить цели KPI",
        "tags": [
          "KPI"
        ]
      }
    },
    "/kpi/comparison": {
      "get": {
        "operationId": "KpiController_getComparison",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "ID отдела/кафедры",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Тип метрики",
            "schema": {
              "type": "string",
              "enum": [
                "teaching_quality",
                "student_satisfaction",
                "attendance",
                "workload",
                "professional_development"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешно получены данные",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KpiComparisonResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить сравнение KPI",
        "tags": [
          "KPI"
        ]
      }
    },
    "/kpi/export": {
      "get": {
        "operationId": "KpiController_exportKpi",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "ID отдела/кафедры",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Тип метрики",
            "schema": {
              "type": "string",
              "enum": [
                "teaching_quality",
                "student_satisfaction",
                "attendance",
                "workload",
                "professional_development"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Файл экспорта KPI"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Экспорт KPI данных",
        "tags": [
          "KPI"
        ]
      }
    },
    "/kpi/teachers/{teacherId}/export": {
      "get": {
        "operationId": "KpiController_exportTeacherReport",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "ID преподавателя",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "ID отдела/кафедры",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период анализа",
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Тип метрики",
            "schema": {
              "type": "string",
              "enum": [
                "teaching_quality",
                "student_satisfaction",
                "attendance",
                "workload",
                "professional_development"
              ]
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Файл отчета по преподавателю"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Экспорт KPI отчета по преподавателю",
        "tags": [
          "KPI"
        ]
      }
    },
    "/vacations": {
      "post": {
        "operationId": "VacationsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVacationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Заявка успешно создана"
          },
          "400": {
            "description": "Некорректные данные"
          },
          "401": {
            "description": "Не авторизован"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать заявку на отпуск",
        "tags": [
          "vacations"
        ]
      },
      "get": {
        "operationId": "VacationsController_findAll",
        "parameters": [
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Период (current-year, next-year, previous-year)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "pending",
                "approved",
                "rejected",
                "completed"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "vacation",
                "sick-leave",
                "maternity-leave",
                "unpaid-leave",
                "business-trip"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по имени или отделу",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Количество записей на странице",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Номер страницы",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список отпусков успешно получен"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить список отпусков",
        "tags": [
          "vacations"
        ]
      }
    },
    "/vacations/summary": {
      "get": {
        "operationId": "VacationsController_getSummary",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Статистика успешно получена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику по отпускам",
        "tags": [
          "vacations"
        ]
      }
    },
    "/vacations/substitutions": {
      "get": {
        "operationId": "VacationsController_getSubstitutions",
        "parameters": [
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Дата для проверки замен",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department",
            "required": false,
            "in": "query",
            "description": "Отдел",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "substituteId",
            "required": false,
            "in": "query",
            "description": "ID замещающего преподавателя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список замен успешно получен"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить список замен",
        "tags": [
          "vacations"
        ]
      }
    },
    "/vacations/teacher/{teacherId}/summary": {
      "get": {
        "operationId": "VacationsController_getTeacherSummary",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Сводка успешно получена"
          },
          "404": {
            "description": "Преподаватель не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить сводку по отпускам преподавателя",
        "tags": [
          "vacations"
        ]
      }
    },
    "/vacations/{id}": {
      "get": {
        "operationId": "VacationsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Отпуск успешно найден"
          },
          "404": {
            "description": "Отпуск не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить отпуск по ID",
        "tags": [
          "vacations"
        ]
      },
      "patch": {
        "operationId": "VacationsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVacationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Заявка успешно обновлена"
          },
          "403": {
            "description": "Недостаточно прав"
          },
          "404": {
            "description": "Отпуск не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить заявку на отпуск",
        "tags": [
          "vacations"
        ]
      },
      "delete": {
        "operationId": "VacationsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Заявка успешно удалена"
          },
          "403": {
            "description": "Недостаточно прав"
          },
          "404": {
            "description": "Отпуск не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить заявку на отпуск",
        "tags": [
          "vacations"
        ]
      }
    },
    "/vacations/{id}/status": {
      "patch": {
        "operationId": "VacationsController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVacationStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Статус успешно обновлен"
          },
          "403": {
            "description": "Недостаточно прав"
          },
          "404": {
            "description": "Отпуск не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить статус отпуска",
        "tags": [
          "vacations"
        ]
      }
    },
    "/vacations/teacher/{teacherId}/lessons": {
      "get": {
        "operationId": "VacationsController_getTeacherLessons",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список уроков успешно получен"
          },
          "404": {
            "description": "Преподаватель не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить уроки преподавателя для замещения",
        "tags": [
          "vacations"
        ]
      }
    },
    "/loyalty/reviews": {
      "post": {
        "operationId": "LoyaltyController_createReview",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      },
      "get": {
        "operationId": "LoyaltyController_getReviews",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/reviews/{id}": {
      "get": {
        "operationId": "LoyaltyController_getReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/reviews/{id}/reactions": {
      "post": {
        "operationId": "LoyaltyController_addReaction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewReactionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/analytics": {
      "get": {
        "operationId": "LoyaltyController_getAnalytics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/analytics/trends": {
      "get": {
        "operationId": "LoyaltyController_getTrends",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/analytics/teacher/{teacherId}": {
      "get": {
        "operationId": "LoyaltyController_getTeacherAnalytics",
        "parameters": [
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/analytics/group/{groupId}": {
      "get": {
        "operationId": "LoyaltyController_getGroupAnalytics",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/analytics/summary": {
      "get": {
        "operationId": "LoyaltyController_getSummary",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/analytics/repeat-purchases": {
      "get": {
        "operationId": "LoyaltyController_getRepeatPurchaseAnalytics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/analytics/feedback-based": {
      "get": {
        "operationId": "LoyaltyController_getFeedbackBasedLoyalty",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/analytics/emotional": {
      "get": {
        "operationId": "LoyaltyController_getEmotionalLoyalty",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/feedback-responses": {
      "get": {
        "operationId": "LoyaltyController_getFeedbackResponses",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/feedback-responses/{id}": {
      "get": {
        "operationId": "LoyaltyController_getFeedbackResponse",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/loyalty/feedback-responses/stats": {
      "get": {
        "operationId": "LoyaltyController_getFeedbackResponsesStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Loyalty"
        ]
      }
    },
    "/feedback/templates": {
      "post": {
        "operationId": "FeedbackController_createTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeedbackTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      },
      "get": {
        "operationId": "FeedbackController_getActiveTemplates",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/templates/my": {
      "get": {
        "operationId": "FeedbackController_getMyTemplates",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/mandatory-check": {
      "get": {
        "operationId": "FeedbackController_checkMandatoryFeedback",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/responses": {
      "post": {
        "operationId": "FeedbackController_submitResponse",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeedbackResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/templates/{id}": {
      "get": {
        "operationId": "FeedbackController_getTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      },
      "put": {
        "operationId": "FeedbackController_updateTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeedbackTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      },
      "delete": {
        "operationId": "FeedbackController_deleteTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/templates/{id}/toggle-active": {
      "put": {
        "operationId": "FeedbackController_toggleTemplateActive",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/templates/{id}/responses": {
      "get": {
        "operationId": "FeedbackController_getTemplateResponses",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/users/{userId}/reset-mandatory": {
      "put": {
        "operationId": "FeedbackController_resetMandatoryStatus",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/statistics": {
      "get": {
        "operationId": "FeedbackController_getFeedbackStatistics",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/feedback/analytics": {
      "get": {
        "operationId": "FeedbackController_getFeedbackAnalytics",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feedback"
        ]
      }
    },
    "/inventory": {
      "post": {
        "operationId": "InventoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Элемент успешно создан"
          }
        },
        "summary": "Создать новый элемент инвентаря",
        "tags": [
          "inventory"
        ]
      },
      "get": {
        "operationId": "InventoryController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "REPAIR",
                "WRITTEN_OFF",
                "LOST"
              ]
            }
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsible",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список инвентаря получен"
          }
        },
        "summary": "Получить список инвентаря",
        "tags": [
          "inventory"
        ]
      }
    },
    "/inventory/scan/{code}": {
      "get": {
        "operationId": "InventoryController_findByCode",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Элемент найден"
          },
          "404": {
            "description": "Элемент не найден"
          }
        },
        "summary": "Получить информацию по QR/штрих-коду",
        "tags": [
          "inventory"
        ]
      }
    },
    "/inventory/export": {
      "get": {
        "operationId": "InventoryController_export",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "REPAIR",
                "WRITTEN_OFF",
                "LOST"
              ]
            }
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsible",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Данные экспортированы"
          }
        },
        "summary": "Экспорт данных инвентаря",
        "tags": [
          "inventory"
        ]
      }
    },
    "/inventory/{id}": {
      "get": {
        "operationId": "InventoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Элемент найден"
          },
          "404": {
            "description": "Элемент не найден"
          }
        },
        "summary": "Получить элемент инвентаря по ID",
        "tags": [
          "inventory"
        ]
      },
      "patch": {
        "operationId": "InventoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Элемент обновлен"
          }
        },
        "summary": "Обновить элемент инвентаря",
        "tags": [
          "inventory"
        ]
      },
      "delete": {
        "operationId": "InventoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Элемент удален"
          }
        },
        "summary": "Удалить элемент инвентаря",
        "tags": [
          "inventory"
        ]
      }
    },
    "/inventory/{id}/movement": {
      "post": {
        "operationId": "InventoryController_createMovement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMovementDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Перемещение зарегистрировано"
          }
        },
        "summary": "Зарегистрировать перемещение",
        "tags": [
          "inventory"
        ]
      }
    },
    "/inventory/{id}/status": {
      "patch": {
        "operationId": "InventoryController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Статус обновлен"
          }
        },
        "summary": "Обновить статус элемента",
        "tags": [
          "inventory"
        ]
      }
    },
    "/inventory/{id}/maintenance": {
      "post": {
        "operationId": "InventoryController_createMaintenance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMaintenanceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ТО зарегистрировано"
          }
        },
        "summary": "Зарегистрировать техническое обслуживание",
        "tags": [
          "inventory"
        ]
      }
    },
    "/supply/requests": {
      "post": {
        "operationId": "SupplyController_createPurchaseRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Заявка создана"
          }
        },
        "summary": "Создать заявку на закупку",
        "tags": [
          "supply"
        ]
      },
      "get": {
        "operationId": "SupplyController_findAllPurchaseRequests",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Получить список заявок на закупку",
        "tags": [
          "supply"
        ]
      }
    },
    "/supply/requests/{id}": {
      "get": {
        "operationId": "SupplyController_findOnePurchaseRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Получить заявку по ID",
        "tags": [
          "supply"
        ]
      }
    },
    "/supply/requests/{id}/status": {
      "patch": {
        "operationId": "SupplyController_updatePurchaseRequestStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Обновить статус заявки",
        "tags": [
          "supply"
        ]
      }
    },
    "/supply/suppliers": {
      "post": {
        "operationId": "SupplyController_createSupplier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSupplierDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Создать поставщика",
        "tags": [
          "supply"
        ]
      },
      "get": {
        "operationId": "SupplyController_findAllSuppliers",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Получить список поставщиков",
        "tags": [
          "supply"
        ]
      }
    },
    "/supply/suppliers/{id}": {
      "get": {
        "operationId": "SupplyController_findOneSupplier",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Получить поставщика по ID",
        "tags": [
          "supply"
        ]
      },
      "patch": {
        "operationId": "SupplyController_updateSupplier",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Обновить поставщика",
        "tags": [
          "supply"
        ]
      }
    },
    "/supply/quotes": {
      "post": {
        "operationId": "SupplyController_createSupplierQuote",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSupplierQuoteDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Создать предложение поставщика",
        "tags": [
          "supply"
        ]
      }
    },
    "/supply/quotes/{id}/select": {
      "patch": {
        "operationId": "SupplyController_selectSupplierQuote",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Выбрать предложение поставщика",
        "tags": [
          "supply"
        ]
      }
    },
    "/supply/analytics": {
      "get": {
        "operationId": "SupplyController_getSupplyAnalytics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Получить аналитику по снабжению",
        "tags": [
          "supply"
        ]
      }
    },
    "/supply/orders": {
      "post": {
        "operationId": "SupplyController_createPurchaseOrder",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Создать заказ на закупку",
        "tags": [
          "supply"
        ]
      },
      "get": {
        "operationId": "SupplyController_findAllPurchaseOrders",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Получить список заказов",
        "tags": [
          "supply"
        ]
      }
    },
    "/tasks": {
      "post": {
        "operationId": "TasksController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Tasks"
        ]
      },
      "get": {
        "operationId": "TasksController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tasks"
        ]
      }
    },
    "/tasks/stats": {
      "get": {
        "operationId": "TasksController_getStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tasks"
        ]
      }
    },
    "/tasks/categories": {
      "get": {
        "operationId": "TasksController_getCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "operationId": "TasksController_createCategory",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Tasks"
        ]
      }
    },
    "/tasks/{id}": {
      "get": {
        "operationId": "TasksController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tasks"
        ]
      },
      "patch": {
        "operationId": "TasksController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tasks"
        ]
      },
      "delete": {
        "operationId": "TasksController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Tasks"
        ]
      }
    },
    "/chat": {
      "post": {
        "operationId": "ChatController_createChat",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Чат создан успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новый чат",
        "tags": [
          "Chat"
        ]
      },
      "get": {
        "operationId": "ChatController_getUserChats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список чатов получен успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить список чатов пользователя",
        "tags": [
          "Chat"
        ]
      }
    },
    "/chat/{chatId}/messages": {
      "get": {
        "operationId": "ChatController_getChatMessages",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Сообщения получены успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить сообщения чата",
        "tags": [
          "Chat"
        ]
      }
    },
    "/chat/messages": {
      "post": {
        "operationId": "ChatController_sendMessage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Сообщение отправлено успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отправить сообщение",
        "tags": [
          "Chat"
        ]
      }
    },
    "/chat/{chatId}/read": {
      "put": {
        "operationId": "ChatController_markMessagesAsRead",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Сообщения отмечены как прочитанные"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отметить сообщения как прочитанные",
        "tags": [
          "Chat"
        ]
      }
    },
    "/chat/messages/{messageId}": {
      "put": {
        "operationId": "ChatController_editMessage",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Сообщение отредактировано успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Редактировать сообщение",
        "tags": [
          "Chat"
        ]
      },
      "delete": {
        "operationId": "ChatController_deleteMessage",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Сообщение удалено успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить сообщение",
        "tags": [
          "Chat"
        ]
      }
    },
    "/calendar/events": {
      "post": {
        "operationId": "CalendarController_createEvent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Событие создано успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новое событие",
        "tags": [
          "Calendar"
        ]
      },
      "get": {
        "operationId": "CalendarController_getUserEvents",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по названию события",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timezone",
            "required": false,
            "in": "query",
            "description": "Часовой пояс",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "События получены успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить события пользователя",
        "tags": [
          "Calendar"
        ]
      }
    },
    "/calendar/events/today": {
      "get": {
        "operationId": "CalendarController_getTodaysEvents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "События на сегодня получены успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить события на сегодня",
        "tags": [
          "Calendar"
        ]
      }
    },
    "/calendar/events/{eventId}": {
      "get": {
        "operationId": "CalendarController_getEventById",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Событие получено успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить событие по ID",
        "tags": [
          "Calendar"
        ]
      },
      "put": {
        "operationId": "CalendarController_updateEvent",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Событие обновлено успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить событие",
        "tags": [
          "Calendar"
        ]
      },
      "delete": {
        "operationId": "CalendarController_deleteEvent",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Событие удалено успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить событие",
        "tags": [
          "Calendar"
        ]
      }
    },
    "/calendar/events/{eventId}/status": {
      "put": {
        "operationId": "CalendarController_updateParticipantStatus",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статус участия обновлен успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить статус участия в событии",
        "tags": [
          "Calendar"
        ]
      }
    },
    "/calendar/events/{eventId}/reminders": {
      "post": {
        "operationId": "CalendarController_createReminder",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Напоминание создано успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать напоминание для события",
        "tags": [
          "Calendar"
        ]
      }
    },
    "/calendar/reminders/{reminderId}": {
      "delete": {
        "operationId": "CalendarController_deleteReminder",
        "parameters": [
          {
            "name": "reminderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Напоминание удалено успешно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить напоминание",
        "tags": [
          "Calendar"
        ]
      }
    },
    "/system/settings": {
      "get": {
        "operationId": "SystemController_getSystemSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "put": {
        "operationId": "SystemController_updateSystemSettings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemSettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/backup": {
      "get": {
        "operationId": "SystemController_downloadBackup",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/users": {
      "get": {
        "operationId": "SystemController_getUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "post": {
        "operationId": "SystemController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSystemUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/users/{id}": {
      "get": {
        "operationId": "SystemController_getUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "put": {
        "operationId": "SystemController_updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "delete": {
        "operationId": "SystemController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/users/{id}/reset-password": {
      "post": {
        "operationId": "SystemController_resetUserPassword",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/roles": {
      "get": {
        "operationId": "SystemController_getRoles",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "post": {
        "operationId": "SystemController_createRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/roles/{id}": {
      "put": {
        "operationId": "SystemController_updateRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "delete": {
        "operationId": "SystemController_deleteRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/permissions": {
      "get": {
        "operationId": "SystemController_getAvailablePermissions",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/branding": {
      "get": {
        "operationId": "SystemController_getBrandingSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "put": {
        "operationId": "SystemController_updateBrandingSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/branding/logo": {
      "post": {
        "operationId": "SystemController_uploadLogo",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/branding/favicon": {
      "post": {
        "operationId": "SystemController_uploadFavicon",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/integrations": {
      "get": {
        "operationId": "SystemController_getIntegrations",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "post": {
        "operationId": "SystemController_createIntegration",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/integrations/{id}": {
      "put": {
        "operationId": "SystemController_updateIntegration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      },
      "delete": {
        "operationId": "SystemController_deleteIntegration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/integrations/{id}/connect": {
      "post": {
        "operationId": "SystemController_connectIntegration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/integrations/{id}/disconnect": {
      "post": {
        "operationId": "SystemController_disconnectIntegration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/system/integrations/{id}/sync": {
      "post": {
        "operationId": "SystemController_syncIntegration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "System"
        ]
      }
    },
    "/dashboard/student": {
      "get": {
        "operationId": "DashboardController_getStudentDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/teacher": {
      "get": {
        "operationId": "DashboardController_getTeacherDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/admin": {
      "get": {
        "operationId": "DashboardController_getAdminDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/parent": {
      "get": {
        "operationId": "DashboardController_getParentDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/financist": {
      "get": {
        "operationId": "DashboardController_getFinancistDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/dashboard/hr": {
      "get": {
        "operationId": "DashboardController_getHRDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/notifications": {
      "post": {
        "operationId": "NotificationsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Уведомление создано"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать уведомление",
        "tags": [
          "Notifications"
        ]
      },
      "get": {
        "operationId": "NotificationsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список уведомлений"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все уведомления с пагинацией",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/add": {
      "post": {
        "operationId": "NotificationsController_addNotifications",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Уведомления добавлены"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Добавить уведомления для пользователей",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/my": {
      "get": {
        "operationId": "NotificationsController_getMyNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Уведомления пользователя"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить мои уведомления",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/unread-count/{userId}": {
      "get": {
        "operationId": "NotificationsController_getUnreadCount",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "ID пользователя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Количество непрочитанных уведомлений"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить количество непрочитанных уведомлений",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/stream": {
      "get": {
        "operationId": "NotificationsController_streamNotifications",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Поток событий Server-Sent Events"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "SSE поток уведомлений (без авторизации)",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/{id}": {
      "get": {
        "operationId": "NotificationsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID уведомления",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Информация об уведомлении"
          },
          "404": {
            "description": "Уведомление не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить уведомление по ID",
        "tags": [
          "Notifications"
        ]
      },
      "patch": {
        "operationId": "NotificationsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID уведомления",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Уведомление обновлено"
          },
          "404": {
            "description": "Уведомление не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить уведомление",
        "tags": [
          "Notifications"
        ]
      },
      "delete": {
        "operationId": "NotificationsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID уведомления",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Уведомление удалено"
          },
          "404": {
            "description": "Уведомление не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить уведомление",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/{id}/read": {
      "patch": {
        "operationId": "NotificationsController_markAsRead",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID уведомления",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Уведомление отмечено как прочитанное"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отметить уведомление как прочитанное",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/read-all/{userId}": {
      "patch": {
        "operationId": "NotificationsController_markAllAsRead",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "ID пользователя",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Все уведомления отмечены как прочитанные"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отметить все уведомления как прочитанные",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/files/upload": {
      "post": {
        "operationId": "FilesController_uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "category": {
                    "type": "string",
                    "description": "Категория файла: video, presentation, homework, material"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Загрузить один файл",
        "tags": [
          "files"
        ]
      }
    },
    "/files/upload-multiple": {
      "post": {
        "operationId": "FilesController_uploadFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "category": {
                    "type": "string",
                    "description": "Категория файлов"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Загрузить несколько файлов",
        "tags": [
          "files"
        ]
      }
    },
    "/files/{id}/download": {
      "get": {
        "operationId": "FilesController_downloadFile",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Скачать файл по ID",
        "tags": [
          "files"
        ]
      }
    },
    "/files": {
      "post": {
        "operationId": "FilesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "tags": [
          "files"
        ]
      },
      "get": {
        "operationId": "FilesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "tags": [
          "files"
        ]
      }
    },
    "/files/{id}": {
      "get": {
        "operationId": "FilesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "tags": [
          "files"
        ]
      },
      "patch": {
        "operationId": "FilesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "tags": [
          "files"
        ]
      },
      "delete": {
        "operationId": "FilesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "tags": [
          "files"
        ]
      }
    },
    "/lesson-results": {
      "post": {
        "operationId": "LessonResultsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLessonResultDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Результат урока успешно создан"
          },
          "400": {
            "description": "Некорректные данные"
          },
          "409": {
            "description": "Результат для этого студента и урока уже существует"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Выставить оценку или отметить посещаемость",
        "tags": [
          "Electronic Journal"
        ]
      },
      "get": {
        "operationId": "LessonResultsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех результатов уроков"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все результаты уроков",
        "tags": [
          "Electronic Journal"
        ]
      }
    },
    "/lesson-results/lesson/{lessonId}/journal": {
      "get": {
        "operationId": "LessonResultsController_getJournalByLesson",
        "parameters": [
          {
            "name": "lessonId",
            "required": true,
            "in": "path",
            "description": "ID урока",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Журнал урока со всеми студентами"
          },
          "404": {
            "description": "Урок не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить журнал по уроку (все студенты и их оценки)",
        "tags": [
          "Electronic Journal"
        ]
      }
    },
    "/lesson-results/student/{studentId}/subject/{studyPlanId}/grades": {
      "get": {
        "operationId": "LessonResultsController_getStudentGradesBySubject",
        "parameters": [
          {
            "name": "studentId",
            "required": true,
            "in": "path",
            "description": "ID студента",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyPlanId",
            "required": true,
            "in": "path",
            "description": "ID учебного плана (предмета)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Оценки студента по предмету со статистикой"
          },
          "404": {
            "description": "Студент или предмет не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все оценки студента по предмету",
        "tags": [
          "Electronic Journal"
        ]
      }
    },
    "/lesson-results/group/{groupId}/journal": {
      "get": {
        "operationId": "LessonResultsController_getGroupJournalByPeriod",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "ID группы",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "description": "Дата начала периода (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "description": "Дата окончания периода (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Журнал группы за указанный период"
          },
          "404": {
            "description": "Группа не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить журнал группы за период",
        "tags": [
          "Electronic Journal"
        ]
      }
    },
    "/lesson-results/lesson/{lessonId}/bulk-attendance": {
      "post": {
        "operationId": "LessonResultsController_bulkMarkAttendance",
        "parameters": [
          {
            "name": "lessonId",
            "required": true,
            "in": "path",
            "description": "ID урока",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Данные о посещаемости студентов",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attendanceData": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "studentId": {
                          "type": "number",
                          "description": "ID студента"
                        },
                        "attendance": {
                          "type": "boolean",
                          "description": "Присутствовал ли студент"
                        },
                        "absentReason": {
                          "type": "string",
                          "enum": [
                            "SICK",
                            "FAMILY",
                            "OTHER"
                          ],
                          "description": "Причина отсутствия"
                        },
                        "absentComment": {
                          "type": "string",
                          "description": "Комментарий к отсутствию"
                        }
                      },
                      "required": [
                        "studentId",
                        "attendance"
                      ]
                    }
                  }
                },
                "required": [
                  "attendanceData"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Посещаемость успешно отмечена"
          },
          "404": {
            "description": "Урок не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Массово отметить посещаемость урока",
        "tags": [
          "Electronic Journal"
        ]
      }
    },
    "/lesson-results/attendance/statistics": {
      "get": {
        "operationId": "LessonResultsController_getAttendanceStatistics",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "ID группы (опционально)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyPlanId",
            "required": false,
            "in": "query",
            "description": "ID учебного плана (опционально)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода (YYYY-MM-DD, опционально)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода (YYYY-MM-DD, опционально)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статистика посещаемости"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику посещаемости",
        "tags": [
          "Electronic Journal"
        ]
      }
    },
    "/lesson-results/my-grades": {
      "get": {
        "operationId": "LessonResultsController_getMyGrades",
        "parameters": [
          {
            "name": "studyPlanId",
            "required": false,
            "in": "query",
            "description": "ID учебного плана (опционально)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Дата начала периода (YYYY-MM-DD, опционально)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Дата окончания периода (YYYY-MM-DD, опционально)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Личные оценки студента со статистикой"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить свои оценки (для студентов)",
        "tags": [
          "Electronic Journal"
        ]
      }
    },
    "/lesson-results/{id}": {
      "get": {
        "operationId": "LessonResultsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID результата урока",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Подробная информация о результате урока"
          },
          "404": {
            "description": "Результат урока не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить результат урока по ID",
        "tags": [
          "Electronic Journal"
        ]
      },
      "patch": {
        "operationId": "LessonResultsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID результата урока",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLessonResultDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Результат урока успешно обновлен"
          },
          "404": {
            "description": "Результат урока не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить результат урока (изменить оценку или посещаемость)",
        "tags": [
          "Electronic Journal"
        ]
      },
      "delete": {
        "operationId": "LessonResultsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID результата урока",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Результат урока успешно удален"
          },
          "404": {
            "description": "Результат урока не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить результат урока",
        "tags": [
          "Electronic Journal"
        ]
      }
    },
    "/ai-assistant/session": {
      "post": {
        "operationId": "AiAssistantController_createSession",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Ephemeral token создан успешно",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "client_secret": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "Ephemeral token"
                        },
                        "expires_at": {
                          "type": "number",
                          "description": "Время истечения токена (Unix timestamp)"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать ephemeral token для OpenAI Realtime API",
        "tags": [
          "AI Assistant"
        ]
      }
    },
    "/ai-assistant/generate-lessons": {
      "post": {
        "operationId": "AiAssistantController_generateLessons",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateLessonsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Уроки сгенерированы успешно",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "generatedLessons": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "summary": {
                      "type": "object"
                    },
                    "analysis": {
                      "type": "object"
                    },
                    "recommendations": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "conflicts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Генерация календарно-тематического планирования уроков с помощью AI",
        "tags": [
          "AI Assistant"
        ]
      }
    },
    "/ai-assistant/openai-responses": {
      "post": {
        "operationId": "AiAssistantController_sendMessage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Сообщение и файлы для анализа",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Текст сообщения"
                  },
                  "scenario": {
                    "type": "string",
                    "description": "Сценарий анализа"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Файлы для анализа"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ответ от AI получен успешно",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Ответ от AI ассистента"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отправить сообщение в Neuro Abai AI",
        "tags": [
          "AI Assistant"
        ]
      }
    }
  },
  "info": {
    "title": "Multi-Tenant ABAI API",
    "description": "\n# 🎓 Multi-Tenant ABAI - Система управления образовательным процессом\n\n## 📋 Описание\nКомплексная система для управления образовательным процессом с поддержкой множественной аренды.\n\n## 🚀 Основные возможности\n- 🔐 JWT аутентификация и авторизация\n- 👥 Управление пользователями с ролями (ADMIN, TEACHER, STUDENT, PARENT, HR, FINANCIST)\n- 🏫 Управление группами и аудиториями\n- 📖 Учебные планы и уроки\n- 📝 Материалы уроков (лекции, видео, тесты, домашние задания)\n- 📅 Расписание с автоматической проверкой конфликтов\n- 📊 Электронный журнал с оценками и посещаемостью\n- 📈 Статистика и аналитика\n\n## 🔑 Аутентификация\nДля доступа к защищенным эндпоинтам используйте JWT токен в заголовке Authorization:\n```\nAuthorization: Bearer <your-jwt-token>\n```\n\n## 👤 Роли пользователей\n- **ADMIN** - полный доступ ко всем функциям системы\n- **TEACHER** - управление уроками, оценками, просмотр журналов\n- **STUDENT** - просмотр своих оценок, материалов и расписания\n- **PARENT** - просмотр данных своих детей\n- **HR** - управление пользователями и отчетами\n- **FINANCIST** - управление платежами и финансовой отчетностью\n\n## 📱 Модули системы\n- **Auth** - Аутентификация и авторизация\n- **Users** - Управление пользователями\n- **Groups** - Управление группами студентов\n- **Classrooms** - Управление аудиториями\n- **Study Plans** - Учебные планы\n- **Lessons** - Уроки\n- **Materials** - Материалы уроков\n- **Schedule** - Расписание занятий\n- **Electronic Journal** - Электронный журнал\n    ",
    "version": "1.0.0",
    "contact": {
      "name": "ABAI Support Team",
      "url": "https://abai.edu.kz",
      "email": "support@abai.edu.kz"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Аутентификация и авторизация"
    },
    {
      "name": "Users",
      "description": "Управление пользователями"
    },
    {
      "name": "Groups",
      "description": "Управление группами студентов"
    },
    {
      "name": "Classrooms",
      "description": "Управление аудиториями"
    },
    {
      "name": "Study Plans",
      "description": "Учебные планы"
    },
    {
      "name": "Lessons",
      "description": "Уроки"
    },
    {
      "name": "Materials",
      "description": "Материалы уроков"
    },
    {
      "name": "Schedule",
      "description": "Расписание занятий"
    },
    {
      "name": "Electronic Journal",
      "description": "Электронный журнал с оценками и посещаемостью"
    },
    {
      "name": "Students",
      "description": "Управление студентами"
    },
    {
      "name": "Teachers",
      "description": "Управление преподавателями"
    },
    {
      "name": "Parents",
      "description": "Управление родителями"
    },
    {
      "name": "Payments",
      "description": "Система платежей"
    },
    {
      "name": "AI Assistant",
      "description": "AI ассистент с голосовым интерфейсом"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://api.abai.edu.kz",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Введите JWT токен",
        "in": "header"
      }
    },
    "schemas": {
      "PaginateMetaDto": {
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "number",
            "example": 100,
            "description": "Total number of items"
          },
          "itemCount": {
            "type": "number",
            "example": 10,
            "description": "Number of items on current page"
          },
          "itemsPerPage": {
            "type": "number",
            "example": 10,
            "description": "Number of items per page"
          },
          "totalPages": {
            "type": "number",
            "example": 10,
            "description": "Total number of pages"
          },
          "currentPage": {
            "type": "number",
            "example": 1,
            "description": "Current page number"
          }
        },
        "required": [
          "totalItems",
          "itemCount",
          "itemsPerPage",
          "totalPages",
          "currentPage"
        ]
      },
      "PaginateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Array of data items"
          },
          "meta": {
            "$ref": "#/components/schemas/PaginateMetaDto"
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "StudyPlan": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "teacherId": {
            "type": "number"
          },
          "normativeWorkload": {
            "type": "number"
          }
        },
        "description": "Represents a study plan in the system, including its details such as name, description, and associated teacher.",
        "required": [
          "name",
          "id",
          "createdAt",
          "updatedAt",
          "teacherId"
        ]
      },
      "CreateStudyPlanDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название учебного плана",
            "example": "Алгебра - 10 класс",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Описание учебного плана",
            "example": "Углубленное изучение алгебры для 10 класса"
          },
          "teacherId": {
            "type": "number",
            "description": "ID преподавателя",
            "example": 1
          },
          "normativeWorkload": {
            "type": "number",
            "nullable": true,
            "description": "Нормативная нагрузка в часах",
            "example": 102
          },
          "groups": {
            "type": "array",
            "description": "Массив групп для связи с учебным планом",
            "example": [
              {
                "id": 1
              },
              {
                "id": 2
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "ID группы"
                }
              }
            }
          }
        },
        "required": [
          "name",
          "teacherId",
          "groups"
        ]
      },
      "UpdateStudyPlanDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название учебного плана",
            "example": "Алгебра - 10 класс",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Описание учебного плана",
            "example": "Углубленное изучение алгебры для 10 класса"
          },
          "teacherId": {
            "type": "number",
            "description": "ID преподавателя",
            "example": 1
          },
          "normativeWorkload": {
            "type": "number",
            "nullable": true,
            "description": "Нормативная нагрузка в часах",
            "example": 102
          },
          "groups": {
            "type": "array",
            "description": "Массив групп для связи с учебным планом",
            "example": [
              {
                "id": 1
              },
              {
                "id": 2
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "ID группы"
                }
              }
            }
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email адрес пользователя",
            "example": "teacher@abai.edu.kz",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "Пароль пользователя",
            "example": "securePassword123",
            "minLength": 6
          },
          "rememberMe": {
            "type": "boolean",
            "description": "Запомнить меня (увеличивает время жизни токена)",
            "example": true,
            "default": false
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CreateLessonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название урока",
            "example": "Квадратные уравнения",
            "maxLength": 255
          },
          "date": {
            "type": "string",
            "description": "Дата и время урока",
            "example": "2024-09-01T08:30:00Z"
          },
          "studyPlanId": {
            "type": "number",
            "description": "ID учебного плана",
            "example": 1
          },
          "description": {
            "type": "string",
            "description": "Описание урока",
            "nullable": true,
            "example": "Решение квадратных уравнений различными методами"
          },
          "homeworkId": {
            "type": "number",
            "description": "ID домашнего задания",
            "nullable": true,
            "example": 1
          },
          "materialsId": {
            "type": "number",
            "description": "ID материалов урока",
            "nullable": true,
            "example": 1
          }
        },
        "required": [
          "name",
          "date",
          "studyPlanId"
        ]
      },
      "Lesson": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "studyPlanId": {
            "type": "number"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "homeworkId": {
            "type": "number",
            "nullable": true
          },
          "materialsId": {
            "type": "number",
            "nullable": true
          }
        },
        "description": "Represents a lesson in the system, including its details such as name, date, and associated study plan.",
        "required": [
          "name",
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "date",
          "studyPlanId",
          "description",
          "homeworkId",
          "materialsId"
        ]
      },
      "UpdateLessonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название урока",
            "example": "Квадратные уравнения",
            "maxLength": 255
          },
          "date": {
            "type": "string",
            "description": "Дата и время урока",
            "example": "2024-09-01T08:30:00Z"
          },
          "studyPlanId": {
            "type": "number",
            "description": "ID учебного плана",
            "example": 1
          },
          "description": {
            "type": "string",
            "description": "Описание урока",
            "nullable": true,
            "example": "Решение квадратных уравнений различными методами"
          },
          "homeworkId": {
            "type": "number",
            "description": "ID домашнего задания",
            "nullable": true,
            "example": 1
          },
          "materialsId": {
            "type": "number",
            "description": "ID материалов урока",
            "nullable": true,
            "example": 1
          }
        }
      },
      "CreateMaterialDto": {
        "type": "object",
        "properties": {
          "lecture": {
            "type": "string",
            "description": "Текст лекции",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "URL видео",
            "nullable": true
          },
          "presentationUrl": {
            "type": "string",
            "description": "URL презентации",
            "nullable": true
          },
          "quizId": {
            "type": "number",
            "description": "ID квиза/теста",
            "nullable": true
          },
          "homeworkId": {
            "type": "number",
            "description": "ID домашнего задания",
            "nullable": true
          }
        }
      },
      "UpdateMaterialDto": {
        "type": "object",
        "properties": {
          "lecture": {
            "type": "string",
            "description": "Текст лекции",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "URL видео",
            "nullable": true
          },
          "presentationUrl": {
            "type": "string",
            "description": "URL презентации",
            "nullable": true
          },
          "quizId": {
            "type": "number",
            "description": "ID квиза/теста",
            "nullable": true
          },
          "homeworkId": {
            "type": "number",
            "description": "ID домашнего задания",
            "nullable": true
          }
        }
      },
      "CreateQuizQuestionDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "Текст вопроса"
          },
          "options": {
            "description": "Варианты ответов",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "score": {
            "type": "number",
            "description": "Количество баллов за вопрос"
          },
          "multipleAnswers": {
            "type": "boolean",
            "description": "Множественный выбор ответов",
            "default": false
          },
          "correctAnswer": {
            "type": "object",
            "description": "Правильный ответ (индекс для одиночного выбора или массив индексов для множественного)",
            "example": 0
          }
        },
        "required": [
          "question",
          "options",
          "score"
        ]
      },
      "CreateQuizDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название квиза"
          },
          "duration": {
            "type": "number",
            "description": "Продолжительность в минутах",
            "nullable": true
          },
          "maxScore": {
            "type": "number",
            "description": "Максимальное количество баллов",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Дата начала",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Дата окончания",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Активен ли квиз",
            "nullable": true,
            "default": false
          },
          "questions": {
            "description": "Вопросы квиза",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateQuizQuestionDto"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateLessonHomeworkDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название домашнего задания"
          },
          "deadline": {
            "type": "string",
            "description": "Крайний срок сдачи",
            "nullable": true
          }
        }
      },
      "CreateLessonMaterialsDto": {
        "type": "object",
        "properties": {
          "lecture": {
            "type": "string",
            "description": "Текст лекции",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "URL видео",
            "nullable": true
          },
          "presentationUrl": {
            "type": "string",
            "description": "URL презентации",
            "nullable": true
          },
          "quiz": {
            "description": "Данные для создания квиза/теста",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateQuizDto"
              }
            ]
          },
          "homework": {
            "description": "Данные для создания домашнего задания",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateLessonHomeworkDto"
              }
            ]
          }
        }
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email пользователя",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "Имя пользователя",
            "example": "Иван"
          },
          "surname": {
            "type": "string",
            "description": "Фамилия пользователя",
            "example": "Петров"
          },
          "password": {
            "type": "string",
            "description": "Пароль пользователя"
          },
          "phone": {
            "type": "string",
            "description": "Номер телефона",
            "example": "+7 700 123 45 67",
            "nullable": true
          },
          "middlename": {
            "type": "string",
            "description": "Отчество пользователя",
            "example": "Сергеевич",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "description": "URL аватара пользователя",
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "Роль пользователя",
            "enum": [
              "STUDENT",
              "TEACHER",
              "PARENT",
              "ADMIN",
              "FINANCIST",
              "HR"
            ],
            "default": "STUDENT"
          }
        },
        "required": [
          "email",
          "name",
          "surname",
          "password",
          "role"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email пользователя",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "Имя пользователя",
            "example": "Иван"
          },
          "surname": {
            "type": "string",
            "description": "Фамилия пользователя",
            "example": "Петров"
          },
          "password": {
            "type": "string",
            "description": "Пароль пользователя"
          },
          "phone": {
            "type": "string",
            "description": "Номер телефона",
            "example": "+7 700 123 45 67",
            "nullable": true
          },
          "middlename": {
            "type": "string",
            "description": "Отчество пользователя",
            "example": "Сергеевич",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "description": "URL аватара пользователя",
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "Роль пользователя",
            "enum": [
              "STUDENT",
              "TEACHER",
              "PARENT",
              "ADMIN",
              "FINANCIST",
              "HR"
            ],
            "default": "STUDENT"
          }
        }
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название группы",
            "example": "Группа А",
            "minLength": 2
          },
          "courseNumber": {
            "type": "number",
            "description": "Номер курса",
            "example": 1,
            "minimum": 1,
            "maximum": 6
          }
        },
        "required": [
          "name",
          "courseNumber"
        ]
      },
      "GroupStatisticsDto": {
        "type": "object",
        "properties": {
          "totalGroups": {
            "type": "number",
            "description": "Общее количество групп",
            "example": 15
          },
          "totalStudents": {
            "type": "number",
            "description": "Общее количество студентов",
            "example": 250
          },
          "averageStudentsPerGroup": {
            "type": "number",
            "description": "Среднее количество студентов в группе",
            "example": 16.67
          },
          "groupsByCourse": {
            "type": "array",
            "description": "Статистика групп по курсам",
            "items": {
              "type": "object",
              "properties": {
                "courseNumber": {
                  "type": "number",
                  "example": 1
                },
                "count": {
                  "type": "number",
                  "example": 3
                }
              }
            }
          }
        },
        "required": [
          "totalGroups",
          "totalStudents",
          "averageStudentsPerGroup",
          "groupsByCourse"
        ]
      },
      "UpdateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название группы",
            "example": "Группа А",
            "minLength": 2
          },
          "courseNumber": {
            "type": "number",
            "description": "Номер курса",
            "example": 1,
            "minimum": 1,
            "maximum": 6
          }
        }
      },
      "CreateHomeworkDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название домашнего задания"
          },
          "description": {
            "type": "string",
            "description": "Описание домашнего задания"
          },
          "deadline": {
            "type": "string",
            "description": "Крайний срок сдачи"
          },
          "lessonId": {
            "type": "number",
            "description": "ID урока"
          },
          "additionalFileIds": {
            "description": "Массив ID дополнительных файлов",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "name",
          "deadline"
        ]
      },
      "UpdateHomeworkDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название домашнего задания"
          },
          "deadline": {
            "type": "string",
            "description": "Крайний срок сдачи"
          },
          "description": {
            "type": "string",
            "description": "Описание домашнего задания"
          },
          "lessonId": {
            "type": "number",
            "description": "ID урока"
          },
          "additionalFileIds": {
            "description": "Массив ID дополнительных файлов",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "HomeworkSubmitDto": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Комментарий к работе"
          },
          "fileId": {
            "type": "number",
            "description": "ID файла с работой"
          },
          "additionalFileIds": {
            "description": "Массив ID дополнительных файлов работы",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "fileId"
        ]
      },
      "GradeHomeworkDto": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "description": "Оценка"
          },
          "comment": {
            "type": "string",
            "description": "Комментарий преподавателя"
          }
        },
        "required": [
          "score"
        ]
      },
      "CreateAnswerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Текст ответа"
          },
          "isCorrect": {
            "type": "boolean",
            "description": "Правильный ли ответ"
          }
        },
        "required": [
          "name",
          "isCorrect"
        ]
      },
      "CreateQuestionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Текст вопроса"
          },
          "type": {
            "type": "string",
            "description": "Тип вопроса",
            "enum": [
              "SINGLE_CHOICE",
              "MULTIPLE_CHOICE",
              "TEXT"
            ]
          },
          "answers": {
            "description": "Варианты ответов",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAnswerDto"
            }
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "CreateQuizSubmissionDto": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "number",
            "description": "ID студента"
          },
          "answers": {
            "type": "string",
            "description": "Ответы в формате JSON",
            "example": "{\"1\": [\"a\"], \"2\": [\"b\", \"c\"], \"3\": \"open answer\"}"
          },
          "feedback": {
            "type": "string",
            "description": "Обратная связь от преподавателя"
          },
          "score": {
            "type": "number",
            "description": "Оценка за тест"
          }
        },
        "required": [
          "studentId"
        ]
      },
      "UpdateQuizDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название квиза"
          },
          "duration": {
            "type": "number",
            "description": "Продолжительность в минутах",
            "nullable": true
          },
          "maxScore": {
            "type": "number",
            "description": "Максимальное количество баллов",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Дата начала",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Дата окончания",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Активен ли квиз",
            "nullable": true,
            "default": false
          },
          "questions": {
            "description": "Вопросы квиза",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateQuizQuestionDto"
            }
          }
        }
      },
      "CreateClassroomDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название аудитории",
            "example": "Аудитория 101"
          },
          "building": {
            "type": "string",
            "description": "Здание",
            "example": "Главный корпус"
          },
          "floor": {
            "type": "number",
            "description": "Этаж",
            "example": 1
          },
          "capacity": {
            "type": "number",
            "description": "Вместимость (количество мест)",
            "example": 30
          },
          "type": {
            "type": "string",
            "description": "Тип аудитории",
            "enum": [
              "LECTURE",
              "PRACTICE",
              "COMPUTER",
              "LABORATORY",
              "OTHER"
            ],
            "example": "LECTURE"
          },
          "equipment": {
            "description": "Оборудование в аудитории",
            "example": [
              "проектор",
              "интерактивная доска",
              "компьютер"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Дополнительное описание аудитории",
            "nullable": true
          }
        },
        "required": [
          "name",
          "building",
          "floor",
          "capacity",
          "type",
          "equipment"
        ]
      },
      "UpdateClassroomDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название аудитории",
            "example": "Аудитория 101"
          },
          "building": {
            "type": "string",
            "description": "Здание",
            "example": "Главный корпус"
          },
          "floor": {
            "type": "number",
            "description": "Этаж",
            "example": 1
          },
          "capacity": {
            "type": "number",
            "description": "Вместимость (количество мест)",
            "example": 30
          },
          "type": {
            "type": "string",
            "description": "Тип аудитории",
            "enum": [
              "LECTURE",
              "PRACTICE",
              "COMPUTER",
              "LABORATORY",
              "OTHER"
            ],
            "example": "LECTURE"
          },
          "equipment": {
            "description": "Оборудование в аудитории",
            "example": [
              "проектор",
              "интерактивная доска",
              "компьютер"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Дополнительное описание аудитории",
            "nullable": true
          }
        }
      },
      "CreateScheduleDto": {
        "type": "object",
        "properties": {
          "studyPlanId": {
            "type": "number",
            "description": "ID учебного плана"
          },
          "groupId": {
            "type": "number",
            "description": "ID группы"
          },
          "teacherId": {
            "type": "number",
            "description": "ID преподавателя"
          },
          "classroomId": {
            "type": "number",
            "description": "ID аудитории",
            "nullable": true
          },
          "dayOfWeek": {
            "type": "number",
            "description": "День недели (1-7: понедельник-воскресенье)",
            "minimum": 1,
            "maximum": 7
          },
          "startTime": {
            "type": "string",
            "description": "Время начала (HH:MM)",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "Время окончания (HH:MM)",
            "example": "10:30"
          }
        },
        "required": [
          "studyPlanId",
          "groupId",
          "teacherId",
          "dayOfWeek",
          "startTime",
          "endTime"
        ]
      },
      "UpdateScheduleDto": {
        "type": "object",
        "properties": {
          "studyPlanId": {
            "type": "number",
            "description": "ID учебного плана"
          },
          "groupId": {
            "type": "number",
            "description": "ID группы"
          },
          "teacherId": {
            "type": "number",
            "description": "ID преподавателя"
          },
          "classroomId": {
            "type": "number",
            "description": "ID аудитории",
            "nullable": true
          },
          "dayOfWeek": {
            "type": "number",
            "description": "День недели (1-7: понедельник-воскресенье)",
            "minimum": 1,
            "maximum": 7
          },
          "startTime": {
            "type": "string",
            "description": "Время начала (HH:MM)",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "Время окончания (HH:MM)",
            "example": "10:30"
          }
        }
      },
      "WorkingHoursDto": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "example": "08:00",
            "description": "Время начала рабочего дня"
          },
          "end": {
            "type": "string",
            "example": "18:00",
            "description": "Время окончания рабочего дня"
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "RoomPreferenceDto": {
        "type": "object",
        "properties": {
          "roomId": {
            "type": "number",
            "example": 1,
            "description": "ID аудитории"
          },
          "roomType": {
            "type": "string",
            "example": "lecture",
            "description": "Тип аудитории"
          },
          "priority": {
            "type": "number",
            "example": 1,
            "description": "Приоритет (1-5)"
          }
        },
        "required": [
          "roomId",
          "roomType",
          "priority"
        ]
      },
      "ScheduleConstraintsDto": {
        "type": "object",
        "properties": {
          "workingHours": {
            "description": "Рабочие часы",
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkingHoursDto"
              }
            ]
          },
          "preferredBreaks": {
            "example": [
              12,
              13
            ],
            "description": "Предпочтительное время обеда (часы)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maxConsecutiveHours": {
            "type": "number",
            "example": 4,
            "description": "Максимальное количество занятий подряд"
          },
          "excludeWeekends": {
            "type": "boolean",
            "example": true,
            "description": "Исключить выходные дни"
          },
          "roomPreferences": {
            "description": "Предпочтения по аудиториям",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomPreferenceDto"
            }
          },
          "minBreakDuration": {
            "type": "number",
            "example": 15,
            "description": "Минимальная длительность перерыва (минуты)"
          }
        },
        "required": [
          "workingHours",
          "preferredBreaks",
          "maxConsecutiveHours",
          "excludeWeekends",
          "roomPreferences",
          "minBreakDuration"
        ]
      },
      "GenerateScheduleDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "example": "2024-09-01",
            "description": "Дата начала периода"
          },
          "endDate": {
            "type": "string",
            "example": "2024-12-20",
            "description": "Дата окончания периода"
          },
          "groupIds": {
            "example": [
              1,
              2,
              3
            ],
            "description": "Массив ID групп для генерации",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "constraints": {
            "description": "Ограничения и предпочтения",
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleConstraintsDto"
              }
            ]
          },
          "generationType": {
            "type": "string",
            "enum": [
              "full",
              "partial",
              "optimize"
            ],
            "description": "Тип генерации"
          },
          "teacherIds": {
            "example": [
              1,
              2
            ],
            "description": "ID преподавателей (опционально)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subjectIds": {
            "example": [
              1,
              2,
              3
            ],
            "description": "ID предметов (опционально)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additionalInstructions": {
            "type": "string",
            "example": "Генерация расписания для осеннего семестра",
            "description": "Дополнительные инструкции"
          }
        },
        "required": [
          "startDate",
          "endDate",
          "groupIds",
          "constraints",
          "generationType",
          "teacherIds",
          "subjectIds",
          "additionalInstructions"
        ]
      },
      "GeneratedScheduleItemDto": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "example": "monday",
            "description": "День недели"
          },
          "startTime": {
            "type": "string",
            "example": "09:00",
            "description": "Время начала занятия"
          },
          "endTime": {
            "type": "string",
            "example": "10:30",
            "description": "Время окончания занятия"
          },
          "subject": {
            "type": "string",
            "example": "Математика",
            "description": "Название предмета"
          },
          "groupId": {
            "type": "string",
            "example": "МК24-1М",
            "description": "ID группы"
          },
          "teacherId": {
            "type": "string",
            "example": "1",
            "description": "ID преподавателя"
          },
          "teacherName": {
            "type": "string",
            "example": "Иванова И.И.",
            "description": "Имя преподавателя"
          },
          "roomId": {
            "type": "string",
            "example": "301",
            "description": "Номер аудитории"
          },
          "type": {
            "type": "string",
            "example": "lesson",
            "description": "Тип занятия"
          },
          "repeat": {
            "type": "string",
            "example": "weekly",
            "description": "Повторяемость"
          },
          "status": {
            "type": "string",
            "example": "upcoming",
            "description": "Статус занятия"
          },
          "date": {
            "type": "string",
            "example": "2024-09-02",
            "description": "Конкретная дата занятия"
          },
          "roomType": {
            "type": "string",
            "example": "Lecture hall",
            "description": "Тип аудитории"
          },
          "roomCapacity": {
            "type": "number",
            "example": 50,
            "description": "Вместимость аудитории"
          },
          "groupSize": {
            "type": "number",
            "example": 25,
            "description": "Количество студентов в группе"
          }
        },
        "required": [
          "day",
          "startTime",
          "endTime",
          "subject",
          "groupId",
          "teacherId",
          "teacherName",
          "roomId",
          "type",
          "repeat",
          "status",
          "date",
          "roomType",
          "roomCapacity",
          "groupSize"
        ]
      },
      "ConflictInfoDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "teacher_conflict",
              "room_conflict",
              "group_conflict",
              "time_conflict",
              "capacity_conflict"
            ],
            "description": "Тип конфликта"
          },
          "description": {
            "type": "string",
            "example": "Преподаватель Иванов И.И. занят в это время в другой группе",
            "description": "Описание конфликта"
          },
          "severity": {
            "type": "string",
            "enum": [
              "high",
              "medium",
              "low"
            ],
            "description": "Серьезность конфликта"
          },
          "affectedItems": {
            "example": [
              0,
              3
            ],
            "description": "Индексы затронутых элементов расписания",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "solution": {
            "type": "string",
            "example": "Перенести занятие на 14:00 или заменить преподавателя",
            "description": "Предложение по решению"
          },
          "timeSlot": {
            "type": "string",
            "example": "09:00-10:30",
            "description": "Временной интервал конфликта"
          },
          "conflictingRoom": {
            "type": "string",
            "example": "301",
            "description": "Аудитория с конфликтом"
          },
          "conflictingTeacher": {
            "type": "string",
            "example": "Петров П.П.",
            "description": "Преподаватель с конфликтом"
          }
        },
        "required": [
          "type",
          "description",
          "severity",
          "affectedItems",
          "solution",
          "timeSlot",
          "conflictingRoom",
          "conflictingTeacher"
        ]
      },
      "OptimizationSuggestionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "time_optimization",
              "room_optimization",
              "teacher_balancing",
              "workload_distribution",
              "break_optimization"
            ],
            "description": "Тип предложения"
          },
          "description": {
            "type": "string",
            "example": "Рекомендуется добавить перерыв между занятиями",
            "description": "Описание предложения"
          },
          "priority": {
            "type": "string",
            "enum": [
              "high",
              "medium",
              "low"
            ],
            "description": "Приоритет предложения"
          },
          "affectedItems": {
            "example": [
              1,
              2
            ],
            "description": "Индексы элементов для оптимизации",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reasoning": {
            "type": "string",
            "example": "Улучшит качество обучения и снизит утомляемость",
            "description": "Обоснование предложения"
          },
          "expectedImprovement": {
            "type": "number",
            "example": 15,
            "description": "Ожидаемый процент улучшения"
          }
        },
        "required": [
          "type",
          "description",
          "priority",
          "affectedItems",
          "reasoning",
          "expectedImprovement"
        ]
      },
      "ScheduleStatisticsDto": {
        "type": "object",
        "properties": {
          "totalLessons": {
            "type": "number",
            "example": 20,
            "description": "Общее количество занятий"
          },
          "teachersCount": {
            "type": "number",
            "example": 5,
            "description": "Количество преподавателей"
          },
          "roomsCount": {
            "type": "number",
            "example": 8,
            "description": "Количество аудиторий"
          },
          "groupsCount": {
            "type": "number",
            "example": 3,
            "description": "Количество групп"
          },
          "roomUtilization": {
            "type": "number",
            "example": 85,
            "description": "Процент использования аудиторий"
          },
          "teacherWorkload": {
            "type": "number",
            "example": 92,
            "description": "Процент загрузки преподавателей"
          },
          "averageStudentGaps": {
            "type": "number",
            "example": 2,
            "description": "Среднее количество окон у студентов"
          },
          "averageDailyLessons": {
            "type": "number",
            "example": 6,
            "description": "Среднее количество занятий в день"
          }
        },
        "required": [
          "totalLessons",
          "teachersCount",
          "roomsCount",
          "groupsCount",
          "roomUtilization",
          "teacherWorkload",
          "averageStudentGaps",
          "averageDailyLessons"
        ]
      },
      "AIScheduleResponseDto": {
        "type": "object",
        "properties": {
          "generatedSchedule": {
            "description": "Сгенерированное расписание",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneratedScheduleItemDto"
            }
          },
          "conflicts": {
            "description": "Обнаруженные конфликты",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConflictInfoDto"
            }
          },
          "suggestions": {
            "description": "Предложения по оптимизации",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptimizationSuggestionDto"
            }
          },
          "reasoning": {
            "type": "string",
            "example": "Расписание составлено с учетом всех требований. Обнаружено 2 незначительных конфликта, которые можно решить переносом занятий.",
            "description": "Объяснение логики составления"
          },
          "confidence": {
            "type": "number",
            "example": 0.87,
            "minimum": 0,
            "maximum": 1,
            "description": "Уровень уверенности ИИ в качестве расписания"
          },
          "statistics": {
            "description": "Статистика сгенерированного расписания",
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleStatisticsDto"
              }
            ]
          },
          "generatedAt": {
            "type": "string",
            "example": "2024-01-20T10:30:00Z",
            "description": "Время генерации"
          },
          "aiModel": {
            "type": "string",
            "example": "gpt-4o-2024-08-06",
            "description": "Модель ИИ, использованная для генерации"
          },
          "algorithmVersion": {
            "type": "string",
            "example": "1.2.0",
            "description": "Версия алгоритма генерации"
          }
        },
        "required": [
          "generatedSchedule",
          "conflicts",
          "suggestions",
          "reasoning",
          "confidence",
          "statistics",
          "generatedAt",
          "aiModel",
          "algorithmVersion"
        ]
      },
      "CreateStudentDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "ID пользователя (User), который станет студентом",
            "example": 1
          },
          "groupId": {
            "type": "number",
            "description": "ID группы, в которую зачисляется студент",
            "example": 1
          },
          "classId": {
            "type": "number",
            "description": "ID класса (если применимо)",
            "example": 101,
            "nullable": true
          }
        },
        "required": [
          "userId",
          "groupId"
        ]
      },
      "CreateFullStudentDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email студента",
            "example": "student@example.com"
          },
          "name": {
            "type": "string",
            "description": "Имя студента",
            "example": "Иван"
          },
          "surname": {
            "type": "string",
            "description": "Фамилия студента",
            "example": "Петров"
          },
          "password": {
            "type": "string",
            "description": "Пароль студента"
          },
          "phone": {
            "type": "string",
            "description": "Номер телефона",
            "example": "+7 700 123 45 67",
            "nullable": true
          },
          "middlename": {
            "type": "string",
            "description": "Отчество студента",
            "example": "Сергеевич",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "description": "URL аватара студента",
            "nullable": true
          },
          "groupId": {
            "type": "number",
            "description": "ID группы, в которую зачисляется студент",
            "example": 1
          },
          "classId": {
            "type": "number",
            "description": "ID класса (если применимо)",
            "example": 101,
            "nullable": true
          }
        },
        "required": [
          "email",
          "name",
          "surname",
          "password",
          "groupId"
        ]
      },
      "UpdateStudentDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "ID пользователя (User), который станет студентом",
            "example": 1
          },
          "groupId": {
            "type": "number",
            "description": "ID группы, в которую зачисляется студент",
            "example": 1
          },
          "classId": {
            "type": "number",
            "description": "ID класса (если применимо)",
            "example": 101,
            "nullable": true
          }
        }
      },
      "CreateTeacherDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "ID пользователя (User), который станет преподавателем",
            "example": 1
          },
          "employmentType": {
            "type": "string",
            "description": "Тип занятости преподавателя",
            "example": "STAFF",
            "enum": [
              "STAFF",
              "PART_TIME"
            ],
            "default": "STAFF"
          },
          "specialization": {
            "type": "string",
            "description": "Специализация преподавателя",
            "example": "Математика и физика",
            "nullable": true
          },
          "qualification": {
            "type": "string",
            "description": "Квалификация преподавателя",
            "example": "Кандидат физико-математических наук",
            "nullable": true
          },
          "experience": {
            "type": "number",
            "description": "Опыт работы в годах",
            "example": 5,
            "nullable": true
          }
        },
        "required": [
          "userId"
        ]
      },
      "UpdateTeacherDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "ID пользователя (User), который станет преподавателем",
            "example": 1
          },
          "employmentType": {
            "type": "string",
            "description": "Тип занятости преподавателя",
            "example": "STAFF",
            "enum": [
              "STAFF",
              "PART_TIME"
            ],
            "default": "STAFF"
          },
          "specialization": {
            "type": "string",
            "description": "Специализация преподавателя",
            "example": "Математика и физика",
            "nullable": true
          },
          "qualification": {
            "type": "string",
            "description": "Квалификация преподавателя",
            "example": "Кандидат физико-математических наук",
            "nullable": true
          },
          "experience": {
            "type": "number",
            "description": "Опыт работы в годах",
            "example": 5,
            "nullable": true
          }
        }
      },
      "CreateParentDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "ID пользователя (User), который станет родителем",
            "example": 1
          }
        },
        "required": [
          "userId"
        ]
      },
      "UpdateParentDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "ID пользователя (User), который станет родителем",
            "example": 1
          }
        }
      },
      "CreatePaymentDto": {
        "type": "object",
        "properties": {}
      },
      "UpdatePaymentDto": {
        "type": "object",
        "properties": {}
      },
      "CreateBudgetItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название статьи бюджета",
            "example": "Оплата за обучение"
          },
          "type": {
            "type": "string",
            "description": "Тип статьи бюджета",
            "enum": [
              "INCOME",
              "EXPENSE"
            ],
            "example": "INCOME"
          },
          "category": {
            "type": "string",
            "description": "Категория",
            "example": "tuition"
          },
          "plannedAmount": {
            "type": "number",
            "description": "Плановая сумма",
            "example": 25000000
          },
          "actualAmount": {
            "type": "number",
            "description": "Фактическая сумма",
            "example": 24500000
          },
          "currency": {
            "type": "string",
            "description": "Валюта",
            "example": "KZT",
            "default": "KZT"
          },
          "period": {
            "type": "string",
            "description": "Период (квартал)",
            "example": "2024 Q3"
          },
          "responsible": {
            "type": "string",
            "description": "Ответственное лицо",
            "example": "Иванов И.И."
          },
          "status": {
            "type": "string",
            "description": "Статус статьи",
            "enum": [
              "PENDING",
              "ACTIVE",
              "CLOSED"
            ],
            "default": "ACTIVE"
          },
          "description": {
            "type": "string",
            "description": "Описание",
            "example": "Доходы от основной образовательной деятельности"
          }
        },
        "required": [
          "name",
          "type",
          "category",
          "plannedAmount",
          "period"
        ]
      },
      "BudgetItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID статьи бюджета"
          },
          "name": {
            "type": "string",
            "description": "Название статьи"
          },
          "type": {
            "type": "string",
            "description": "Тип статьи",
            "enum": [
              "INCOME",
              "EXPENSE"
            ]
          },
          "category": {
            "type": "string",
            "description": "Категория"
          },
          "plannedAmount": {
            "type": "number",
            "description": "Плановая сумма"
          },
          "actualAmount": {
            "type": "number",
            "description": "Фактическая сумма"
          },
          "currency": {
            "type": "string",
            "description": "Валюта"
          },
          "period": {
            "type": "string",
            "description": "Период"
          },
          "responsible": {
            "type": "string",
            "description": "Ответственное лицо",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Статус",
            "enum": [
              "PENDING",
              "ACTIVE",
              "CLOSED"
            ]
          },
          "description": {
            "type": "string",
            "description": "Описание",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Дата создания"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Дата обновления"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Дата удаления",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "category",
          "plannedAmount",
          "actualAmount",
          "currency",
          "period",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateBudgetItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название статьи бюджета",
            "example": "Оплата за обучение"
          },
          "type": {
            "type": "string",
            "description": "Тип статьи бюджета",
            "enum": [
              "INCOME",
              "EXPENSE"
            ],
            "example": "INCOME"
          },
          "category": {
            "type": "string",
            "description": "Категория",
            "example": "tuition"
          },
          "plannedAmount": {
            "type": "number",
            "description": "Плановая сумма",
            "example": 25000000
          },
          "actualAmount": {
            "type": "number",
            "description": "Фактическая сумма",
            "example": 24500000
          },
          "currency": {
            "type": "string",
            "description": "Валюта",
            "example": "KZT",
            "default": "KZT"
          },
          "period": {
            "type": "string",
            "description": "Период (квартал)",
            "example": "2024 Q3"
          },
          "responsible": {
            "type": "string",
            "description": "Ответственное лицо",
            "example": "Иванов И.И."
          },
          "status": {
            "type": "string",
            "description": "Статус статьи",
            "enum": [
              "PENDING",
              "ACTIVE",
              "CLOSED"
            ],
            "default": "ACTIVE"
          },
          "description": {
            "type": "string",
            "description": "Описание",
            "example": "Доходы от основной образовательной деятельности"
          }
        }
      },
      "GenerateReportDto": {
        "type": "object",
        "properties": {}
      },
      "CreateMonthlyWorkloadDto": {
        "type": "object",
        "properties": {
          "month": {
            "type": "number"
          },
          "year": {
            "type": "number"
          },
          "standardHours": {
            "type": "number"
          },
          "actualHours": {
            "type": "number"
          }
        },
        "required": [
          "month",
          "year",
          "standardHours",
          "actualHours"
        ]
      },
      "CreateQuarterlyWorkloadDto": {
        "type": "object",
        "properties": {
          "quarter": {
            "type": "number"
          },
          "year": {
            "type": "number"
          },
          "standardHours": {
            "type": "number"
          },
          "actualHours": {
            "type": "number"
          }
        },
        "required": [
          "quarter",
          "year",
          "standardHours",
          "actualHours"
        ]
      },
      "CreateDailyWorkloadDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "hours": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "REGULAR",
              "OVERTIME",
              "SICK",
              "VACATION"
            ]
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "date",
          "hours",
          "type"
        ]
      },
      "CreateSubjectWorkloadDto": {
        "type": "object",
        "properties": {
          "subjectName": {
            "type": "string"
          },
          "hours": {
            "type": "number"
          },
          "studyPlanId": {
            "type": "number"
          }
        },
        "required": [
          "subjectName",
          "hours"
        ]
      },
      "CreateAdditionalActivityDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "hours": {
            "type": "number"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "hours"
        ]
      },
      "CreateWorkloadDto": {
        "type": "object",
        "properties": {
          "teacherId": {
            "type": "number"
          },
          "academicYear": {
            "type": "string"
          },
          "standardHours": {
            "type": "number",
            "default": 0
          },
          "actualHours": {
            "type": "number",
            "default": 0
          },
          "overtimeHours": {
            "type": "number",
            "default": 0
          },
          "vacationDays": {
            "type": "number",
            "default": 0
          },
          "sickLeaveDays": {
            "type": "number",
            "default": 0
          },
          "monthlyHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMonthlyWorkloadDto"
            }
          },
          "quarterlyHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateQuarterlyWorkloadDto"
            }
          },
          "dailyHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateDailyWorkloadDto"
            }
          },
          "subjectWorkloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSubjectWorkloadDto"
            }
          },
          "additionalActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAdditionalActivityDto"
            }
          }
        },
        "required": [
          "teacherId",
          "academicYear",
          "standardHours",
          "actualHours",
          "overtimeHours",
          "vacationDays",
          "sickLeaveDays"
        ]
      },
      "UpdateWorkloadDto": {
        "type": "object",
        "properties": {
          "teacherId": {
            "type": "number"
          },
          "academicYear": {
            "type": "string"
          },
          "standardHours": {
            "type": "number",
            "default": 0
          },
          "actualHours": {
            "type": "number",
            "default": 0
          },
          "overtimeHours": {
            "type": "number",
            "default": 0
          },
          "vacationDays": {
            "type": "number",
            "default": 0
          },
          "sickLeaveDays": {
            "type": "number",
            "default": 0
          },
          "monthlyHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMonthlyWorkloadDto"
            }
          },
          "quarterlyHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateQuarterlyWorkloadDto"
            }
          },
          "dailyHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateDailyWorkloadDto"
            }
          },
          "subjectWorkloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSubjectWorkloadDto"
            }
          },
          "additionalActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAdditionalActivityDto"
            }
          }
        }
      },
      "CreateSalaryBonusDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PERFORMANCE",
              "ACHIEVEMENT",
              "OVERTIME",
              "HOLIDAY",
              "OTHER"
            ]
          },
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "amount"
        ]
      },
      "CreateSalaryDeductionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "amount"
        ]
      },
      "CreateSalaryDto": {
        "type": "object",
        "properties": {
          "teacherId": {
            "type": "number"
          },
          "baseSalary": {
            "type": "number"
          },
          "bonuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalaryBonusDto"
            }
          },
          "deductions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalaryDeductionDto"
            }
          },
          "month": {
            "type": "number"
          },
          "year": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "teacherId",
          "baseSalary",
          "month",
          "year"
        ]
      },
      "UpdateSalaryDto": {
        "type": "object",
        "properties": {
          "teacherId": {
            "type": "number"
          },
          "baseSalary": {
            "type": "number"
          },
          "bonuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalaryBonusDto"
            }
          },
          "deductions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSalaryDeductionDto"
            }
          },
          "month": {
            "type": "number"
          },
          "year": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "PerformanceOverviewDto": {
        "type": "object",
        "properties": {
          "averageGrade": {
            "type": "number",
            "description": "Средний балл",
            "example": 4.2
          },
          "performanceRate": {
            "type": "number",
            "description": "Процент успеваемости",
            "example": 78
          },
          "attendanceRate": {
            "type": "number",
            "description": "Процент посещаемости",
            "example": 92
          },
          "assignmentCompletionRate": {
            "type": "number",
            "description": "Процент выполнения заданий",
            "example": 85
          },
          "trends": {
            "type": "object",
            "description": "Тренды изменения показателей",
            "example": {
              "grade": 0.3,
              "performance": 5,
              "attendance": -2,
              "assignments": 3
            }
          }
        },
        "required": [
          "averageGrade",
          "performanceRate",
          "attendanceRate",
          "assignmentCompletionRate",
          "trends"
        ]
      },
      "StatisticsResponseDto": {
        "type": "object",
        "properties": {
          "overview": {
            "description": "Общая статистика",
            "allOf": [
              {
                "$ref": "#/components/schemas/PerformanceOverviewDto"
              }
            ]
          }
        },
        "required": [
          "overview"
        ]
      },
      "SubjectPerformanceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название предмета",
            "example": "Математика"
          },
          "grade": {
            "type": "number",
            "description": "Средний балл по предмету",
            "example": 4.3
          },
          "attendance": {
            "type": "number",
            "description": "Посещаемость (%)",
            "example": 95
          },
          "assignments": {
            "type": "number",
            "description": "Выполнение заданий (%)",
            "example": 92
          },
          "participation": {
            "type": "number",
            "description": "Активность на занятиях (%)",
            "example": 88
          }
        },
        "required": [
          "name",
          "grade",
          "attendance",
          "assignments",
          "participation"
        ]
      },
      "SubjectsResponseDto": {
        "type": "object",
        "properties": {
          "subjects": {
            "description": "Статистика по предметам",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubjectPerformanceDto"
            }
          },
          "summary": {
            "type": "object",
            "description": "Сводка по предметам",
            "example": {
              "bestPerforming": [
                "Английский",
                "Математика"
              ],
              "needsImprovement": [
                "Химия",
                "Биология"
              ]
            }
          }
        },
        "required": [
          "subjects",
          "summary"
        ]
      },
      "ClassDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID группы",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Название группы",
            "example": "МК24-1М"
          },
          "averageGrade": {
            "type": "number",
            "description": "Средний балл группы",
            "example": 4.2
          },
          "attendance": {
            "type": "number",
            "description": "Посещаемость группы (%)",
            "example": 92
          },
          "assignments": {
            "type": "number",
            "description": "Выполнение заданий (%)",
            "example": 85
          },
          "studentsCount": {
            "type": "number",
            "description": "Количество студентов",
            "example": 25
          }
        },
        "required": [
          "id",
          "name",
          "averageGrade",
          "attendance",
          "assignments",
          "studentsCount"
        ]
      },
      "ClassesResponseDto": {
        "type": "object",
        "properties": {
          "classes": {
            "description": "Данные по группам",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClassDataDto"
            }
          },
          "statistics": {
            "type": "object",
            "description": "Общая статистика по группам",
            "example": {
              "averagePerformance": 4.1,
              "topClasses": [
                "МК24-1М",
                "ПК24-1П"
              ],
              "totalStudents": 94
            }
          }
        },
        "required": [
          "classes",
          "statistics"
        ]
      },
      "StudentPerformanceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "ФИО студента",
            "example": "Арман Сериков"
          },
          "grade": {
            "type": "number",
            "description": "Средний балл студента",
            "example": 2.8
          },
          "trend": {
            "type": "number",
            "description": "Тренд изменения балла",
            "example": -0.2
          }
        },
        "required": [
          "name",
          "grade",
          "trend"
        ]
      },
      "SubjectWithRecommendationsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название предмета",
            "example": "Математика"
          },
          "grade": {
            "type": "number",
            "description": "Балл по предмету",
            "example": 2.5
          },
          "recommendations": {
            "description": "Рекомендации для улучшения",
            "example": [
              "Больше практики",
              "Дополнительные занятия"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "grade",
          "recommendations"
        ]
      },
      "StudentWithSubjectsDto": {
        "type": "object",
        "properties": {
          "student": {
            "description": "Данные студента",
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPerformanceDto"
              }
            ]
          },
          "subjects": {
            "description": "Предметы с низкой успеваемостью",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubjectWithRecommendationsDto"
            }
          }
        },
        "required": [
          "student",
          "subjects"
        ]
      },
      "LowPerformingStudentsResponseDto": {
        "type": "object",
        "properties": {
          "students": {
            "description": "Студенты с низкой успеваемостью",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StudentWithSubjectsDto"
            }
          }
        },
        "required": [
          "students"
        ]
      },
      "SubjectImprovementDto": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Название предмета",
            "example": "Физика"
          },
          "improvement": {
            "type": "number",
            "description": "Улучшение балла",
            "example": 0.5
          }
        },
        "required": [
          "subject",
          "improvement"
        ]
      },
      "StudentWithImprovementsDto": {
        "type": "object",
        "properties": {
          "student": {
            "description": "Данные студента",
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPerformanceDto"
              }
            ]
          },
          "improvements": {
            "description": "Улучшения по предметам",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubjectImprovementDto"
            }
          }
        },
        "required": [
          "student",
          "improvements"
        ]
      },
      "HighProgressStudentsResponseDto": {
        "type": "object",
        "properties": {
          "students": {
            "description": "Студенты с высоким прогрессом",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StudentWithImprovementsDto"
            }
          }
        },
        "required": [
          "students"
        ]
      },
      "TrendDataPointDto": {
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "description": "Период",
            "example": "2024-01"
          },
          "value": {
            "type": "number",
            "description": "Значение показателя",
            "example": 4.2
          },
          "change": {
            "type": "number",
            "description": "Изменение относительно предыдущего периода",
            "example": 0.1
          }
        },
        "required": [
          "period",
          "value",
          "change"
        ]
      },
      "TrendAnalysisDto": {
        "type": "object",
        "properties": {
          "trend": {
            "type": "string",
            "description": "Тип тренда",
            "enum": [
              "positive",
              "negative",
              "stable"
            ]
          },
          "factors": {
            "description": "Факторы влияющие на тренд",
            "example": [
              "Улучшение посещаемости",
              "Новые методы обучения"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "trend",
          "factors"
        ]
      },
      "TrendsResponseDto": {
        "type": "object",
        "properties": {
          "trends": {
            "description": "Данные тренда",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendDataPointDto"
            }
          },
          "analysis": {
            "description": "Анализ тренда",
            "allOf": [
              {
                "$ref": "#/components/schemas/TrendAnalysisDto"
              }
            ]
          }
        },
        "required": [
          "trends",
          "analysis"
        ]
      },
      "MonthlyDataDto": {
        "type": "object",
        "properties": {
          "month": {
            "type": "string",
            "description": "Месяц",
            "example": "Сен"
          },
          "value": {
            "type": "number",
            "description": "Значение показателя",
            "example": 3.8
          },
          "attendance": {
            "type": "number",
            "description": "Посещаемость",
            "example": 88
          },
          "assignments": {
            "type": "number",
            "description": "Выполнение заданий",
            "example": 85
          }
        },
        "required": [
          "month",
          "value",
          "attendance",
          "assignments"
        ]
      },
      "GradeDistributionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Оценка",
            "example": "5"
          },
          "value": {
            "type": "number",
            "description": "Количество студентов",
            "example": 25
          },
          "color": {
            "type": "string",
            "description": "Цвет для графика",
            "example": "#10B981"
          }
        },
        "required": [
          "name",
          "value",
          "color"
        ]
      },
      "PerformanceMetricDto": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Название метрики",
            "example": "Оценки"
          },
          "value": {
            "type": "number",
            "description": "Значение метрики",
            "example": 85
          }
        },
        "required": [
          "subject",
          "value"
        ]
      },
      "KpiMetricDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название метрики",
            "example": "Качество преподавания"
          },
          "value": {
            "type": "number",
            "description": "Значение метрики (0-100)",
            "example": 85
          },
          "target": {
            "type": "number",
            "description": "Целевое значение",
            "example": 80
          },
          "change": {
            "type": "number",
            "description": "Изменение относительно предыдущего периода",
            "example": 5
          },
          "unit": {
            "type": "string",
            "description": "Единица измерения",
            "example": "%"
          },
          "status": {
            "type": "string",
            "description": "Статус достижения цели",
            "enum": [
              "success",
              "warning",
              "danger"
            ]
          }
        },
        "required": [
          "name",
          "value",
          "target",
          "change",
          "unit",
          "status"
        ]
      },
      "KpiOverviewResponseDto": {
        "type": "object",
        "properties": {
          "metrics": {
            "description": "Общие метрики KPI",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KpiMetricDto"
            }
          },
          "overallKpi": {
            "type": "number",
            "description": "Средний KPI по организации",
            "example": 83
          },
          "goalAchievement": {
            "type": "number",
            "description": "Процент достижения целей",
            "example": 78
          },
          "activeGoals": {
            "type": "number",
            "description": "Количество активных целей",
            "example": 15
          },
          "totalTeachers": {
            "type": "number",
            "description": "Количество преподавателей",
            "example": 45
          }
        },
        "required": [
          "metrics",
          "overallKpi",
          "goalAchievement",
          "activeGoals",
          "totalTeachers"
        ]
      },
      "TeacherKpiDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID преподавателя",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "ФИО преподавателя",
            "example": "Иванов Иван Иванович"
          },
          "overallScore": {
            "type": "number",
            "description": "Общий KPI балл",
            "example": 87
          },
          "teachingQuality": {
            "type": "number",
            "description": "Качество преподавания",
            "example": 85
          },
          "studentSatisfaction": {
            "type": "number",
            "description": "Удовлетворенность студентов",
            "example": 90
          },
          "classAttendance": {
            "type": "number",
            "description": "Посещаемость занятий",
            "example": 95
          },
          "workloadCompliance": {
            "type": "number",
            "description": "Выполнение нагрузки",
            "example": 88
          },
          "professionalDevelopment": {
            "type": "number",
            "description": "Профессиональное развитие",
            "example": 75
          },
          "trend": {
            "type": "number",
            "description": "Тренд изменения",
            "example": 3
          },
          "rank": {
            "type": "number",
            "description": "Позиция в рейтинге",
            "example": 5
          }
        },
        "required": [
          "id",
          "name",
          "overallScore",
          "teachingQuality",
          "studentSatisfaction",
          "classAttendance",
          "workloadCompliance",
          "professionalDevelopment",
          "trend",
          "rank"
        ]
      },
      "TeacherKpiResponseDto": {
        "type": "object",
        "properties": {
          "teachers": {
            "description": "Список преподавателей с KPI",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeacherKpiDto"
            }
          },
          "statistics": {
            "type": "object",
            "description": "Статистика по преподавателям"
          }
        },
        "required": [
          "teachers",
          "statistics"
        ]
      },
      "DepartmentKpiDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название отдела",
            "example": "Математика и информатика"
          },
          "averageKpi": {
            "type": "number",
            "description": "Средний KPI отдела",
            "example": 82
          },
          "teacherCount": {
            "type": "number",
            "description": "Количество преподавателей",
            "example": 12
          },
          "goalAchievement": {
            "type": "number",
            "description": "Процент достижения целей",
            "example": 75
          },
          "trend": {
            "type": "number",
            "description": "Тренд отдела",
            "example": 2
          }
        },
        "required": [
          "name",
          "averageKpi",
          "teacherCount",
          "goalAchievement",
          "trend"
        ]
      },
      "DepartmentKpiResponseDto": {
        "type": "object",
        "properties": {
          "departments": {
            "description": "KPI по отделам",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepartmentKpiDto"
            }
          },
          "topDepartment": {
            "description": "Лучший отдел",
            "allOf": [
              {
                "$ref": "#/components/schemas/DepartmentKpiDto"
              }
            ]
          }
        },
        "required": [
          "departments",
          "topDepartment"
        ]
      },
      "KpiTrendDto": {
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "description": "Период",
            "example": "Янв 2024"
          },
          "value": {
            "type": "number",
            "description": "Значение KPI",
            "example": 82
          },
          "target": {
            "type": "number",
            "description": "Целевое значение",
            "example": 80
          }
        },
        "required": [
          "period",
          "value",
          "target"
        ]
      },
      "KpiTrendsResponseDto": {
        "type": "object",
        "properties": {
          "trends": {
            "description": "Данные трендов",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KpiTrendDto"
            }
          },
          "analysis": {
            "type": "object",
            "description": "Анализ тренда"
          }
        },
        "required": [
          "trends",
          "analysis"
        ]
      },
      "KpiGoalDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID цели",
            "example": 1
          },
          "title": {
            "type": "string",
            "description": "Название цели",
            "example": "Повышение качества преподавания"
          },
          "description": {
            "type": "string",
            "description": "Описание",
            "example": "Достижение 85% удовлетворенности студентов"
          },
          "target": {
            "type": "number",
            "description": "Целевое значение",
            "example": 85
          },
          "current": {
            "type": "number",
            "description": "Текущее значение",
            "example": 78
          },
          "progress": {
            "type": "number",
            "description": "Прогресс (%)",
            "example": 92
          },
          "deadline": {
            "type": "string",
            "description": "Дедлайн",
            "example": "2024-06-30"
          },
          "status": {
            "type": "string",
            "description": "Статус",
            "enum": [
              "on_track",
              "at_risk",
              "behind"
            ]
          },
          "responsible": {
            "type": "string",
            "description": "Ответственный",
            "example": "Иванов И.И."
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "target",
          "current",
          "progress",
          "deadline",
          "status",
          "responsible"
        ]
      },
      "KpiGoalsResponseDto": {
        "type": "object",
        "properties": {
          "goals": {
            "description": "Список целей KPI",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KpiGoalDto"
            }
          },
          "summary": {
            "type": "object",
            "description": "Сводка по целям"
          }
        },
        "required": [
          "goals",
          "summary"
        ]
      },
      "KpiComparisonDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Название категории",
            "example": "Качество преподавания"
          },
          "current": {
            "type": "number",
            "description": "Текущий период",
            "example": 85
          },
          "previous": {
            "type": "number",
            "description": "Предыдущий период",
            "example": 82
          },
          "change": {
            "type": "number",
            "description": "Изменение",
            "example": 3
          },
          "changePercent": {
            "type": "number",
            "description": "Процент изменения",
            "example": 3.7
          }
        },
        "required": [
          "category",
          "current",
          "previous",
          "change",
          "changePercent"
        ]
      },
      "KpiComparisonResponseDto": {
        "type": "object",
        "properties": {
          "comparison": {
            "description": "Сравнение KPI",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KpiComparisonDto"
            }
          },
          "overallChange": {
            "type": "number",
            "description": "Общее изменение",
            "example": 2.5
          }
        },
        "required": [
          "comparison",
          "overallChange"
        ]
      },
      "CreateVacationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "vacation",
              "sick_leave",
              "maternity_leave",
              "unpaid_leave",
              "business_trip"
            ],
            "description": "Тип отпуска",
            "example": "vacation"
          },
          "startDate": {
            "type": "string",
            "description": "Дата начала отпуска",
            "example": "2024-06-15T00:00:00Z"
          },
          "endDate": {
            "type": "string",
            "description": "Дата окончания отпуска",
            "example": "2024-07-12T00:00:00Z"
          },
          "days": {
            "type": "number",
            "description": "Количество дней",
            "example": 28
          },
          "substituteId": {
            "type": "number",
            "description": "ID замещающего преподавателя",
            "example": 2
          },
          "comment": {
            "type": "string",
            "description": "Комментарий к заявке",
            "example": "Плановый отпуск"
          },
          "lectureTopics": {
            "type": "string",
            "description": "Темы лекций для замещающего преподавателя",
            "example": "Темы: 1. Алгебра многочленов, 2. Тригонометрия"
          },
          "lessonIds": {
            "description": "Массив ID уроков для замещения",
            "example": [
              1,
              2,
              3
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "workTasks": {
            "type": "string",
            "description": "Рабочие задачи для передачи замещающему",
            "example": "Провести совещание, подготовить отчет"
          }
        },
        "required": [
          "type",
          "startDate",
          "endDate",
          "days"
        ]
      },
      "UpdateVacationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "vacation",
              "sick_leave",
              "maternity_leave",
              "unpaid_leave",
              "business_trip"
            ],
            "description": "Тип отпуска",
            "example": "vacation"
          },
          "startDate": {
            "type": "string",
            "description": "Дата начала отпуска",
            "example": "2024-06-15T00:00:00Z"
          },
          "endDate": {
            "type": "string",
            "description": "Дата окончания отпуска",
            "example": "2024-07-12T00:00:00Z"
          },
          "days": {
            "type": "number",
            "description": "Количество дней",
            "example": 28
          },
          "substituteId": {
            "type": "number",
            "description": "ID замещающего преподавателя",
            "example": 2
          },
          "comment": {
            "type": "string",
            "description": "Комментарий к заявке",
            "example": "Плановый отпуск"
          },
          "lectureTopics": {
            "type": "string",
            "description": "Темы лекций для замещающего преподавателя",
            "example": "Темы: 1. Алгебра многочленов, 2. Тригонометрия"
          },
          "lessonIds": {
            "description": "Массив ID уроков для замещения",
            "example": [
              1,
              2,
              3
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "workTasks": {
            "type": "string",
            "description": "Рабочие задачи для передачи замещающему",
            "example": "Провести совещание, подготовить отчет"
          }
        }
      },
      "UpdateVacationStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "rejected",
              "completed"
            ],
            "description": "Новый статус отпуска",
            "example": "approved"
          },
          "comment": {
            "type": "string",
            "description": "Комментарий к изменению статуса",
            "example": "Согласовано с руководителем отдела"
          },
          "notifyEmployee": {
            "type": "boolean",
            "description": "Уведомить сотрудника об изменении статуса",
            "example": true
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateReviewDto": {
        "type": "object",
        "properties": {}
      },
      "ReviewReactionDto": {
        "type": "object",
        "properties": {}
      },
      "CreateFeedbackTemplateDto": {
        "type": "object",
        "properties": {}
      },
      "CreateFeedbackResponseDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateFeedbackTemplateDto": {
        "type": "object",
        "properties": {}
      },
      "WarrantyDto": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "provider"
        ]
      },
      "MaintenanceScheduleDto": {
        "type": "object",
        "properties": {
          "lastMaintenance": {
            "type": "string"
          },
          "nextMaintenance": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          }
        },
        "required": [
          "lastMaintenance",
          "nextMaintenance",
          "provider"
        ]
      },
      "CreateInventoryItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "REPAIR",
              "WRITTEN_OFF",
              "LOST"
            ]
          },
          "purchaseDate": {
            "type": "string"
          },
          "lastInventory": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "currentValue": {
            "type": "number"
          },
          "responsible": {
            "type": "string"
          },
          "qrCode": {
            "type": "string"
          },
          "barcode": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "warranty": {
            "$ref": "#/components/schemas/WarrantyDto"
          },
          "maintenanceSchedule": {
            "$ref": "#/components/schemas/MaintenanceScheduleDto"
          }
        },
        "required": [
          "name",
          "category",
          "location",
          "status",
          "purchaseDate",
          "lastInventory",
          "cost",
          "currentValue",
          "responsible"
        ]
      },
      "UpdateInventoryItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "REPAIR",
              "WRITTEN_OFF",
              "LOST"
            ]
          },
          "purchaseDate": {
            "type": "string"
          },
          "lastInventory": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "currentValue": {
            "type": "number"
          },
          "responsible": {
            "type": "string"
          },
          "qrCode": {
            "type": "string"
          },
          "barcode": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "warranty": {
            "$ref": "#/components/schemas/WarrantyDto"
          },
          "maintenanceSchedule": {
            "$ref": "#/components/schemas/MaintenanceScheduleDto"
          }
        }
      },
      "CreateMovementDto": {
        "type": "object",
        "properties": {
          "fromLocation": {
            "type": "string"
          },
          "toLocation": {
            "type": "string"
          },
          "responsible": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "date": {
            "type": "string"
          }
        },
        "required": [
          "toLocation",
          "responsible",
          "reason"
        ]
      },
      "UpdateStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "REPAIR",
              "WRITTEN_OFF",
              "LOST"
            ]
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateMaintenanceDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "nextMaintenanceDate": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          }
        },
        "required": [
          "date",
          "provider"
        ]
      },
      "CreatePurchaseRequestItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "estimatedPrice": {
            "type": "number"
          },
          "specifications": {
            "type": "string"
          },
          "brand": {
            "type": "string"
          },
          "model": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "category",
          "quantity",
          "unit"
        ]
      },
      "CreatePurchaseRequestDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "requesterId": {
            "type": "number"
          },
          "departmentId": {
            "type": "number"
          },
          "totalAmount": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "default": "KZT"
          },
          "urgency": {
            "type": "string",
            "enum": [
              "LOW",
              "NORMAL",
              "HIGH",
              "URGENT"
            ],
            "default": "NORMAL"
          },
          "requiredDate": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePurchaseRequestItemDto"
            }
          }
        },
        "required": [
          "title",
          "requesterId",
          "totalAmount",
          "items"
        ]
      },
      "CreateSupplierDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "contactPerson": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "taxId": {
            "type": "string"
          },
          "bankDetails": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateQuoteItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "unitPrice": {
            "type": "number"
          },
          "totalPrice": {
            "type": "number"
          },
          "brand": {
            "type": "string"
          },
          "model": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "quantity",
          "unit",
          "unitPrice",
          "totalPrice"
        ]
      },
      "CreateSupplierQuoteDto": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "number"
          },
          "supplierId": {
            "type": "number"
          },
          "quoteNumber": {
            "type": "string"
          },
          "totalAmount": {
            "type": "number"
          },
          "currency": {
            "type": "string",
            "default": "KZT"
          },
          "deliveryDays": {
            "type": "number"
          },
          "validUntil": {
            "type": "string"
          },
          "paymentTerms": {
            "type": "string"
          },
          "deliveryTerms": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateQuoteItemDto"
            }
          }
        },
        "required": [
          "requestId",
          "supplierId",
          "totalAmount",
          "items"
        ]
      },
      "CreateTaskDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateTaskDto": {
        "type": "object",
        "properties": {}
      },
      "CreateChatDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название группового чата"
          },
          "isGroup": {
            "type": "boolean",
            "description": "Является ли групповым чатом"
          },
          "participantIds": {
            "description": "Список участников чата",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "name",
          "isGroup",
          "participantIds"
        ]
      },
      "CreateMessageDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Содержимое сообщения"
          },
          "receiverId": {
            "type": "number",
            "description": "ID получателя для личных сообщений"
          },
          "chatId": {
            "type": "number",
            "description": "ID группового чата"
          },
          "replyToId": {
            "type": "number",
            "description": "ID сообщения, на которое отвечаем"
          }
        },
        "required": [
          "content",
          "receiverId",
          "chatId",
          "replyToId"
        ]
      },
      "CreateEventDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Название события"
          },
          "description": {
            "type": "string",
            "description": "Описание события"
          },
          "startDate": {
            "type": "string",
            "description": "Дата и время начала"
          },
          "endDate": {
            "type": "string",
            "description": "Дата и время окончания"
          },
          "isAllDay": {
            "type": "boolean",
            "description": "Событие на весь день"
          },
          "location": {
            "type": "string",
            "description": "Местоположение события"
          },
          "participantIds": {
            "description": "Список участников",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "color": {
            "type": "string",
            "description": "Цвет события"
          },
          "isRecurring": {
            "type": "boolean",
            "description": "Является ли повторяющимся"
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Правило повторения (RRULE)"
          },
          "timezone": {
            "type": "string",
            "description": "Часовой пояс"
          }
        },
        "required": [
          "title",
          "description",
          "startDate",
          "endDate",
          "isAllDay",
          "location",
          "participantIds",
          "color",
          "isRecurring",
          "recurrenceRule",
          "timezone"
        ]
      },
      "UpdateEventDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Название события"
          },
          "description": {
            "type": "string",
            "description": "Описание события"
          },
          "startDate": {
            "type": "string",
            "description": "Дата и время начала"
          },
          "endDate": {
            "type": "string",
            "description": "Дата и время окончания"
          },
          "isAllDay": {
            "type": "boolean",
            "description": "Событие на весь день"
          },
          "location": {
            "type": "string",
            "description": "Местоположение события"
          },
          "participantIds": {
            "description": "Список участников",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "color": {
            "type": "string",
            "description": "Цвет события"
          },
          "isRecurring": {
            "type": "boolean",
            "description": "Является ли повторяющимся"
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Правило повторения (RRULE)"
          },
          "timezone": {
            "type": "string",
            "description": "Часовой пояс"
          }
        }
      },
      "UpdateSystemSettingsDto": {
        "type": "object",
        "properties": {}
      },
      "CreateSystemUserDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateSystemUserDto": {
        "type": "object",
        "properties": {}
      },
      "CreateRoleDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateRoleDto": {
        "type": "object",
        "properties": {}
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "ID пользователя-получателя"
          },
          "type": {
            "type": "string",
            "description": "Тип уведомления"
          },
          "message": {
            "type": "string",
            "description": "Текст уведомления"
          },
          "url": {
            "type": "string",
            "description": "Ссылка для перехода"
          },
          "createdBy": {
            "type": "number",
            "description": "ID создателя уведомления"
          },
          "read": {
            "type": "boolean",
            "description": "Прочитано ли уведомление"
          }
        },
        "required": [
          "userId",
          "type",
          "message"
        ]
      },
      "AddNotificationDto": {
        "type": "object",
        "properties": {
          "userIds": {
            "description": "ID пользователя или массив ID",
            "example": [
              1,
              2,
              3
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "type": {
            "type": "string",
            "description": "Тип уведомления"
          },
          "message": {
            "type": "string",
            "description": "Текст уведомления"
          },
          "url": {
            "type": "string",
            "description": "Ссылка для перехода"
          },
          "createdBy": {
            "type": "number",
            "description": "ID создателя уведомления"
          }
        },
        "required": [
          "userIds",
          "type",
          "message"
        ]
      },
      "UpdateNotificationDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "ID пользователя-получателя"
          },
          "type": {
            "type": "string",
            "description": "Тип уведомления"
          },
          "message": {
            "type": "string",
            "description": "Текст уведомления"
          },
          "url": {
            "type": "string",
            "description": "Ссылка для перехода"
          },
          "createdBy": {
            "type": "number",
            "description": "ID создателя уведомления"
          },
          "read": {
            "type": "boolean",
            "description": "Прочитано ли уведомление"
          }
        }
      },
      "CreateFileDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateFileDto": {
        "type": "object",
        "properties": {}
      },
      "CreateLessonResultDto": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "number",
            "description": "ID студента"
          },
          "lessonId": {
            "type": "number",
            "description": "ID урока"
          },
          "lessonScore": {
            "type": "number",
            "description": "Оценка за урок (1-5)",
            "minimum": 1,
            "maximum": 5,
            "nullable": true
          },
          "lessonScorecomment": {
            "type": "string",
            "description": "Комментарий к оценке за урок",
            "nullable": true
          },
          "homeworkScore": {
            "type": "number",
            "description": "Оценка за домашнее задание (1-5)",
            "minimum": 1,
            "maximum": 5,
            "nullable": true
          },
          "homeworkScoreComment": {
            "type": "string",
            "description": "Комментарий к оценке за домашнее задание",
            "nullable": true
          },
          "attendance": {
            "type": "boolean",
            "description": "Посещаемость (присутствовал/отсутствовал)",
            "nullable": true
          },
          "absentReason": {
            "type": "string",
            "description": "Причина отсутствия",
            "enum": [
              "SICK",
              "FAMILY",
              "OTHER"
            ],
            "nullable": true
          },
          "absentComment": {
            "type": "string",
            "description": "Комментарий к отсутствию",
            "nullable": true
          }
        },
        "required": [
          "studentId",
          "lessonId"
        ]
      },
      "UpdateLessonResultDto": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "number",
            "description": "ID студента"
          },
          "lessonId": {
            "type": "number",
            "description": "ID урока"
          },
          "lessonScore": {
            "type": "number",
            "description": "Оценка за урок (1-5)",
            "minimum": 1,
            "maximum": 5,
            "nullable": true
          },
          "lessonScorecomment": {
            "type": "string",
            "description": "Комментарий к оценке за урок",
            "nullable": true
          },
          "homeworkScore": {
            "type": "number",
            "description": "Оценка за домашнее задание (1-5)",
            "minimum": 1,
            "maximum": 5,
            "nullable": true
          },
          "homeworkScoreComment": {
            "type": "string",
            "description": "Комментарий к оценке за домашнее задание",
            "nullable": true
          },
          "attendance": {
            "type": "boolean",
            "description": "Посещаемость (присутствовал/отсутствовал)",
            "nullable": true
          },
          "absentReason": {
            "type": "string",
            "description": "Причина отсутствия",
            "enum": [
              "SICK",
              "FAMILY",
              "OTHER"
            ],
            "nullable": true
          },
          "absentComment": {
            "type": "string",
            "description": "Комментарий к отсутствию",
            "nullable": true
          }
        }
      },
      "GenerateLessonsDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}