// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  PARENT
  ADMIN
  FINANCIST
  HR
}

// ЭДО типы и статусы
enum DocumentType {
  STUDENT_CERTIFICATE // Справка об обучении
  ADMINISTRATIVE_ORDER // Административный приказ  
  FINANCIAL_CONTRACT // Финансовый договор
  ENROLLMENT_ORDER // Приказ о зачислении
  ACADEMIC_TRANSCRIPT // Академическая справка
}

enum DocumentStatus {
  DRAFT // Черновик
  IN_PROGRESS // На согласовании
  APPROVED // Согласован
  REJECTED // Отклонен
  COMPLETED // Завершен
}

enum ApprovalStatus {
  PENDING // Ожидает
  APPROVED // Согласован
  REJECTED // Отклонен
}

enum AbsentReason {
  SICK
  FAMILY
  OTHER
}

enum LessonType {
  REGULAR // Обычный урок
  CONTROL_WORK // Контрольная работа
  EXAM // Экзамен
  TEST // Тест
  PRACTICAL // Практическая работа
  LAB // Лабораторная работа
}

enum EmploymentType {
  STAFF
  PART_TIME
}

enum HomeworkSubmissionStatus {
  PENDING
  CHECKED
}

enum WorkloadType {
  REGULAR
  OVERTIME
  SICK
  VACATION
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  surname           String
  phone             String?
  middlename        String?
  avatar            String? // URL или путь к аватарке
  birthDate         DateTime? // Дата рождения
  role              UserRole            @default(STUDENT)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  student           Student?
  teacher           Teacher?
  hashedPassword    String
  parent            Parent?
  Notification      Notification[]
  FinancialReport   FinancialReport[]
  reviewReactions   ReviewReaction[]    @relation("UserReviewReactions")
  feedbackResponses FeedbackResponse[]  @relation("UserFeedbackResponses")
  feedbackStatus    UserFeedbackStatus? @relation("UserFeedbackStatus")

  // Chat relations
  createdChats     ChatRoom[]        @relation("CreatedChats")
  chatParticipants ChatParticipant[]
  sentMessages     ChatMessage[]     @relation("SentMessages")

  // Task relations
  assignedTasks Task[] @relation("AssignedTasks")
  createdTasks  Task[] @relation("CreatedTasks")

  // Calendar relations
  createdEvents     CalendarEvent[]    @relation("CreatedEvents")
  eventParticipants EventParticipant[]
  eventReminders    EventReminder[]

  // Activity monitoring relations
  sessions     UserSession[]
  activityLogs ActivityLog[]
  onlineStatus UserOnlineStatus?
  passwordResetTokens PasswordResetToken[]

  // EDO relations
  createdDocuments     Document[]         @relation("CreatedDocuments")
  responsibleDocuments Document[]         @relation("ResponsibleDocuments")
  documentApprovals    DocumentApproval[]
  documentComments     DocumentComment[]
  documentTemplates    DocumentTemplate[]

  // Student remarks relations
  teacherRemarks  StudentRemark[]  @relation("TeacherRemarks")
  teacherComments StudentComment[] @relation("TeacherComments")
  responsibleClassrooms Classroom[] @relation("ResponsibleClassrooms")
  classroomBookingsCreated ClassroomBooking[] @relation("ClassroomBookingsCreated")
  aiSuggestionsCreated AiSuggestion[] @relation("AiSuggestionAuthor")
  aiSuggestionsApplied AiSuggestion[] @relation("AiSuggestionAppliedBy")
}

model Student {
  id                 Int                  @id @default(autoincrement())
  userId             Int                  @unique
  classId            Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  user               User                 @relation(fields: [userId], references: [id])
  group              Group                @relation(fields: [groupId], references: [id])
  groupId            Int
  Parents            Parent[]
  lessonsResults     LessonResult[]
  HomeworkSubmission HomeworkSubmission[]
  quizAttempts       QuizAttempt[]
  EmotionalState     EmotionalState?
  Payment            Payment[]
  reviews            StudentReview[]
  repeatPurchases    RepeatPurchase[]
  documents          Document[]
  remarks            StudentRemark[]
  comments           StudentComment[]
  olympiadResults    OlympiadResult[]
  admissions         StudentAdmission[]
}

model LessonResult {
  id                   Int                 @id @default(autoincrement())
  Student              Student?            @relation(fields: [studentId], references: [id])
  studentId            Int
  Lesson               Lesson?             @relation(fields: [lessonId], references: [id])
  lessonId             Int
  Homework             HomeworkSubmission? @relation(fields: [homeworkId], references: [id])
  homeworkId           Int?                @unique
  lessonScore          Int?
  lessonScorecomment   String?
  homeworkScore        Int?
  homeworkScoreComment String?
  attendance           Boolean?
  absentReason         AbsentReason?
  absentComment        String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  deletedAt            DateTime?

  @@unique([studentId, lessonId])
}

model Teacher {
  id             Int               @id @default(autoincrement())
  userId         Int               @unique
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
  user           User              @relation(fields: [userId], references: [id])
  studyPlans     StudyPlan[]
  schedules      Schedule[]
  employmentType EmploymentType    @default(STAFF)
  workloads      TeacherWorkload[]
  vacations      Vacation[]
  substituteFor  Vacation[]        @relation("VacationSubstitute")
  salaries       Salary[]
  reviews        StudentReview[]   @relation("StudentReviewsTeacher")

  // Замещения в расписании
  substituteSchedules Schedule[] @relation("ScheduleSubstitute")

  // Система ставок и отработанных часов
  salaryRates TeacherSalaryRate[]
  workedHours TeacherWorkedHours[]

  // KPI связи
  achievements      TeacherAchievement[]
  olympiadResults   OlympiadResult[]
  studentAdmissions StudentAdmission[]

  // Фидбеки о преподавателе
  feedbacksAbout FeedbackResponse[]

  // Кураторские группы
  curatorGroups Group[]
}

model Parent {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  relation  String?
  students  Student[]
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  courseNumber Int             @default(1)
  students     Student[]
  studyPlans   StudyPlan[]
  schedules    Schedule[]
  reviews      StudentReview[] @relation("StudentReviewsGroup")

  // Классный руководитель (куратор) - опционально
  curatorTeacherId Int?
  curator          Teacher?      @relation(fields: [curatorTeacherId], references: [id])
}

model StudyPlan {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  teacherId         Int
  teacher           Teacher            @relation(fields: [teacherId], references: [id])
  group             Group[]
  lessons           Lesson[]
  schedules         Schedule[]
  scheduleTemplates ScheduleTemplate[]
  normativeWorkload Int? // нормативная нагрузка (часы в год)
  subjectWorkloads  SubjectWorkload[]
  curriculumPlan    CurriculumPlan?
}

model Lesson {
  id              Int              @id @default(autoincrement())
  name            String
  type            LessonType       @default(REGULAR)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  date            DateTime
  studyPlanId     Int
  description     String?          @db.Text
  studyPlan       StudyPlan        @relation(fields: [studyPlanId], references: [id])
  homework        Homework?        @relation(fields: [homeworkId], references: [id])
  homeworkId      Int?             @unique
  materials       Materials?       @relation(fields: [materialsId], references: [id])
  materialsId     Int?             @unique
  LessonResult    LessonResult[]
  vacationLessons VacationLesson[]
  schedules       Schedule[] // Связь с расписанием
}

model Homework {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String?              @db.Text
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  lesson              Lesson?
  deadline            DateTime             @default(now())
  additionalFiles     File[]
  studentsSubmissions HomeworkSubmission[]
  materials           Materials?           @relation(fields: [materialsId], references: [id])
  materialsId         Int?                 @unique
}

model Materials {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  lesson          Lesson?
  homework        Homework?
  lecture         String?   @db.Text
  videoUrl        String?
  presentationUrl String?
  additionalFiles File[]
  quiz            Quiz?     @relation(fields: [quizId], references: [id])
  quizId          Int?      @unique
  homeworkId      Int?
}

model File {
  id                 Int                 @id @default(autoincrement())
  name               String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  materialsId        Int?
  materials          Materials?          @relation(fields: [materialsId], references: [id])
  url                String
  type               String
  size               Int
  mime               String
  HomeworkSubmission HomeworkSubmission?
  Homework           Homework?           @relation(fields: [homeworkId], references: [id])
  homeworkId         Int?
  VacationDocument   VacationDocument[]
  DocumentFile       DocumentFile[]
}

model Quiz {
  id        Int           @id @default(autoincrement())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  duration  Int? // in minutes
  maxScore  Int?
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean       @default(false)
  materials Materials?
  questions Question[]
  attempts  QuizAttempt[]
}

model Question {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  quizId         Int
  quiz           Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  type           AnswerType
  answers        Answer[]
  studentAnswers StudentAnswer[]
}

enum AnswerType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TEXT
}

enum QuizAttemptStatus {
  IN_PROGRESS
  COMPLETED
  REVIEWED
}

model Answer {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  questionId     Int
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  isCorrect      Boolean
  studentAnswers StudentAnswer[]
}

model HomeworkSubmission {
  id           Int                      @id @default(autoincrement())
  student      Student                  @relation(fields: [studentId], references: [id])
  studentId    Int
  homework     Homework                 @relation(fields: [homeworkId], references: [id])
  homeworkId   Int
  fileUrl      File                     @relation(fields: [fileId], references: [id])
  fileId       Int                      @unique
  comment      String?
  status       HomeworkSubmissionStatus @default(PENDING)
  submittedAt  DateTime                 @default(now())
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  deletedAt    DateTime?
  LessonResult LessonResult?
}

model QuizAttempt {
  id             Int               @id @default(autoincrement())
  student        Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      Int
  quiz           Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId         Int
  startTime      DateTime          @default(now())
  endTime        DateTime?
  score          Int?
  status         QuizAttemptStatus @default(IN_PROGRESS)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
  studentAnswers StudentAnswer[]
}

model StudentAnswer {
  id            Int         @id @default(autoincrement())
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  quizAttemptId Int
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    Int
  answer        Answer?     @relation(fields: [answerId], references: [id], onDelete: SetNull)
  answerId      Int?
  textAnswer    String?
  isCorrect     Boolean?
  answeredAt    DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([quizAttemptId, questionId])
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  type      String
  message   String
  read      Boolean   @default(false)
  createdBy Int?
  updatedBy Int?
  url       String?
}

model Classroom {
  id            Int               @id @default(autoincrement())
  name          String
  building      String
  floor         Int
  capacity      Int
  type          String // LECTURE, PRACTICE, COMPUTER, LABORATORY, OTHER
  equipment     String[] // Оборудование
  description   String?            @db.Text
  responsibleId Int?
  responsible   User?              @relation("ResponsibleClassrooms", fields: [responsibleId], references: [id])
  fileIds       Int[]              @default([])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
  schedules     Schedule[]
  bookings      ClassroomBooking[]
}

enum ClassroomBookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model ClassroomBooking {
  id                String     @id @default(uuid())
  classroomId       Int
  classroom         Classroom  @relation(fields: [classroomId], references: [id])
  date              DateTime
  startTime         String
  endTime           String
  purpose           String
  responsiblePerson String
  contactInfo       String
  description       String?
  status            ClassroomBookingStatus @default(PENDING)
  createdById       Int
  createdBy         User       @relation("ClassroomBookingsCreated", fields: [createdById], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  deletedAt         DateTime?

  @@index([classroomId, date])
}

enum ScheduleStatus {
  SCHEDULED
  CANCELLED
  RESCHEDULED
  COMPLETED
  POSTPONED
  MOVED
}

enum ScheduleType {
  REGULAR // Обычное занятие
  MAKEUP // Отработка
  SUBSTITUTE // Замещение
  EXTRA // Дополнительное занятие
}

enum ConflictType {
  TEACHER_BUSY
  CLASSROOM_BUSY
  STUDENT_GROUP_BUSY
  TIME_OVERLAP
  VACATION_CONFLICT
}

model Schedule {
  id          String     @id @default(uuid())
  studyPlanId Int
  studyPlan   StudyPlan  @relation(fields: [studyPlanId], references: [id])
  groupId     Int
  group       Group      @relation(fields: [groupId], references: [id])
  teacherId   Int
  teacher     Teacher    @relation(fields: [teacherId], references: [id])
  classroomId Int?
  classroom   Classroom? @relation(fields: [classroomId], references: [id])

  // Связь с конкретным уроком
  lessonId Int?
  lesson   Lesson? @relation(fields: [lessonId], references: [id])

  // Время проведения
  dayOfWeek Int // 1-7: понедельник-воскресенье
  startTime String // HH:MM
  endTime   String // HH:MM
  date      DateTime? // Конкретная дата (если привязан к уроку)
  // Диапазон повторения (для weekly/biweekly)
  startDate DateTime? // Дата начала периода повторения
  endDate   DateTime? // Дата окончания периода повторения
  periodPreset String? // Пресет периода (quarter, half_year, year)

  // Тип и статус расписания
  type   ScheduleType   @default(REGULAR)
  status ScheduleStatus @default(SCHEDULED)

  // Управление переносами и отменами
  originalDate  DateTime? // Первоначальная дата (для переносов)
  originalTime  String? // Первоначальное время (для переносов)
  rescheduledTo String? // ID нового расписания
  cancelReason  String? // Причина отмены/переноса
  moveReason    String? // Причина переноса

  // Замещения
  substituteId     Int?
  substitute       Teacher? @relation("ScheduleSubstitute", fields: [substituteId], references: [id])
  substituteReason String? // Причина замещения

  // AI-оптимизация
  isAiGenerated Boolean @default(false)
  aiConfidence  Float? // Уверенность AI в расписании (0-1)
  aiSuggestions Json? // Предложения AI для улучшения

  // Регулярность
  repeat String? // weekly, biweekly, once

  // Массовые операции
  batchId    String? // ID пакетной операции
  isTemplate Boolean @default(false) // Является ли шаблоном

  // Исключения и особенности
  excludedDates DateTime[] // Даты, когда занятие не проводится
  notes         String? // Заметки к расписанию

  // Автоматические поля
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Обратные связи
  rescheduledFrom  Schedule[]         @relation("ScheduleReschedule")
  originalSchedule Schedule?          @relation("ScheduleReschedule", fields: [rescheduledTo], references: [id])
  conflicts        ScheduleConflict[]

  @@index([date, teacherId])
  @@index([date, classroomId])
  @@index([date, groupId])
  @@index([studyPlanId, date])
}

// Модель для отслеживания конфликтов в расписании
model ScheduleConflict {
  id          String       @id @default(uuid())
  scheduleId  String
  schedule    Schedule     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  type        ConflictType
  description String // Описание конфликта
  severity    Int          @default(1) // 1-низкая, 2-средняя, 3-высокая
  isResolved  Boolean      @default(false)
  resolvedAt  DateTime?
  resolvedBy  String? // Кто разрешил конфликт
  resolution  String? // Как был разрешен конфликт
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Модель для массовых операций с расписанием
model ScheduleBatch {
  id             String    @id @default(uuid())
  operation      String // CREATE, UPDATE, DELETE, MOVE, CANCEL
  description    String? // Описание операции
  totalItems     Int       @default(0)
  processedItems Int       @default(0)
  failedItems    Int       @default(0)
  status         String    @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  errors         Json? // Ошибки при обработке
  createdBy      Int? // Кто инициировал операцию
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Шаблоны расписания для автогенерации
model ScheduleTemplate {
  id          String     @id @default(uuid())
  name        String
  description String?
  studyPlanId Int?
  studyPlan   StudyPlan? @relation(fields: [studyPlanId], references: [id])

  // Настройки времени
  startTime  String // HH:MM
  endTime    String // HH:MM
  daysOfWeek Int[] // Дни недели [1,3,5]
  duration   Int // Продолжительность в минутах

  // Настройки периода
  startDate    DateTime
  endDate      DateTime
  excludeDates DateTime[] // Исключенные даты (каникулы, праздники)

  // Предпочтения
  preferredClassrooms String[] // Предпочитаемые аудитории
  requirements        Json? // Особые требования

  // Метаданные
  isActive  Boolean   @default(true)
  createdBy Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model EmotionalState {
  id                 Int      @id @default(autoincrement())
  student            Student  @relation(fields: [studentId], references: [id])
  studentId          Int      @unique
  mood               Int // 0-100
  moodDesc           String
  moodTrend          String // up, down, neutral
  concentration      Int // 0-100
  concentrationDesc  String
  concentrationTrend String
  socialization      Int // 0-100
  socializationDesc  String
  socializationTrend String
  motivation         Int // 0-100
  motivationDesc     String
  motivationTrend    String
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())
}

// --- Vacation management ---

enum VacationType {
  vacation
  sick_leave
  maternity_leave
  unpaid_leave
  business_trip
}

enum VacationStatus {
  pending
  approved
  rejected
  completed
}

model Vacation {
  id           Int                @id @default(autoincrement())
  teacher      Teacher            @relation(fields: [teacherId], references: [id])
  teacherId    Int
  type         VacationType
  startDate    DateTime
  endDate      DateTime
  days         Int
  status       VacationStatus     @default(pending)
  substitute   Teacher?           @relation("VacationSubstitute", fields: [substituteId], references: [id])
  substituteId Int?
  comment      String?
  workTasks    String? // Задачи для передачи замещающему
  documents    VacationDocument[]
  lessons      VacationLesson[] // Связь с уроками для замещения
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
}

model VacationLesson {
  id         Int      @id @default(autoincrement())
  vacation   Vacation @relation(fields: [vacationId], references: [id])
  vacationId Int
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  lessonId   Int
  notes      String? // Заметки для замещающего о конкретном уроке
  createdAt  DateTime @default(now())

  @@unique([vacationId, lessonId])
}

model VacationDocument {
  id         Int      @id @default(autoincrement())
  vacation   Vacation @relation(fields: [vacationId], references: [id])
  vacationId Int
  file       File     @relation(fields: [fileId], references: [id])
  fileId     Int
  uploadedAt DateTime @default(now())
}

model Payment {
  id              Int               @id @default(autoincrement())
  studentId       Int
  student         Student           @relation(fields: [studentId], references: [id])
  serviceType     String // tuition, extra, meals, transportation
  serviceName     String
  amount          Int
  currency        String
  dueDate         DateTime
  status          String // paid, unpaid, partial, overdue
  paymentDate     DateTime?
  paidAmount      Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  PaymentReminder PaymentReminder[]
  firstPurchases  RepeatPurchase[]  @relation("FirstPurchase")
  secondPurchases RepeatPurchase[]  @relation("SecondPurchase")
}

enum BudgetItemType {
  INCOME
  EXPENSE
}

enum BudgetItemStatus {
  PENDING
  ACTIVE
  CLOSED
}

model BudgetItem {
  id            Int              @id @default(autoincrement())
  name          String
  type          BudgetItemType
  category      String
  plannedAmount Int
  actualAmount  Int              @default(0)
  currency      String           @default("KZT")
  period        String // "2024 Q3"
  responsible   String?
  status        BudgetItemStatus @default(ACTIVE)
  description   String?          @db.Text
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?
}

model PaymentReminder {
  id        Int       @id @default(autoincrement())
  paymentId Int
  payment   Payment   @relation(fields: [paymentId], references: [id])
  method    String // email, sms, push
  message   String?   @db.Text
  sentAt    DateTime  @default(now())
  status    String    @default("sent") // sent, failed
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model FinancialReport {
  id          Int       @id @default(autoincrement())
  name        String
  type        String // summary, details, forecast
  period      String
  data        String    @db.Text // JSON data
  fileUrl     String?
  generatedBy Int
  user        User      @relation(fields: [generatedBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

// --- Workload management ---

model TeacherWorkload {
  id            Int       @id @default(autoincrement())
  teacherId     Int
  teacher       Teacher   @relation(fields: [teacherId], references: [id])
  academicYear  String
  standardHours Int       @default(0)
  actualHours   Int       @default(0)
  overtimeHours Int       @default(0)
  vacationDays  Int       @default(0)
  sickLeaveDays Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  monthlyHours         MonthlyWorkload[]
  quarterlyHours       QuarterlyWorkload[]
  dailyHours           DailyWorkload[]
  subjectWorkloads     SubjectWorkload[]
  additionalActivities AdditionalActivity[]

  @@unique([teacherId, academicYear])
}

model MonthlyWorkload {
  id                Int             @id @default(autoincrement())
  teacherWorkloadId Int
  teacherWorkload   TeacherWorkload @relation(fields: [teacherWorkloadId], references: [id], onDelete: Cascade)
  month             Int
  year              Int
  standardHours     Int             @default(0)
  actualHours       Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([teacherWorkloadId, month, year])
}

model QuarterlyWorkload {
  id                Int             @id @default(autoincrement())
  teacherWorkloadId Int
  teacherWorkload   TeacherWorkload @relation(fields: [teacherWorkloadId], references: [id], onDelete: Cascade)
  quarter           Int
  year              Int
  standardHours     Int             @default(0)
  actualHours       Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([teacherWorkloadId, quarter, year])
}

model DailyWorkload {
  id                Int             @id @default(autoincrement())
  teacherWorkloadId Int
  teacherWorkload   TeacherWorkload @relation(fields: [teacherWorkloadId], references: [id], onDelete: Cascade)
  date              DateTime
  hours             Int
  type              WorkloadType    @default(REGULAR)
  comment           String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([teacherWorkloadId, date])
}

model SubjectWorkload {
  id                Int             @id @default(autoincrement())
  teacherWorkloadId Int
  teacherWorkload   TeacherWorkload @relation(fields: [teacherWorkloadId], references: [id], onDelete: Cascade)
  subjectName       String
  hours             Int
  studyPlanId       Int?
  studyPlan         StudyPlan?      @relation(fields: [studyPlanId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model AdditionalActivity {
  id                Int             @id @default(autoincrement())
  teacherWorkloadId Int
  teacherWorkload   TeacherWorkload @relation(fields: [teacherWorkloadId], references: [id], onDelete: Cascade)
  name              String
  hours             Int
  description       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// --- Salary management ---

enum SalaryStatus {
  DRAFT
  APPROVED
  PAID
  CANCELLED
}

enum BonusType {
  PERFORMANCE
  ACHIEVEMENT
  OVERTIME
  HOLIDAY
  OTHER
}

enum AllowanceType {
  EXPERIENCE
  CATEGORY
  CONDITIONS
  QUALIFICATION
  OTHER
}

model Salary {
  id          Int               @id @default(autoincrement())
  teacherId   Int
  teacher     Teacher           @relation(fields: [teacherId], references: [id])
  hourlyRate  Float // Часовая ставка в тенге
  hoursWorked Float // Отработанные часы
  baseSalary  Int // Базовая зарплата в тенге (hourlyRate * hoursWorked)
  allowances  SalaryAllowance[]
  bonuses     SalaryBonus[]
  deductions  SalaryDeduction[]
  totalGross  Int // Общая сумма до вычетов
  totalNet    Int // Сумма к выплате
  month       Int // 1-12
  year        Int
  status      SalaryStatus      @default(DRAFT)
  approvedBy  Int?
  approvedAt  DateTime?
  paidAt      DateTime?
  comment     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?

  @@unique([teacherId, month, year])
}

model SalaryBonus {
  id           Int       @id @default(autoincrement())
  salaryId     Int
  salary       Salary    @relation(fields: [salaryId], references: [id], onDelete: Cascade)
  type         BonusType
  name         String
  amount       Float
  isPercentage Boolean   @default(false)
  comment      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model SalaryAllowance {
  id           Int           @id @default(autoincrement())
  salaryId     Int
  salary       Salary        @relation(fields: [salaryId], references: [id], onDelete: Cascade)
  type         AllowanceType
  name         String
  amount       Float
  isPercentage Boolean       @default(false)
  comment      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model SalaryDeduction {
  id           Int      @id @default(autoincrement())
  salaryId     Int
  salary       Salary   @relation(fields: [salaryId], references: [id], onDelete: Cascade)
  name         String // Налоги, соцвзносы, аванс и т.д.
  amount       Float
  isPercentage Boolean  @default(false)
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SalaryTemplate {
  id             Int       @id @default(autoincrement())
  name           String
  baseSalary     Int
  bonusRules     String    @db.Text // JSON с правилами начисления бонусов
  deductionRules String    @db.Text // JSON с правилами удержаний
  description    String?   @db.Text
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
}

// --- Customer Loyalty Analysis ---

model StudentReview {
  id          Int       @id @default(autoincrement())
  studentId   Int
  student     Student   @relation(fields: [studentId], references: [id])
  teacherId   Int
  teacher     Teacher   @relation("StudentReviewsTeacher", fields: [teacherId], references: [id])
  groupId     Int
  group       Group     @relation("StudentReviewsGroup", fields: [groupId], references: [id])
  rating      Int // 1-5
  comment     String    @db.Text
  likes       Int       @default(0)
  helpful     Int       @default(0)
  isModerated Boolean   @default(false)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  reactions ReviewReaction[]
}

model ReviewReaction {
  id        Int           @id @default(autoincrement())
  reviewId  Int
  review    StudentReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId    Int
  user      User          @relation("UserReviewReactions", fields: [userId], references: [id])
  type      String // "like", "helpful"
  createdAt DateTime      @default(now())

  @@unique([reviewId, userId, type])
}

model RepeatPurchase {
  id               Int      @id @default(autoincrement())
  studentId        Int
  student          Student  @relation(fields: [studentId], references: [id])
  firstPurchaseId  Int
  firstPurchase    Payment  @relation("FirstPurchase", fields: [firstPurchaseId], references: [id])
  secondPurchaseId Int
  secondPurchase   Payment  @relation("SecondPurchase", fields: [secondPurchaseId], references: [id])
  daysBetween      Int // Количество дней между покупками
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([studentId, firstPurchaseId, secondPurchaseId])
}

// --- Mandatory Feedback System ---

enum FeedbackFrequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMESTER
  YEARLY
}

enum QuestionType {
  RATING_1_5
  RATING_1_10
  TEXT
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  EMOTIONAL_SCALE
  YES_NO
}

enum KpiMetricType {
  STUDENT_RETENTION // Удержание студентов
  TEACHER_SATISFACTION // Удовлетворенность преподавателем
  TEACHING_QUALITY // Качество преподавания
  LESSON_EFFECTIVENESS // Эффективность уроков
  RECOMMENDATION // Готовность рекомендовать
  OVERALL_EXPERIENCE // Общий опыт обучения
}

model FeedbackTemplate {
  id          Int               @id @default(autoincrement())
  name        String            @unique // "student_satisfaction", "teacher_workload"
  role        UserRole // STUDENT, TEACHER, HR, etc.
  title       String // "Оценка качества обучения"
  description String?
  questions   Json // Массив вопросов с типами и KPI-метками
  isActive    Boolean           @default(true)
  frequency   FeedbackFrequency @default(MONTHLY)
  priority    Int               @default(0) // Порядок показа

  // KPI интеграция
  hasKpiQuestions Boolean  @default(false) // Есть ли вопросы для KPI
  kpiMetrics      String[] // Массив типов KPI метрик в шаблоне

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  responses FeedbackResponse[]
}

model FeedbackResponse {
  id          Int              @id @default(autoincrement())
  userId      Int
  user        User             @relation("UserFeedbackResponses", fields: [userId], references: [id])
  templateId  Int
  template    FeedbackTemplate @relation(fields: [templateId], references: [id])
  answers     Json // Ответы на вопросы
  isCompleted Boolean          @default(false)
  submittedAt DateTime?
  period      String? // "2025-01", "2025-Q1" для отслеживания периода

  // Связь с конкретным преподавателем (для фидбеков о преподавателях)
  aboutTeacherId Int?
  aboutTeacher   Teacher? @relation(fields: [aboutTeacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, templateId, period, aboutTeacherId])
}

model UserFeedbackStatus {
  id                    Int       @id @default(autoincrement())
  userId                Int       @unique
  user                  User      @relation("UserFeedbackStatus", fields: [userId], references: [id])
  hasCompletedMandatory Boolean   @default(false)
  lastCompletedAt       DateTime?
  currentPeriod         String? // "2025-01"
  nextDueDate           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

// --- Inventory Management ---

enum InventoryStatus {
  ACTIVE
  REPAIR
  WRITTEN_OFF
  LOST
}

model InventoryItem {
  id                  Int             @id @default(autoincrement())
  name                String
  category            String
  location            String
  status              InventoryStatus @default(ACTIVE)
  purchaseDate        DateTime
  lastInventory       DateTime
  cost                Int // стоимость в тенге
  currentValue        Int // текущая стоимость в тенге
  responsible         String
  qrCode              String?         @unique
  barcode             String?         @unique
  serialNumber        String?         @unique
  manufacturer        String?
  model               String?
  photos              String[] // массив URL фотографий
  warranty            Json? // {start, end, provider}
  maintenanceSchedule Json? // {lastMaintenance, nextMaintenance, provider}
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?

  movements          InventoryMovement[]
  maintenanceRecords InventoryMaintenance[]
}

model InventoryMovement {
  id           Int           @id @default(autoincrement())
  inventoryId  Int
  inventory    InventoryItem @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  fromLocation String
  toLocation   String
  responsible  String
  reason       String
  date         DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model InventoryMaintenance {
  id                  Int           @id @default(autoincrement())
  inventoryId         Int
  inventory           InventoryItem @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  date                DateTime
  provider            String
  description         String        @db.Text
  nextMaintenanceDate DateTime?
  cost                Int? // стоимость обслуживания в тенге
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

// --- Supply Management ---

enum PurchaseRequestStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  ORDERED
  RECEIVED
  CANCELLED
}

enum SupplierStatus {
  ACTIVE
  SUSPENDED
  BLACKLISTED
}

model PurchaseRequest {
  id              Int                   @id @default(autoincrement())
  requestNumber   String                @unique
  title           String
  description     String?               @db.Text
  requesterId     Int
  departmentId    Int?
  totalAmount     Int // общая сумма в тенге
  currency        String                @default("KZT")
  urgency         String                @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  requiredDate    DateTime?
  status          PurchaseRequestStatus @default(DRAFT)
  approvedBy      Int?
  approvedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  deletedAt       DateTime?

  items  PurchaseRequestItem[]
  quotes SupplierQuote[]
  orders PurchaseOrder[]
}

model PurchaseRequestItem {
  id             Int             @id @default(autoincrement())
  requestId      Int
  request        PurchaseRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  name           String
  description    String?         @db.Text
  category       String
  quantity       Int
  unit           String // шт, кг, м, л и т.д.
  estimatedPrice Int? // ориентировочная цена за единицу
  specifications String?         @db.Text
  brand          String?
  model          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Supplier {
  id            Int            @id @default(autoincrement())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?        @db.Text
  taxId         String? // ИИН/БИН
  bankDetails   String?        @db.Text
  website       String?
  rating        Float? // рейтинг поставщика 1-5
  status        SupplierStatus @default(ACTIVE)
  notes         String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?

  quotes     SupplierQuote[]
  orders     PurchaseOrder[]
  deliveries Delivery[]
}

model SupplierQuote {
  id            Int             @id @default(autoincrement())
  requestId     Int
  request       PurchaseRequest @relation(fields: [requestId], references: [id])
  supplierId    Int
  supplier      Supplier        @relation(fields: [supplierId], references: [id])
  quoteNumber   String?
  totalAmount   Int // общая сумма предложения
  currency      String          @default("KZT")
  deliveryDays  Int? // срок поставки в днях
  validUntil    DateTime?
  paymentTerms  String? // условия оплаты
  deliveryTerms String? // условия поставки
  notes         String?         @db.Text
  isSelected    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  items QuoteItem[]
}

model QuoteItem {
  id          Int           @id @default(autoincrement())
  quoteId     Int
  quote       SupplierQuote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  name        String
  description String?       @db.Text
  quantity    Int
  unit        String
  unitPrice   Int // цена за единицу
  totalPrice  Int // общая цена позиции
  brand       String?
  model       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model PurchaseOrder {
  id              Int              @id @default(autoincrement())
  orderNumber     String           @unique
  requestId       Int?
  request         PurchaseRequest? @relation(fields: [requestId], references: [id])
  supplierId      Int
  supplier        Supplier         @relation(fields: [supplierId], references: [id])
  totalAmount     Int
  currency        String           @default("KZT")
  orderDate       DateTime         @default(now())
  expectedDate    DateTime?
  deliveryAddress String?          @db.Text
  paymentTerms    String?
  status          String           @default("CONFIRMED") // CONFIRMED, SHIPPED, DELIVERED, CANCELLED
  notes           String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?

  items      OrderItem[]
  deliveries Delivery[]
}

model OrderItem {
  id          Int           @id @default(autoincrement())
  orderId     Int
  order       PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  name        String
  description String?       @db.Text
  quantity    Int
  unit        String
  unitPrice   Int
  totalPrice  Int
  delivered   Int           @default(0) // количество поставленного
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Delivery {
  id               Int           @id @default(autoincrement())
  deliveryNumber   String        @unique
  orderId          Int
  order            PurchaseOrder @relation(fields: [orderId], references: [id])
  supplierId       Int
  supplier         Supplier      @relation(fields: [supplierId], references: [id])
  deliveryDate     DateTime
  receivedDate     DateTime?
  receivedBy       String? // кто принял поставку
  status           String        @default("IN_TRANSIT") // IN_TRANSIT, DELIVERED, RETURNED
  trackingNumber   String?
  notes            String?       @db.Text
  documentsChecked Boolean       @default(false)
  qualityChecked   Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  items DeliveryItem[]
}

model DeliveryItem {
  id                Int      @id @default(autoincrement())
  deliveryId        Int
  delivery          Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  name              String
  orderedQuantity   Int
  deliveredQuantity Int
  unit              String
  condition         String   @default("GOOD") // GOOD, DAMAGED, MISSING
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// --- Chat System ---

model ChatRoom {
  id           Int               @id @default(autoincrement())
  name         String? // Название группового чата
  isGroup      Boolean           @default(false)
  createdBy    Int
  creator      User              @relation("CreatedChats", fields: [createdBy], references: [id])
  participants ChatParticipant[]
  messages     ChatMessage[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deletedAt    DateTime?
}

model ChatParticipant {
  id       Int       @id @default(autoincrement())
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
  chatId   Int
  chat     ChatRoom  @relation(fields: [chatId], references: [id])
  joinedAt DateTime  @default(now())
  isActive Boolean   @default(true)
  lastRead DateTime?

  @@unique([userId, chatId])
}

model ChatMessage {
  id        Int           @id @default(autoincrement())
  content   String        @db.Text
  senderId  Int
  sender    User          @relation("SentMessages", fields: [senderId], references: [id])
  chatId    Int
  chat      ChatRoom      @relation(fields: [chatId], references: [id])
  isRead    Boolean       @default(false)
  isEdited  Boolean       @default(false)
  replyToId Int?
  replyTo   ChatMessage?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies   ChatMessage[] @relation("MessageReplies")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
}

// --- Task Management ---

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String?       @db.Text
  status      TaskStatus    @default(PENDING)
  priority    TaskPriority  @default(MEDIUM)
  assigneeId  Int?
  assignee    User?         @relation("AssignedTasks", fields: [assigneeId], references: [id])
  createdById Int
  createdBy   User          @relation("CreatedTasks", fields: [createdById], references: [id])
  dueDate     DateTime?
  completedAt DateTime?
  categoryId  Int?
  category    TaskCategory? @relation(fields: [categoryId], references: [id])
  tags        String[] // массив тегов
  attachments String[] // массив URL файлов
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
}

model TaskCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  color       String   @default("#3B82F6")
  description String?
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --- Calendar System ---

enum EventStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}

model CalendarEvent {
  id             Int                @id @default(autoincrement())
  title          String
  description    String?            @db.Text
  startDate      DateTime
  endDate        DateTime
  isAllDay       Boolean            @default(false)
  location       String?
  createdById    Int
  createdBy      User               @relation("CreatedEvents", fields: [createdById], references: [id])
  participants   EventParticipant[]
  reminders      EventReminder[]
  color          String             @default("#3B82F6")
  isRecurring    Boolean            @default(false)
  recurrenceRule String? // RRULE для повторяющихся событий
  timezone       String             @default("Asia/Almaty")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  deletedAt      DateTime?
}

model EventParticipant {
  id        Int           @id @default(autoincrement())
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  eventId   Int
  event     CalendarEvent @relation(fields: [eventId], references: [id])
  status    EventStatus   @default(PENDING)
  comment   String? // Комментарий участника
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId, eventId])
}

model EventReminder {
  id        Int           @id @default(autoincrement())
  eventId   Int
  event     CalendarEvent @relation(fields: [eventId], references: [id])
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  minutes   Int // Минут до события
  sent      Boolean       @default(false)
  method    String        @default("email") // email, sms, push
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([eventId, userId, minutes])
}

// --- Activity Monitoring System ---

enum ActivityType {
  LOGIN
  LOGOUT
  PAGE_VIEW
  CREATE
  UPDATE
  DELETE
  FILE_UPLOAD
  FILE_DOWNLOAD
  CHAT_MESSAGE
  API_REQUEST
  SEARCH
  EXPORT
  IMPORT
}

enum SessionStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}

model UserSession {
  id             String        @id @default(uuid())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  sessionToken   String        @unique
  ipAddress      String?
  userAgent      String?       @db.Text
  device         String? // mobile, desktop, tablet
  browser        String?
  os             String?
  location       String? // город/страна на основе IP
  status         SessionStatus @default(ACTIVE)
  loginAt        DateTime      @default(now())
  lastActivityAt DateTime      @default(now())
  logoutAt       DateTime?
  expiresAt      DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Связь с логами активности
  activityLogs ActivityLog[]

  @@index([userId, status])
  @@index([sessionToken])
  @@index([lastActivityAt])
}

model UserOnlineStatus {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  isOnline     Boolean  @default(false)
  lastSeen     DateTime @default(now())
  currentPage  String? // текущая страница
  sessionCount Int      @default(0) // количество активных сессий
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([isOnline])
  @@index([lastSeen])
}

model ActivityLog {
  id        String       @id @default(uuid())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  sessionId String?
  session   UserSession? @relation(fields: [sessionId], references: [id])

  // Тип и детали активности
  type        ActivityType
  action      String // конкретное действие
  description String? // описание действия

  // HTTP данные
  method     String? // GET, POST, PUT, DELETE
  url        String? // URL запроса
  route      String? // роут в приложении
  statusCode Int? // HTTP статус код

  // Данные запроса/ответа
  requestData  Json? // параметры запроса (безопасные)
  responseData Json? // данные ответа (безопасные)

  // Метаданные
  ipAddress String?
  userAgent String? @db.Text
  referer   String? // откуда пришел пользователь
  duration  Int? // время выполнения в мс

  // Контекст
  entityType String? // тип сущности (User, Student, etc.)
  entityId   String? // ID сущности

  // Результат
  success      Boolean @default(true)
  errorMessage String? @db.Text
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([sessionId])
  @@index([createdAt])
  @@index([userId, type])
}

// --- Password Recovery ---

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?  @db.Text

  @@index([userId])
  @@index([expiresAt])
}

// Статистика активности по дням
model DailyActivityStats {
  id              Int      @id @default(autoincrement())
  date            DateTime @unique // дата (только дата, без времени)
  totalUsers      Int      @default(0) // всего пользователей
  activeUsers     Int      @default(0) // активных пользователей
  newUsers        Int      @default(0) // новых пользователей
  totalSessions   Int      @default(0) // всего сессий
  totalPageViews  Int      @default(0) // всего просмотров страниц
  totalActions    Int      @default(0) // всего действий
  avgSessionTime  Int? // средняя длительность сессии в минутах
  peakOnlineUsers Int      @default(0) // пик одновременных пользователей
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([date])
}

// Настройки мониторинга
model ActivityMonitoringSettings {
  id                    Int      @id @default(autoincrement())
  logPageViews          Boolean  @default(true)
  logApiRequests        Boolean  @default(true)
  logFileOperations     Boolean  @default(true)
  logChatMessages       Boolean  @default(false) // может быть чувствительно
  retentionDays         Int      @default(180) // 6 месяцев
  sessionTimeoutMinutes Int      @default(60)
  batchLoggingEnabled   Boolean  @default(true)
  batchSize             Int      @default(100)
  enableRealTimeUpdates Boolean  @default(true)
  maskSensitiveData     Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// --- Student Remarks ---

enum RemarkType {
  ACADEMIC // Академические замечания
  BEHAVIOR // Поведенческие замечания
  ATTENDANCE // Замечания по посещаемости
  GENERAL // Общие замечания
}

model StudentRemark {
  id        Int        @id @default(autoincrement())
  studentId Int
  student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacherId Int
  teacher   User       @relation("TeacherRemarks", fields: [teacherId], references: [id])
  type      RemarkType @default(GENERAL)
  title     String
  content   String     @db.Text
  isPrivate Boolean    @default(true) // Только для преподавателей и админов
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  @@index([studentId])
  @@index([teacherId])
  @@index([createdAt])
}

// --- Student Comments ---

enum CommentType {
  ACADEMIC
  GENERAL
}

model StudentComment {
  id        Int         @id @default(autoincrement())
  studentId Int
  student   Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacherId Int
  teacher   User        @relation("TeacherComments", fields: [teacherId], references: [id])
  title     String
  content   String      @db.Text
  type      CommentType @default(GENERAL)
  isPrivate Boolean     @default(true) // Только для администрации
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  @@index([studentId])
  @@index([teacherId])
  @@index([createdAt])
}

// --- ЭДО (Электронный документооборот) ---

// Основная модель документа
model Document {
  id      String         @id @default(uuid())
  title   String
  number  String?        @unique
  type    DocumentType
  status  DocumentStatus @default(DRAFT)
  content String?        @db.Text

  // Создатель и ответственный
  createdById   Int
  createdBy     User  @relation("CreatedDocuments", fields: [createdById], references: [id])
  responsibleId Int?
  responsible   User? @relation("ResponsibleDocuments", fields: [responsibleId], references: [id])

  // Связи с сущностями
  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])

  // Файлы и согласования
  files     DocumentFile[]
  approvals DocumentApproval[]
  comments  DocumentComment[]

  // Сроки
  deadline    DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Согласования
model DocumentApproval {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  approverId Int
  approver   User     @relation(fields: [approverId], references: [id])

  status      ApprovalStatus @default(PENDING)
  comment     String?
  order       Int // Порядок согласования
  deadline    DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Файлы документов
model DocumentFile {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  fileId     Int
  file       File     @relation(fields: [fileId], references: [id])

  createdAt DateTime @default(now())
}

// Комментарии
model DocumentComment {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  content    String   @db.Text

  createdAt DateTime @default(now())
}

// Шаблоны документов
model DocumentTemplate {
  id        String       @id @default(uuid())
  name      String
  type      DocumentType
  content   String       @db.Text // HTML шаблон
  variables Json? // Список переменных
  isActive  Boolean      @default(true)

  createdById Int
  createdBy   User @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Система ставок и отработанных часов ---

// Ставки преподавателя
model TeacherSalaryRate {
  id        Int       @id @default(autoincrement())
  teacherId Int
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  baseRate  Int // базовая ставка в тенге за час
  factors   Json // [{name: "За опыт", amount: 2000}, {name: "За опыт в академии", amount: 3000}]
  totalRate Int // итоговая почасовая ставка
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([teacherId, isActive])
}

// Отработанные часы преподавателя
model TeacherWorkedHours {
  id                  Int      @id @default(autoincrement())
  teacherId           Int
  teacher             Teacher  @relation(fields: [teacherId], references: [id])
  month               Int // 1-12
  year                Int
  scheduledHours      Float // запланированные академические часы (дробные для точности)
  workedHours         Float // фактически отработанные академические часы (с учетом замещений)
  substitutedHours    Float    @default(0) // академические часы замещения других
  substitutedByOthers Float    @default(0) // академические часы, замещенные другими
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([teacherId, month, year])
  @@index([teacherId, year, month])
}

// Настройки системы
model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

// --- Dashboard Widgets ---

model DashboardWidget {
  id        String    @id @default(uuid())
  userId    Int
  type      String
  title     String
  size      String    @default("medium")
  position  Json
  config    Json?
  isActive  Boolean   @default(true)
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([userId, isActive])
}

// --- New KPI System ---

enum AchievementType {
  OLYMPIAD_WIN // Призовое место на олимпиаде
  SCHOOL_ADMISSION // Поступление в школы
  QUALIFICATION // Повышение квалификации
  TEAM_EVENT // Участие в командных мероприятиях
  PROJECT_HELP // Помощь в проектах
}

enum SchoolType {
  RFMSH // РФМШ
  NISH // НИШ
  BIL // БИЛ
  LYCEUM // Лицеи
  PRIVATE_SCHOOL // Частные школы
}

// Периодические достижения преподавателей
model TeacherAchievement {
  id          Int             @id @default(autoincrement())
  teacherId   Int
  teacher     Teacher         @relation(fields: [teacherId], references: [id])
  type        AchievementType
  title       String
  description String?         @db.Text
  date        DateTime
  points      Int             @default(0) // Баллы за достижение
  evidenceUrl String? // Ссылка на подтверждающий документ
  isVerified  Boolean         @default(false)
  verifiedBy  Int?
  verifiedAt  DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?

  @@index([teacherId, type])
  @@index([date])
}

// Результаты олимпиад учеников
model OlympiadResult {
  id             Int       @id @default(autoincrement())
  studentId      Int
  student        Student   @relation(fields: [studentId], references: [id])
  teacherId      Int
  teacher        Teacher   @relation(fields: [teacherId], references: [id])
  olympiadName   String
  subject        String
  level          String // "Школьный", "Городской", "Республиканский", "Международный"
  place          Int // 1, 2, 3 место
  date           DateTime
  certificateUrl String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@index([teacherId, date])
  @@index([studentId])
}

// Поступления учеников в учебные заведения
model StudentAdmission {
  id            Int        @id @default(autoincrement())
  studentId     Int
  student       Student    @relation(fields: [studentId], references: [id])
  teacherId     Int
  teacher       Teacher    @relation(fields: [teacherId], references: [id])
  schoolType    SchoolType
  schoolName    String
  admissionYear Int
  documentUrl   String? // Ссылка на справку о поступлении
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?

  @@index([teacherId, admissionYear])
  @@index([studentId])
}

// КТП (Календарно-тематическое планирование)
model CurriculumPlan {
  id             Int       @id @default(autoincrement())
  studyPlanId    Int       @unique
  studyPlan      StudyPlan @relation(fields: [studyPlanId], references: [id])
  totalLessons   Int
  plannedLessons Json // [{week: 1, topic: "Тема", hours: 2}]
  actualLessons  Json? // [{week: 1, completed: true, date: "2025-01-01"}]
  completionRate Float     @default(0) // Процент выполнения КТП
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@index([studyPlanId])
  aiSuggestions AiSuggestion[]
}

model AiSuggestion {
  id               Int            @id @default(autoincrement())
  curriculumPlanId Int
  curriculumPlan   CurriculumPlan @relation(fields: [curriculumPlanId], references: [id], onDelete: Cascade)
  authorId         Int
  author           User           @relation("AiSuggestionAuthor", fields: [authorId], references: [id])
  suggestion       String         @db.Text
  diff             Json?
  status           String         @default("PENDING") // PENDING, APPLIED, REJECTED
  metadata         Json?
  createdAt        DateTime       @default(now())
  appliedBy        Int?
  appliedByUser    User?          @relation("AiSuggestionAppliedBy", fields: [appliedBy], references: [id])
  appliedAt        DateTime?
  auditLogs        AiSuggestionAudit[]
}

model AiSuggestionAudit {
  id           Int          @id @default(autoincrement())
  suggestionId Int
  suggestion   AiSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  action       String       // CREATED, UPDATED, APPLIED, REJECTED
  performedBy  Int?
  note         String?
  data         Json?
  createdAt    DateTime     @default(now())
}
