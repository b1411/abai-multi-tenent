import { PrismaClient } from "generated/prisma";
import { config } from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({
  path: "../../.env",
});

const prisma = new PrismaClient();

async function checkKpiAchievements() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö KPI –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const achievementsCount = await prisma.teacherAchievement.count();
    console.log(`üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ: ${achievementsCount}`);

    if (achievementsCount === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ –±–∞–∑–µ');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
    const achievements = await prisma.teacherAchievement.findMany({
      include: {
        teacher: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                surname: true,
                email: true,
              }
            }
          }
        }
      },
      orderBy: {
        date: 'desc'
      }
    });

    console.log('\nüìã –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º:');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
    const teacherAchievements: Record<number, { teacher: any, achievements: any[] }> = {};

    achievements.forEach(achievement => {
      const teacherId = achievement.teacherId;
      if (!teacherAchievements[teacherId]) {
        teacherAchievements[teacherId] = {
          teacher: achievement.teacher,
          achievements: []
        };
      }
      teacherAchievements[teacherId].achievements.push(achievement);
    });

    for (const [, data] of Object.entries(teacherAchievements)) {
      const { teacher, achievements } = data;
      console.log(`\nüë§ ${teacher.user.name} ${teacher.user.surname} (${teacher.user.email})`);
      console.log(`   –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${achievements.length}`);

      achievements.forEach((achievement, index) => {
        console.log(`   ${index + 1}. ${achievement.type} - ${achievement.title}`);
        console.log(`      –î–∞—Ç–∞: ${achievement.date.toLocaleDateString('ru')}`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${achievement.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`      –ë–∞–ª–ª—ã: ${achievement.points}`);
        console.log(`      –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${achievement.isVerified ? '–î–∞' : '–ù–µ—Ç'}`);
      });
    }

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:');
    const typeStats: Record<string, number> = {};
    achievements.forEach(achievement => {
      typeStats[achievement.type] = (typeStats[achievement.type] || 0) + 1;
    });

    for (const [type, count] of Object.entries(typeStats)) {
      console.log(`   ${type}: ${count}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

    const recentAchievements = achievements.filter(a => a.date >= oneYearAgo);
    console.log(`\nüìÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥: ${recentAchievements.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkKpiAchievements();
