import * as fs from 'fs';
import * as path from 'path';

function destroyOldRoleSystem() {
  console.log('üî• –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –°–¢–ê–†–û–ô –°–ò–°–¢–ï–ú–´ –†–û–õ–ï–ô...');

  // 1. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
  console.log('üíÄ –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã...');
  
  try {
    // –£–¥–∞–ª—è–µ–º role.guard.ts
    const roleGuardPath = 'src/common/guards/role.guard.ts';
    if (fs.existsSync(roleGuardPath)) {
      fs.unlinkSync(roleGuardPath);
      console.log('‚úÖ –£–¥–∞–ª–µ–Ω role.guard.ts');
    }

    // –£–¥–∞–ª—è–µ–º roles.decorator.ts
    const rolesDecoratorPath = 'src/common/decorators/roles.decorator.ts';
    if (fs.existsSync(rolesDecoratorPath)) {
      fs.unlinkSync(rolesDecoratorPath);
      console.log('‚úÖ –£–¥–∞–ª–µ–Ω roles.decorator.ts');
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è –§–∞–π–ª—ã —É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  // 2. –ò—â–µ–º –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  console.log('üîç –ò—â–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã...');
  
  const controllersPath = 'src';
  const controllers = findControllerFiles(controllersPath);
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${controllers.length} –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

  // 3. –û—á–∏—â–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–∞–∂–¥–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
  let cleaned = 0;
  for (const controller of controllers) {
    const wasChanged = cleanController(controller);
    if (wasChanged) {
      cleaned++;
      console.log(`‚úÖ –û—á–∏—â–µ–Ω: ${controller}`);
    }
  }

  console.log(`\nüéâ –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   - –§–∞–π–ª–æ–≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–æ: 2`);
  console.log(`   - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${controllers.length}`);
  console.log(`   - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω–æ: ${cleaned}`);
  console.log(`\n‚úÖ –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!`);
  console.log(`‚úÖ –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ RBAC —Å @RequirePermission`);
}

function findControllerFiles(dir: string): string[] {
  const controllers: string[] = [];
  
  function searchRecursive(currentDir: string) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.includes('node_modules')) {
        searchRecursive(fullPath);
      } else if (item.endsWith('.controller.ts')) {
        controllers.push(fullPath);
      }
    }
  }
  
  searchRecursive(dir);
  return controllers;
}

function cleanController(filePath: string): boolean {
  const content = fs.readFileSync(filePath, 'utf8');
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const patterns = [
    /import\s+{\s*RolesGuard\s*}\s+from\s+['"]\.\.\/(\.\.\/)*common\/guards\/role\.guard['"]\s*;\s*\n?/g,
    /import\s+{\s*Roles\s*}\s+from\s+['"]\.\.\/(\.\.\/)*common\/decorators\/roles\.decorator['"]\s*;\s*\n?/g,
    /,\s*RolesGuard/g,
    /RolesGuard\s*,\s*/g,
    /@Roles\([^)]*\)\s*\n/g,
  ];

  let newContent = content;
  let hasChanges = false;

  for (const pattern of patterns) {
    const before = newContent;
    newContent = newContent.replace(pattern, '');
    if (before !== newContent) {
      hasChanges = true;
    }
  }

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  newContent = newContent.replace(/\n\n\n+/g, '\n\n');

  if (hasChanges) {
    fs.writeFileSync(filePath, newContent, 'utf8');
    return true;
  }

  return false;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ
try {
  destroyOldRoleSystem();
} catch (error) {
  console.error(error);
}
