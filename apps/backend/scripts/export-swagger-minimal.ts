import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { Module } from '@nestjs/common';
import path from 'path';
import fs from 'fs';
import yaml from 'js-yaml';

// Import only safe modules (avoid problematic ones)
import { AuthModule } from '../src/auth/auth.module';
import { UsersModule } from '../src/users/users.module';
import { GroupsModule } from '../src/groups/groups.module';
import { ClassroomsModule } from '../src/classrooms/classrooms.module';
import { StudentsModule } from '../src/students/students.module';

@Module({
  imports: [
    AuthModule,
    UsersModule,
    GroupsModule,
    ClassroomsModule,
    StudentsModule,
  ],
})
class MinimalAppModule {}

async function exportSwagger() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        const app = await NestFactory.create(MinimalAppModule, { logger: false });

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Swagger
        const config = new DocumentBuilder()
            .setTitle('Multi-Tenant ABAI API')
            .setDescription('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π')
            .setVersion('1.0.0')
            .addTag('Auth', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
            .addTag('Users', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
            .addTag('Groups', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            .addTag('Classrooms', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º–∏')
            .addTag('Students', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏')
            .addBearerAuth(
                {
                    type: 'http',
                    scheme: 'bearer',
                    bearerFormat: 'JWT',
                    name: 'JWT',
                    description: '–í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω',
                    in: 'header',
                },
                'JWT-auth',
            )
            .addServer('http://localhost:3000', 'Development server')
            .build();

        // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        const document = SwaggerModule.createDocument(app, config);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const outputDir = path.resolve(process.cwd(), 'docs');
        const jsonPath = path.join(outputDir, 'swagger-minimal.json');
        const yamlPath = path.join(outputDir, 'swagger-minimal.yaml');

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
            console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDir}`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        fs.writeFileSync(jsonPath, JSON.stringify(document, null, 2));
        console.log(`‚úÖ Swagger JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${jsonPath}`);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ YAML —Ñ–æ—Ä–º–∞—Ç–µ
        fs.writeFileSync(yamlPath, yaml.dump(document));
        console.log(`‚úÖ Swagger YAML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${yamlPath}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = {
            paths: Object.keys(document.paths || {}).length,
            tags: (document.tags || []).length,
            components: Object.keys(document.components?.schemas || {}).length,
            fileSize: `${Math.round(fs.statSync(jsonPath).size / 1024)}KB`
        };

        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
        console.log(`   üîó API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: ${stats.paths}`);
        console.log(`   üè∑Ô∏è  –¢–µ–≥–æ–≤: ${stats.tags}`);
        console.log(`   üìã –°—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö: ${stats.components}`);
        console.log(`   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${stats.fileSize}`);

        await app.close();
        console.log('\nüéâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Swagger:', error.message);
        console.error('Stack:', error.stack);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
exportSwagger().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
    process.exit(1);
});
