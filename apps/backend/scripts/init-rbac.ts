import { PrismaClient } from '../generated/prisma';
import { PermissionScope } from '../generated/prisma';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã
const MODULES = [
    'students',
    'teachers',
    'lessons',
    'homework',
    'schedule',
    'groups',
    'materials',
    'quiz',
    'payments',
    'reports',
    'notifications',
    'calendar',
    'chat',
    'tasks',
    'users',
    'system',
    'rbac',
    'budget',
    'classrooms',
    'files',
    'ai-assistant',
    'feedback',
    'lesson-results',
    'inventory',
    'performance',
    'kpi',
    'loyalty',
    'supply',
    'salaries',
    'vacations',
    'workload',
    'edo',
    'activity-monitoring',
    'branding',
    'integrations',
    'security',
    'journal',
    'study-plans',
    'dashboard'
];

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
const STANDARD_ACTIONS = [
    { action: 'create', scopes: [PermissionScope.ALL] },
    { action: 'read', scopes: [PermissionScope.ALL, PermissionScope.OWN, PermissionScope.GROUP] },
    { action: 'update', scopes: [PermissionScope.ALL, PermissionScope.OWN] },
    { action: 'delete', scopes: [PermissionScope.ALL, PermissionScope.OWN] }
];

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π
const BASE_ROLES = {
    SUPER_ADMIN: {
        name: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
        permissions: ['*:*:ALL'],
        isSystem: true
    },
    ADMIN: {
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ',
        permissions: [
            'users:*:ALL',
            'groups:*:ALL',
            'system:*:ALL',
            'reports:*:ALL',
            'rbac:read:ALL'
        ],
        isSystem: true
    },
    TEACHER: {
        name: '–£—á–∏—Ç–µ–ª—å',
        description: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º',
        permissions: [
            'lessons:*:OWN',
            'lessons:read:GROUP',
            'homework:*:OWN',
            'materials:*:OWN',
            'quiz:*:OWN',
            'students:read:GROUP',
            'schedule:read:ALL',
            'schedule:update:OWN',
            'reports:read:GROUP',
            'chat:*:GROUP',
            'calendar:*:OWN',
            'tasks:*:OWN'
        ],
        isSystem: true
    },
    STUDENT: {
        name: '–°—Ç—É–¥–µ–Ω—Ç',
        description: '–î–æ—Å—Ç—É–ø –∫ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –ª–∏—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º',
        permissions: [
            'lessons:read:GROUP',
            'homework:read:OWN',
            'homework:create:OWN',
            'homework:update:OWN',
            'materials:read:GROUP',
            'quiz:read:GROUP',
            'schedule:read:GROUP',
            'chat:read:GROUP',
            'chat:create:GROUP',
            'calendar:read:OWN',
            'tasks:read:OWN',
            'payments:read:OWN'
        ],
        isSystem: true
    },
    PARENT: {
        name: '–†–æ–¥–∏—Ç–µ–ª—å',
        description: '–î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–∏—Ö –¥–µ—Ç—è—Ö',
        permissions: [
            'students:read:ASSIGNED',
            'lessons:read:ASSIGNED',
            'homework:read:ASSIGNED',
            'schedule:read:ASSIGNED',
            'payments:read:ASSIGNED',
            'reports:read:ASSIGNED',
            'chat:read:ASSIGNED'
        ],
        isSystem: true
    },
    HR: {
        name: 'HR –ú–µ–Ω–µ–¥–∂–µ—Ä',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º',
        permissions: [
            'users:*:ALL',
            'teachers:*:ALL',
            'reports:read:ALL',
            'tasks:*:ALL',
            'calendar:read:ALL',
            'rbac:read:ALL',
            'rbac:users:*:ALL'
        ],
        isSystem: true
    },
    FINANCIST: {
        name: '–§–∏–Ω–∞–Ω—Å–∏—Å—Ç',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏',
        permissions: [
            'payments:*:ALL',
            'reports:*:ALL',
            'students:read:ALL',
            'users:read:ALL'
        ],
        isSystem: true
    }
};

async function createPermissions() {
    console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');

    for (const module of MODULES) {
        console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –º–æ–¥—É–ª—è: ${module}`);

        for (const { action, scopes } of STANDARD_ACTIONS) {
            for (const scope of scopes) {
                try {
                    await prisma.permission.upsert({
                        where: {
                            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ module, action, scope
                            id: `${module}-${action}-${scope}`.replace(/[^a-zA-Z0-9-]/g, '-')
                        },
                        update: {},
                        create: {
                            id: `${module}-${action}-${scope}`.replace(/[^a-zA-Z0-9-]/g, '-'),
                            module,
                            action,
                            scope,
                            description: `${action.charAt(0).toUpperCase() + action.slice(1)} ${module} with ${scope.toLowerCase()} scope`,
                            isSystem: true
                        }
                    });
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ${module}:${action}:${scope}:`, error);
                }
            }
        }
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const specialPermissions = [
        {
            id: 'all-all-all',
            module: '*',
            action: '*',
            scope: PermissionScope.ALL,
            description: 'Full system access',
            isSystem: true
        },
        {
            id: 'rbac-users-assign',
            module: 'rbac',
            action: 'assign',
            scope: PermissionScope.ALL,
            description: 'Assign roles to users',
            isSystem: true
        }
    ];

    for (const permission of specialPermissions) {
        await prisma.permission.upsert({
            where: { id: permission.id },
            update: {},
            create: permission
        });
    }

    console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');
}

async function createRoles() {
    console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π...');

    for (const [roleKey, roleData] of Object.entries(BASE_ROLES)) {
        console.log(`üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏: ${roleData.name}`);

        // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
        const role = await prisma.role.upsert({
            where: { name: roleData.name },
            update: {
                description: roleData.description,
                isSystem: roleData.isSystem
            },
            create: {
                name: roleData.name,
                description: roleData.description,
                isSystem: roleData.isSystem
            }
        });

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–∏
        await prisma.rolePermission.deleteMany({
            where: { roleId: role.id }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫ —Ä–æ–ª–∏
        for (const permissionPattern of roleData.permissions) {
            const [module, action, scope] = permissionPattern.split(':');

            if (module === '*' && action === '*') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—ë
                const allPermission = await prisma.permission.findFirst({
                    where: { module: '*', action: '*' }
                });

                if (allPermission) {
                    await prisma.rolePermission.create({
                        data: {
                            roleId: role.id,
                            permissionId: allPermission.id
                        }
                    });
                }
            } else {
                // –û–±—ã—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                const whereClause: any = {};

                if (module !== '*') {
                    whereClause.module = module;
                }

                if (action !== '*') {
                    whereClause.action = action;
                }

                if (scope && scope !== '*' && Object.values(PermissionScope).includes(scope as PermissionScope)) {
                    whereClause.scope = scope as PermissionScope;
                }

                const permissions = await prisma.permission.findMany({
                    where: whereClause
                });

                for (const permission of permissions) {
                    try {
                        await prisma.rolePermission.create({
                            data: {
                                roleId: role.id,
                                permissionId: permission.id
                            }
                        });
                    } catch (error) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    }
                }
            }
        }
    }

    console.log('‚úÖ –†–æ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
}

async function assignDefaultRoles() {
    console.log('üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');

    const users = await prisma.user.findMany({
        where: { deletedAt: null }
    });

    for (const user of users) {
        const roleName = BASE_ROLES[user.role as keyof typeof BASE_ROLES]?.name;

        if (roleName) {
            const role = await prisma.role.findUnique({
                where: { name: roleName }
            });

            if (role) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                const existingAssignment = await prisma.userRoleAssignment.findFirst({
                    where: {
                        userId: user.id,
                        roleId: role.id,
                        isActive: true
                    }
                });

                if (!existingAssignment) {
                    await prisma.userRoleAssignment.create({
                        data: {
                            userId: user.id,
                            roleId: role.id,
                            assignedBy: 1, // –°–∏—Å—Ç–µ–º–∞
                            assignedAt: new Date(),
                            isActive: true
                        }
                    });

                    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å ${roleName}`);
                }
            }
        }
    }

    console.log('‚úÖ –†–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã');
}

async function createDefaultAdmin() {
    console.log('üëë –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');

    const adminEmail = 'admin@abai.edu.kz';

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    let admin = await prisma.user.findUnique({
        where: { email: adminEmail }
    });

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º
    if (!admin) {
        const hashedPassword = await bcrypt.hash('admin123', 12);

        admin = await prisma.user.create({
            data: {
                email: adminEmail,
                name: '–°–∏—Å—Ç–µ–º–Ω—ã–π',
                surname: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                hashedPassword,
                role: 'ADMIN'
            }
        });

        console.log(`üë§ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${adminEmail} / admin123`);
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const superAdminRole = await prisma.role.findUnique({
        where: { name: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' }
    });

    if (superAdminRole) {
        const existingAssignment = await prisma.userRoleAssignment.findFirst({
            where: {
                userId: admin.id,
                roleId: superAdminRole.id,
                isActive: true
            }
        });

        if (!existingAssignment) {
            await prisma.userRoleAssignment.create({
                data: {
                    userId: admin.id,
                    roleId: superAdminRole.id,
                    assignedBy: admin.id,
                    assignedAt: new Date(),
                    isActive: true
                }
            });

            console.log('üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞');
        }
    }
}

async function main() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RBAC —Å–∏—Å—Ç–µ–º—ã...\n');

        await createPermissions();
        console.log('');

        await createRoles();
        console.log('');

        await createDefaultAdmin();
        console.log('');

        await assignDefaultRoles();
        console.log('');

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const permissionCount = await prisma.permission.count();
        const roleCount = await prisma.role.count();
        const assignmentCount = await prisma.userRoleAssignment.count();

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RBAC —Å–∏—Å—Ç–µ–º—ã:');
        console.log(`   üí´ –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${permissionCount}`);
        console.log(`   üë• –†–æ–ª–µ–π: ${roleCount}`);
        console.log(`   üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${assignmentCount}`);
        console.log('');
        console.log('üéâ RBAC —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        console.log('');
        console.log('üìù –î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
        console.log('   Email: admin@abai.edu.kz');
        console.log('   –ü–∞—Ä–æ–ª—å: admin123');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RBAC:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

main();
