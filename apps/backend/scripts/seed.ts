import { PrismaClient } from 'generated/prisma';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    // console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    // await prisma.lessonResult.deleteMany();
    // await prisma.lesson.deleteMany();
    // await prisma.studyPlan.deleteMany();
    // await prisma.student.deleteMany();
    // await prisma.teacher.deleteMany();
    // await prisma.parent.deleteMany();
    // await prisma.group.deleteMany();
    // await prisma.classroom.deleteMany();
    // await prisma.user.deleteMany();

    console.log('üìù –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hashedPassword = await bcrypt.hash('password123', 10);

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admin = await prisma.user.create({
        data: {
            email: 'admin@abai.edu.kz',
            name: '–ê–¥–º–∏–Ω',
            surname: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ–≤',
            middlename: '–°–∏—Å—Ç–µ–º–æ–≤–∏—á',
            phone: '+7 700 000 0001',
            role: 'ADMIN',
            hashedPassword,
        },
    });

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–∞
    const financist = await prisma.user.create({
        data: {
            email: 'financist@abai.edu.kz',
            name: '–ì—É–ª—å–º–∏—Ä–∞',
            surname: '–ö–∞—Å—ã–º–æ–≤–∞',
            middlename: '–°–µ—Ä–∏–∫–∂–∞–Ω–æ–≤–Ω–∞',
            phone: '+7 700 000 0006',
            role: 'FINANCIST',
            hashedPassword,
        },
    });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    const teachers = await Promise.all([
        prisma.user.create({
            data: {
                email: 'ivanova@abai.edu.kz',
                name: '–õ–∞—Ä–∏—Å–∞',
                surname: '–ò–≤–∞–Ω–æ–≤–∞',
                middlename: '–ü–µ—Ç—Ä–æ–≤–Ω–∞',
                phone: '+7 700 000 0002',
                role: 'TEACHER',
                hashedPassword,
                teacher: {
                    create: {
                        employmentType: 'STAFF',
                    },
                },
            },
            include: { teacher: true },
        }),
        prisma.user.create({
            data: {
                email: 'aliev@abai.edu.kz',
                name: '–ê–∑–∞–º–∞—Ç',
                surname: '–ê–ª–∏–µ–≤',
                middlename: '–°–µ—Ä–∏–∫–æ–≤–∏—á',
                phone: '+7 700 000 0003',
                role: 'TEACHER',
                hashedPassword,
                teacher: {
                    create: {
                        employmentType: 'STAFF',
                    },
                },
            },
            include: { teacher: true },
        }),
        prisma.user.create({
            data: {
                email: 'tulegenov@abai.edu.kz',
                name: '–ú–∞—Ä–∞—Ç',
                surname: '–¢—É–ª–µ–≥–µ–Ω–æ–≤',
                middlename: '–ê—Å—ã–ª—Ö–∞–Ω–æ–≤–∏—á',
                phone: '+7 700 000 0004',
                role: 'TEACHER',
                hashedPassword,
                teacher: {
                    create: {
                        employmentType: 'STAFF',
                    },
                },
            },
            include: { teacher: true },
        }),
        prisma.user.create({
            data: {
                email: 'nazarbayeva@abai.edu.kz',
                name: '–ê–π–≥—É–ª—å',
                surname: '–ù–∞–∑–∞—Ä–±–∞–µ–≤–∞',
                middlename: '–ï—Ä–º–µ–∫–æ–≤–Ω–∞',
                phone: '+7 700 000 0005',
                role: 'TEACHER',
                hashedPassword,
                teacher: {
                    create: {
                        employmentType: 'PART_TIME',
                    },
                },
            },
            include: { teacher: true },
        }),
    ]);

    console.log('üë• –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã...');

    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
    const groups = await Promise.all([
        prisma.group.create({
            data: {
                name: '10–ê',
                courseNumber: 10,
            },
        }),
        prisma.group.create({
            data: {
                name: '10–ë',
                courseNumber: 10,
            },
        }),
        prisma.group.create({
            data: {
                name: '11–ê',
                courseNumber: 11,
            },
        }),
        prisma.group.create({
            data: {
                name: '11–ë',
                courseNumber: 11,
            },
        }),
        prisma.group.create({
            data: {
                name: '9–ê',
                courseNumber: 9,
            },
        }),
    ]);

    console.log('üéì –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const studentUsers = await Promise.all([
        // –°—Ç—É–¥–µ–Ω—Ç—ã 10–ê
        prisma.user.create({
            data: {
                email: 'aida.student@abai.edu.kz',
                name: '–ê–π–¥–∞',
                surname: '–ö–∞–∑—ã–±–µ–∫–æ–≤–∞',
                middlename: '–ù—É—Ä–ª–∞–Ω–æ–≤–Ω–∞',
                phone: '+7 700 000 0010',
                role: 'STUDENT',
                hashedPassword,
                student: {
                    create: {
                        groupId: groups[0].id, // 10–ê
                    },
                },
            },
            include: { student: true },
        }),
        prisma.user.create({
            data: {
                email: 'arman.student@abai.edu.kz',
                name: '–ê—Ä–º–∞–Ω',
                surname: '–ñ–∞–∫–∏–ø–æ–≤',
                middlename: '–ë–∞—É—ã—Ä–∂–∞–Ω–æ–≤–∏—á',
                phone: '+7 700 000 0011',
                role: 'STUDENT',
                hashedPassword,
                student: {
                    create: {
                        groupId: groups[0].id, // 10–ê
                    },
                },
            },
            include: { student: true },
        }),
        // –°—Ç—É–¥–µ–Ω—Ç—ã 10–ë
        prisma.user.create({
            data: {
                email: 'dana.student@abai.edu.kz',
                name: '–î–∞–Ω–∞',
                surname: '–°–µ—Ä–∞–ª–∏–µ–≤–∞',
                middlename: '–ê—Å—ã–ª–±–µ–∫–æ–≤–Ω–∞',
                phone: '+7 700 000 0012',
                role: 'STUDENT',
                hashedPassword,
                student: {
                    create: {
                        groupId: groups[1].id, // 10–ë
                    },
                },
            },
            include: { student: true },
        }),
        // –°—Ç—É–¥–µ–Ω—Ç—ã 11–ê
        prisma.user.create({
            data: {
                email: 'bekzat.student@abai.edu.kz',
                name: '–ë–µ–∫–∑–∞—Ç',
                surname: '–û—Ä–∞–∑–±–∞–µ–≤',
                middlename: '–ê–ª–º–∞—Å–æ–≤–∏—á',
                phone: '+7 700 000 0013',
                role: 'STUDENT',
                hashedPassword,
                student: {
                    create: {
                        groupId: groups[2].id, // 11–ê
                    },
                },
            },
            include: { student: true },
        }),
    ]);

    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π...');

    // –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const parents = await Promise.all([
        // –†–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –ê–π–¥—ã –ö–∞–∑—ã–±–µ–∫–æ–≤–æ–π (—Å—Ç—É–¥–µ–Ω—Ç 0)
        prisma.user.create({
            data: {
                email: 'nazym.parent@abai.edu.kz',
                name: '–ù–∞–∑—ã–º',
                surname: '–ö–∞–∑—ã–±–µ–∫–æ–≤–∞',
                middlename: '–°–µ—Ä–∏–∫–∂–∞–Ω–æ–≤–Ω–∞',
                phone: '+7 700 000 0020',
                role: 'PARENT',
                hashedPassword,
                parent: {
                    create: {
                        relation: '–ú–∞—Ç—å',
                        students: {
                            connect: { id: studentUsers[0].student.id }, // –ê–π–¥–∞
                        },
                    },
                },
            },
            include: { parent: true },
        }),
        prisma.user.create({
            data: {
                email: 'nurlan.parent@abai.edu.kz',
                name: '–ù—É—Ä–ª–∞–Ω',
                surname: '–ö–∞–∑—ã–±–µ–∫–æ–≤',
                middlename: '–ê–±–∞–π–µ–≤–∏—á',
                phone: '+7 700 000 0025',
                role: 'PARENT',
                hashedPassword,
                parent: {
                    create: {
                        relation: '–û—Ç–µ—Ü',
                        students: {
                            connect: { id: studentUsers[0].student.id }, // –ê–π–¥–∞
                        },
                    },
                },
            },
            include: { parent: true },
        }),
        // –†–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –ê—Ä–º–∞–Ω–∞ –ñ–∞–∫–∏–ø–æ–≤–∞ (—Å—Ç—É–¥–µ–Ω—Ç 1)
        prisma.user.create({
            data: {
                email: 'bolat.parent@abai.edu.kz',
                name: '–ë–æ–ª–∞—Ç',
                surname: '–ñ–∞–∫–∏–ø–æ–≤',
                middlename: '–ú–∞—Ä–∞—Ç–æ–≤–∏—á',
                phone: '+7 700 000 0021',
                role: 'PARENT',
                hashedPassword,
                parent: {
                    create: {
                        relation: '–û—Ç–µ—Ü',
                        students: {
                            connect: { id: studentUsers[1].student.id }, // –ê—Ä–º–∞–Ω
                        },
                    },
                },
            },
            include: { parent: true },
        }),
        prisma.user.create({
            data: {
                email: 'gulnara.parent@abai.edu.kz',
                name: '–ì—É–ª—å–Ω–∞—Ä–∞',
                surname: '–ñ–∞–∫–∏–ø–æ–≤–∞',
                middlename: '–ï—Ä–ª–∞–Ω–æ–≤–Ω–∞',
                phone: '+7 700 000 0026',
                role: 'PARENT',
                hashedPassword,
                parent: {
                    create: {
                        relation: '–ú–∞—Ç—å',
                        students: {
                            connect: { id: studentUsers[1].student.id }, // –ê—Ä–º–∞–Ω
                        },
                    },
                },
            },
            include: { parent: true },
        }),
        // –†–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –î–∞–Ω—ã –°–µ—Ä–∞–ª–∏–µ–≤–æ–π (—Å—Ç—É–¥–µ–Ω—Ç 2)
        prisma.user.create({
            data: {
                email: 'asylbek.parent@abai.edu.kz',
                name: '–ê—Å—ã–ª–±–µ–∫',
                surname: '–°–µ—Ä–∞–ª–∏–µ–≤',
                middlename: '–ö–∞—Å—ã–º–æ–≤–∏—á',
                phone: '+7 700 000 0027',
                role: 'PARENT',
                hashedPassword,
                parent: {
                    create: {
                        relation: '–û—Ç–µ—Ü',
                        students: {
                            connect: { id: studentUsers[2].student.id }, // –î–∞–Ω–∞
                        },
                    },
                },
            },
            include: { parent: true },
        }),
        prisma.user.create({
            data: {
                email: 'zhanar.parent@abai.edu.kz',
                name: '–ñ–∞–Ω–∞—Ä',
                surname: '–°–µ—Ä–∞–ª–∏–µ–≤–∞',
                middlename: '–ê–º–∞–Ω–≥–µ–ª—å–¥–∏–Ω–æ–≤–Ω–∞',
                phone: '+7 700 000 0028',
                role: 'PARENT',
                hashedPassword,
                parent: {
                    create: {
                        relation: '–ú–∞—Ç—å',
                        students: {
                            connect: { id: studentUsers[2].student.id }, // –î–∞–Ω–∞
                        },
                    },
                },
            },
            include: { parent: true },
        }),
        // –†–æ–¥–∏—Ç–µ–ª—å –¥–ª—è –ë–µ–∫–∑–∞—Ç–∞ –û—Ä–∞–∑–±–∞–µ–≤–∞ (—Å—Ç—É–¥–µ–Ω—Ç 3) - –æ–¥–∏–Ω–æ–∫–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å
        prisma.user.create({
            data: {
                email: 'almas.parent@abai.edu.kz',
                name: '–ê–ª–º–∞—Å',
                surname: '–û—Ä–∞–∑–±–∞–µ–≤',
                middlename: '–ò–ª—å—è—Å–æ–≤–∏—á',
                phone: '+7 700 000 0029',
                role: 'PARENT',
                hashedPassword,
                parent: {
                    create: {
                        relation: '–û—Ç–µ—Ü',
                        students: {
                            connect: { id: studentUsers[3].student.id }, // –ë–µ–∫–∑–∞—Ç
                        },
                    },
                },
            },
            include: { parent: true },
        }),
    ]);

    console.log('üè´ –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏...');

    // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    const classrooms = await Promise.all([
        prisma.classroom.create({
            data: {
                name: '101',
                building: '–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å',
                floor: 1,
                capacity: 30,
                type: 'LECTURE',
                equipment: ['–ü—Ä–æ–µ–∫—Ç–æ—Ä', '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ—Å–∫–∞', '–ö–æ–º–ø—å—é—Ç–µ—Ä'],
                description: '–ê—É–¥–∏—Ç–æ—Ä–∏—è –¥–ª—è –ª–µ–∫—Ü–∏–π —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
            },
        }),
        prisma.classroom.create({
            data: {
                name: '205',
                building: '–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å',
                floor: 2,
                capacity: 25,
                type: 'PRACTICE',
                equipment: ['–ü—Ä–æ–µ–∫—Ç–æ—Ä', '–ú–∞—Ä–∫–µ—Ä–Ω–∞—è –¥–æ—Å–∫–∞'],
                description: '–ê—É–¥–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–Ω—è—Ç–∏–π',
            },
        }),
        prisma.classroom.create({
            data: {
                name: '305',
                building: '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω—ã–π –∫–æ—Ä–ø—É—Å',
                floor: 3,
                capacity: 20,
                type: 'LABORATORY',
                equipment: ['–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–í—ã—Ç—è–∂–∫–∞', '–ú–∏–∫—Ä–æ—Å–∫–æ–ø—ã'],
                description: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ñ–∏–∑–∏–∫–∏ –∏ —Ö–∏–º–∏–∏',
            },
        }),
    ]);

    console.log('üìö –°–æ–∑–¥–∞–µ–º —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã...');

    // –°–æ–∑–¥–∞–µ–º —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã
    const studyPlans = await Promise.all([
        prisma.studyPlan.create({
            data: {
                name: '–ê–ª–≥–µ–±—Ä–∞ - 10 –∫–ª–∞—Å—Å',
                description: '–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∞–ª–≥–µ–±—Ä—ã –¥–ª—è 10 –∫–ª–∞—Å—Å–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞',
                teacherId: teachers[0].teacher.id, // –ò–≤–∞–Ω–æ–≤–∞
                normativeWorkload: 102, // —á–∞—Å–æ–≤ –≤ –≥–æ–¥
                group: {
                    connect: [{ id: groups[0].id }, { id: groups[1].id }], // 10–ê –∏ 10–ë
                },
            },
        }),
        prisma.studyPlan.create({
            data: {
                name: '–ë–∏–æ–ª–æ–≥–∏—è - 10 –∫–ª–∞—Å—Å',
                description: '–û–±—â–∞—è –±–∏–æ–ª–æ–≥–∏—è —Å –æ—Å–Ω–æ–≤–∞–º–∏ —ç–∫–æ–ª–æ–≥–∏–∏',
                teacherId: teachers[1].teacher.id, // –ê–ª–∏–µ–≤
                normativeWorkload: 68,
                group: {
                    connect: [{ id: groups[1].id }], // 10–ë
                },
            },
        }),
        prisma.studyPlan.create({
            data: {
                name: '–§–∏–∑–∏–∫–∞ - 11 –∫–ª–∞—Å—Å',
                description: '–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ –∏ —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞',
                teacherId: teachers[2].teacher.id, // –¢—É–ª–µ–≥–µ–Ω–æ–≤
                normativeWorkload: 85,
                group: {
                    connect: [{ id: groups[2].id }, { id: groups[3].id }], // 11–ê –∏ 11–ë
                },
            },
        }),
        prisma.studyPlan.create({
            data: {
                name: '–•–∏–º–∏—è - 9 –∫–ª–∞—Å—Å',
                description: '–ù–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è',
                teacherId: teachers[3].teacher.id, // –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞
                normativeWorkload: 68,
                group: {
                    connect: [{ id: groups[4].id }], // 9–ê
                },
            },
        }),
    ]);

    console.log('üìÖ –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...');

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await Promise.all([
        // –ê–ª–≥–µ–±—Ä–∞ 10–ê - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 8:30-9:15
        prisma.schedule.create({
            data: {
                studyPlanId: studyPlans[0].id,
                groupId: groups[0].id,
                teacherId: teachers[0].teacher.id,
                classroomId: classrooms[0].id,
                dayOfWeek: 1, // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                startTime: '08:30',
                endTime: '09:15',
            },
        }),
        // –ê–ª–≥–µ–±—Ä–∞ 10–ë - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:25-10:10
        prisma.schedule.create({
            data: {
                studyPlanId: studyPlans[0].id,
                groupId: groups[1].id,
                teacherId: teachers[0].teacher.id,
                classroomId: classrooms[0].id,
                dayOfWeek: 1,
                startTime: '09:25',
                endTime: '10:10',
            },
        }),
        // –ë–∏–æ–ª–æ–≥–∏—è 10–ë - –í—Ç–æ—Ä–Ω–∏–∫ 10:25-11:10
        prisma.schedule.create({
            data: {
                studyPlanId: studyPlans[1].id,
                groupId: groups[1].id,
                teacherId: teachers[1].teacher.id,
                classroomId: classrooms[2].id,
                dayOfWeek: 2, // –í—Ç–æ—Ä–Ω–∏–∫
                startTime: '10:25',
                endTime: '11:10',
            },
        }),
        // –§–∏–∑–∏–∫–∞ 11–ê - –°—Ä–µ–¥–∞ 11:25-12:10
        prisma.schedule.create({
            data: {
                studyPlanId: studyPlans[2].id,
                groupId: groups[2].id,
                teacherId: teachers[2].teacher.id,
                classroomId: classrooms[2].id,
                dayOfWeek: 3, // –°—Ä–µ–¥–∞
                startTime: '11:25',
                endTime: '12:10',
            },
        }),
    ]);

    console.log('üìñ –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏...');

    // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –∞–ª–≥–µ–±—Ä—ã
    const lessons = await Promise.all([
        prisma.lesson.create({
            data: {
                name: '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è',
                description: '–†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏',
                studyPlanId: studyPlans[0].id,
                date: new Date('2024-09-02T08:30:00Z'),
            },
        }),
        prisma.lesson.create({
            data: {
                name: '–§–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è',
                description: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è',
                studyPlanId: studyPlans[0].id,
                date: new Date('2024-09-09T08:30:00Z'),
            },
        }),
        prisma.lesson.create({
            data: {
                name: '–¢–µ–æ—Ä–µ–º–∞ –í–∏–µ—Ç–∞',
                description: '–ò–∑—É—á–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ–º—ã –í–∏–µ—Ç–∞ –∏ –µ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
                studyPlanId: studyPlans[0].id,
                date: new Date('2024-09-16T08:30:00Z'),
            },
        }),
        // –£—Ä–æ–∫–∏ –±–∏–æ–ª–æ–≥–∏–∏
        prisma.lesson.create({
            data: {
                name: '–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏',
                description: '–û—Å–Ω–æ–≤—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏, —Å—Ç—Ä–æ–µ–Ω–∏–µ —ç—É–∫–∞—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–µ—Ç–∫–∏',
                studyPlanId: studyPlans[1].id,
                date: new Date('2024-09-03T10:25:00Z'),
            },
        }),
        prisma.lesson.create({
            data: {
                name: '–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑',
                description: '–ü—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞ —É —Ä–∞—Å—Ç–µ–Ω–∏–π',
                studyPlanId: studyPlans[1].id,
                date: new Date('2024-09-10T10:25:00Z'),
            },
        }),
        // –£—Ä–æ–∫–∏ —Ñ–∏–∑–∏–∫–∏
        prisma.lesson.create({
            data: {
                name: '–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ-–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–æ—Ä–∏—è',
                description: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ú–ö–¢',
                studyPlanId: studyPlans[2].id,
                date: new Date('2024-09-04T11:25:00Z'),
            },
        }),
    ]);

    console.log('üéØ –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Ä–æ–∫–æ–≤
    await Promise.all([
        prisma.materials.create({
            data: {
                lecture: '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è - —ç—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–∞ ax¬≤ + bx + c = 0, –≥–¥–µ a ‚â† 0...',
                videoUrl: 'https://www.youtube.com/watch?v=example1',
                presentationUrl: 'https://docs.google.com/presentation/d/example1',
                lesson: {
                    connect: { id: lessons[0].id },
                },
            },
        }),
        prisma.materials.create({
            data: {
                lecture: '–§–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è...',
                videoUrl: 'https://www.youtube.com/watch?v=example2',
                lesson: {
                    connect: { id: lessons[1].id },
                },
            },
        }),
    ]);

    console.log('üí∞ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏...');

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    await Promise.all([
        // –ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ê–π–¥—ã –ö–∞–∑—ã–±–µ–∫–æ–≤–æ–π
        prisma.payment.create({
            data: {
                studentId: studentUsers[0].student.id,
                serviceType: 'tuition',
                serviceName: '–û–±—É—á–µ–Ω–∏–µ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2024',
                amount: 45000,
                currency: 'KZT',
                dueDate: new Date('2024-09-01'),
                status: 'paid',
                paymentDate: new Date('2024-08-28'),
                paidAmount: 45000,
            },
        }),
        prisma.payment.create({
            data: {
                studentId: studentUsers[0].student.id,
                serviceType: 'meals',
                serviceName: '–ü–∏—Ç–∞–Ω–∏–µ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2024',
                amount: 15000,
                currency: 'KZT',
                dueDate: new Date('2024-09-01'),
                status: 'paid',
                paymentDate: new Date('2024-08-30'),
                paidAmount: 15000,
            },
        }),
        // –ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ê—Ä–º–∞–Ω–∞ –ñ–∞–∫–∏–ø–æ–≤–∞
        prisma.payment.create({
            data: {
                studentId: studentUsers[1].student.id,
                serviceType: 'tuition',
                serviceName: '–û–±—É—á–µ–Ω–∏–µ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2024',
                amount: 45000,
                currency: 'KZT',
                dueDate: new Date('2024-09-01'),
                status: 'unpaid',
            },
        }),
        prisma.payment.create({
            data: {
                studentId: studentUsers[1].student.id,
                serviceType: 'transportation',
                serviceName: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2024',
                amount: 8000,
                currency: 'KZT',
                dueDate: new Date('2024-09-15'),
                status: 'partial',
                paymentDate: new Date('2024-09-10'),
                paidAmount: 4000,
            },
        }),
        // –ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è –î–∞–Ω—ã –°–µ—Ä–∞–ª–∏–µ–≤–æ–π
        prisma.payment.create({
            data: {
                studentId: studentUsers[2].student.id,
                serviceType: 'tuition',
                serviceName: '–û–±—É—á–µ–Ω–∏–µ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2024',
                amount: 45000,
                currency: 'KZT',
                dueDate: new Date('2024-09-01'),
                status: 'overdue',
            },
        }),
        prisma.payment.create({
            data: {
                studentId: studentUsers[2].student.id,
                serviceType: 'extra',
                serviceName: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
                amount: 25000,
                currency: 'KZT',
                dueDate: new Date('2024-09-20'),
                status: 'unpaid',
            },
        }),
        // –ü–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ë–µ–∫–∑–∞—Ç–∞ –û—Ä–∞–∑–±–∞–µ–≤–∞
        prisma.payment.create({
            data: {
                studentId: studentUsers[3].student.id,
                serviceType: 'tuition',
                serviceName: '–û–±—É—á–µ–Ω–∏–µ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2024',
                amount: 45000,
                currency: 'KZT',
                dueDate: new Date('2024-09-01'),
                status: 'paid',
                paymentDate: new Date('2024-08-25'),
                paidAmount: 45000,
            },
        }),
    ]);

    console.log('üíº –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±—é–¥–∂–µ—Ç–∞...');

    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±—é–¥–∂–µ—Ç–∞
    await Promise.all([
        // –î–æ—Ö–æ–¥—ã
        prisma.budgetItem.create({
            data: {
                name: '–û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ',
                type: 'INCOME',
                category: 'tuition',
                plannedAmount: 5000000,
                actualAmount: 4200000,
                currency: 'KZT',
                period: '2024 Q4',
                responsible: '–ö–∞—Å—ã–º–æ–≤–∞ –ì.–°.',
                status: 'ACTIVE',
                description: '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –æ—Ç –ø–ª–∞—Ç—ã –∑–∞ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤',
            },
        }),
        prisma.budgetItem.create({
            data: {
                name: '–ì—Ä–∞–Ω—Ç—ã –∏ —Å—É–±—Å–∏–¥–∏–∏',
                type: 'INCOME',
                category: 'grants',
                plannedAmount: 1200000,
                actualAmount: 1200000,
                currency: 'KZT',
                period: '2024 Q4',
                responsible: '–ö–∞—Å—ã–º–æ–≤–∞ –ì.–°.',
                status: 'ACTIVE',
                description: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω—Ç—ã –∏ —Å—É–±—Å–∏–¥–∏–∏ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            },
        }),
        prisma.budgetItem.create({
            data: {
                name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                type: 'INCOME',
                category: 'services',
                plannedAmount: 300000,
                actualAmount: 180000,
                currency: 'KZT',
                period: '2024 Q4',
                responsible: '–ö–∞—Å—ã–º–æ–≤–∞ –ì.–°.',
                status: 'ACTIVE',
                description: '–î–æ—Ö–æ–¥—ã –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥',
            },
        }),
        // –†–∞—Å—Ö–æ–¥—ã
        prisma.budgetItem.create({
            data: {
                name: '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π',
                type: 'EXPENSE',
                category: 'salaries',
                plannedAmount: 3200000,
                actualAmount: 3150000,
                currency: 'KZT',
                period: '2024 Q4',
                responsible: '–ö–∞—Å—ã–º–æ–≤–∞ –ì.–°.',
                status: 'ACTIVE',
                description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞',
            },
        }),
        prisma.budgetItem.create({
            data: {
                name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                type: 'EXPENSE',
                category: 'utilities',
                plannedAmount: 800000,
                actualAmount: 850000,
                currency: 'KZT',
                period: '2024 Q4',
                responsible: '–ö–∞—Å—ã–º–æ–≤–∞ –ì.–°.',
                status: 'ACTIVE',
                description: '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –æ—Ç–æ–ø–ª–µ–Ω–∏–µ, –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
            },
        }),
        prisma.budgetItem.create({
            data: {
                name: '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
                type: 'EXPENSE',
                category: 'materials',
                plannedAmount: 500000,
                actualAmount: 320000,
                currency: 'KZT',
                period: '2024 Q4',
                responsible: '–ö–∞—Å—ã–º–æ–≤–∞ –ì.–°.',
                status: 'ACTIVE',
                description: '–ó–∞–∫—É–ø–∫–∞ —É—á–µ–±–Ω–∏–∫–æ–≤, –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏, –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            },
        }),
        prisma.budgetItem.create({
            data: {
                name: '–†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                type: 'EXPENSE',
                category: 'infrastructure',
                plannedAmount: 400000,
                actualAmount: 200000,
                currency: 'KZT',
                period: '2024 Q4',
                responsible: '–ö–∞—Å—ã–º–æ–≤–∞ –ì.–°.',
                status: 'ACTIVE',
                description: '–¢–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç –ø–æ–º–µ—â–µ–Ω–∏–π –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            },
        }),
    ]);

    console.log('üîî –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await Promise.all([
        prisma.notification.create({
            data: {
                userId: studentUsers[0].id,
                type: 'payment',
                message: '–û–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—É–ø–∏–ª–∞',
                read: false,
            },
        }),
        prisma.notification.create({
            data: {
                userId: studentUsers[1].id,
                type: 'payment',
                message: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
                read: false,
            },
        }),
        prisma.notification.create({
            data: {
                userId: teachers[0].id,
                type: 'lesson',
                message: '–£—Ä–æ–∫ "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç',
                read: true,
            },
        }),
    ]);

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–æ:');
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${1 + teachers.length + studentUsers.length + parents.length}`);
    console.log(`üë• –ì—Ä—É–ø–ø: ${groups.length}`);
    console.log(`üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–π: ${classrooms.length}`);
    console.log(`üìö –£—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: ${studyPlans.length}`);
    console.log(`üìñ –£—Ä–æ–∫–æ–≤: ${lessons.length}`);
    console.log('\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
    console.log('üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@abai.edu.kz / password123');
    console.log('üí∞ –§–∏–Ω–∞–Ω—Å–∏—Å—Ç: financist@abai.edu.kz / password123');
    console.log('üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ivanova@abai.edu.kz / password123');
    console.log('üéì –°—Ç—É–¥–µ–Ω—Ç: aida.student@abai.edu.kz / password123');
    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª–∏:');
    console.log('  üë© –ù–∞–∑—ã–º –ö–∞–∑—ã–±–µ–∫–æ–≤–∞: nazym.parent@abai.edu.kz / password123 (–º–∞—Ç—å –ê–π–¥—ã)');
    console.log('  üë® –ù—É—Ä–ª–∞–Ω –ö–∞–∑—ã–±–µ–∫–æ–≤: nurlan.parent@abai.edu.kz / password123 (–æ—Ç–µ—Ü –ê–π–¥—ã)');
    console.log('  üë® –ë–æ–ª–∞—Ç –ñ–∞–∫–∏–ø–æ–≤: bolat.parent@abai.edu.kz / password123 (–æ—Ç–µ—Ü –ê—Ä–º–∞–Ω–∞)');
    console.log('  üë© –ì—É–ª—å–Ω–∞—Ä–∞ –ñ–∞–∫–∏–ø–æ–≤–∞: gulnara.parent@abai.edu.kz / password123 (–º–∞—Ç—å –ê—Ä–º–∞–Ω–∞)');
    console.log('  üë® –ê—Å—ã–ª–±–µ–∫ –°–µ—Ä–∞–ª–∏–µ–≤: asylbek.parent@abai.edu.kz / password123 (–æ—Ç–µ—Ü –î–∞–Ω—ã)');
    console.log('  üë© –ñ–∞–Ω–∞—Ä –°–µ—Ä–∞–ª–∏–µ–≤–∞: zhanar.parent@abai.edu.kz / password123 (–º–∞—Ç—å –î–∞–Ω—ã)');
    console.log('  üë® –ê–ª–º–∞—Å –û—Ä–∞–∑–±–∞–µ–≤: almas.parent@abai.edu.kz / password123 (–æ—Ç–µ—Ü –ë–µ–∫–∑–∞—Ç–∞)');
}

main()
    .then(async () => {
        await prisma.$disconnect();
    })
    .catch(async (e) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
        await prisma.$disconnect();
        process.exit(1);
    });
