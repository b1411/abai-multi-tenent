import { PrismaClient } from '../generated/prisma';
import { ChatService } from '../src/chat/chat.service';
import { ParentsService } from '../src/parents/parents.service';
import { PrismaService } from '../src/prisma/prisma.service';

async function setupParentChats() {
  const prisma = new PrismaClient();
  const prismaService = new PrismaService();
  const chatService = new ChatService(prismaService);
  const parentsService = new ParentsService(prismaService, chatService);

  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Ç–æ–≤ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    const parents = await prisma.parent.findMany({
      where: { deletedAt: null },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            surname: true,
            email: true,
          },
        },
      },
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${parents.length} —Ä–æ–¥–∏—Ç–µ–ª–µ–π`);

    let successCount = 0;
    let errorCount = 0;

    for (const parent of parents) {
      try {
        console.log(`\nüë§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á–∞—Ç—ã –¥–ª—è ${parent.user.name} ${parent.user.surname}`);
        
        const createdChats = await parentsService.createDefaultChatsForParent(parent.userId);
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdChats.length} —á–∞—Ç–æ–≤:`);
        createdChats.forEach(chat => {
          if (chat.type === 'teacher') {
            console.log(`   - –£—á–∏—Ç–µ–ª—å: ${chat.teacher.name} ${chat.teacher.surname} (—Å—Ç—É–¥–µ–Ω—Ç: ${chat.student.name} ${chat.student.surname})`);
          } else if (chat.type === 'admin') {
            console.log(`   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: ${chat.admin.name} ${chat.admin.surname} (${chat.admin.role})`);
          }
        });
        
        successCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Ç–æ–≤ –¥–ª—è ${parent.user.name} ${parent.user.surname}:`, error.message);
        errorCount++;
      }
    }

    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} —Ä–æ–¥–∏—Ç–µ–ª–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  setupParentChats()
    .catch((error) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { setupParentChats };
