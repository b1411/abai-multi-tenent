import { Logger } from '@nestjs/common';
import { ChatService } from './chat.service';
import { CreateMessageDto } from './dto/create-message.dto';
import { JwtService } from '../jwt/jwt.service';
import { NotificationsService } from '../notifications/notifications.service';
import {
  ConnectedSocket,
  MessageBody,
  SubscribeMessage,
  WebSocketGateway,
  WebSocketServer,
  OnGatewayConnection,
  OnGatewayDisconnect
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';

interface AuthenticatedSocket extends Socket {
  userId?: number;
}

@WebSocketGateway({
  namespace: 'chat',
  cors: {
    origin: process.env.FRONTEND_URL || 'http://localhost:5173',
    credentials: true,
  },
})
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server: Server;

  private readonly logger = new Logger(ChatGateway.name);
  private connectedUsers = new Map<number, string>(); // userId -> socketId

  constructor(
    private readonly chatService: ChatService,
    private readonly jwtService: JwtService,
    private readonly notificationsService: NotificationsService,
  ) { }

  async handleConnection(client: AuthenticatedSocket) {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query –∏–ª–∏ headers
      const token = client.handshake?.auth?.token || client.handshake?.query?.token;

      if (!token) {
        this.logger.warn('Client connected without token');
        client.disconnect?.();
        return;
      }

      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
      const payload = this.jwtService.verify(token as string);
      client.userId = parseInt(payload.id.toString());

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.connectedUsers.set(client.userId, client.id || '');

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
      await client.join?.(`user:${client.userId}`);

      // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–∞–º —á–∞—Ç–æ–≤
      const userChats = await this.chatService.getUserChats(client.userId);
      for (const chat of userChats) {
        await client.join?.(`chat:${chat.id}`);
      }

      this.logger.log(`User ${client.userId} connected with socket ${client.id}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      client.emit?.('connected', { userId: client.userId });

    } catch (error) {
      this.logger.error('Authentication failed', error);
      client.disconnect?.();
    }
  }

  handleDisconnect(client: AuthenticatedSocket) {
    if (client.userId) {
      this.connectedUsers.delete(client.userId);
      this.logger.log(`User ${client.userId} disconnected`);
    }
  }

  @SubscribeMessage('sendMessage')
  async handleSendMessage(
    @MessageBody() data: CreateMessageDto,
    @ConnectedSocket() client: AuthenticatedSocket,
  ) {
    try {
      if (!client.userId) {
        client.emit?.('error', { message: 'Unauthorized' });
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      const message = await this.chatService.sendMessage(client.userId, data);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const chat = await this.chatService.getChatInfo(data.chatId);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–Ω–ª–∞–π–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ
      const onlineUsersInChat = this.getOnlineUsersInChat(data.chatId);

      // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —á–∞—Ç–µ —Å–µ–π—á–∞—Å (–¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
      const offlineParticipants = chat.participants
        .filter(p => p.userId !== client.userId) // –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        .filter(p => !onlineUsersInChat.includes(p.userId)) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω –≤ —á–∞—Ç–µ
        .map(p => p.userId);

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (offlineParticipants.length > 0) {
        try {
          const senderName = message.sender?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

          await this.notificationsService.addNotification({
            userIds: offlineParticipants,
            type: 'NEW_MESSAGE',
            message: `${senderName}: ${message.content.length > 50 ? message.content.substring(0, 50) + '...' : message.content}`,
            url: `/chat?chatId=${data.chatId}`,
            createdBy: client.userId,
          });

          this.logger.log(`Created notifications for ${offlineParticipants.length} offline users in chat ${data.chatId}`);
        } catch (notificationError) {
          this.logger.error('Failed to create notifications:', notificationError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
      client.to?.(`chat:${data.chatId}`)?.emit?.('newMessage', {
        message,
        chatId: data.chatId,
      });

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      client.emit?.('messageSent', { message });

      this.logger.log(`Message sent from user ${client.userId} to chat ${data.chatId}`);

    } catch (error) {
      this.logger.error('Error sending message', error);
      client.emit?.('error', { message: 'Failed to send message' });
    }
  }

  @SubscribeMessage('joinChat')
  async handleJoinChat(
    @MessageBody() data: { chatId: number },
    @ConnectedSocket() client: AuthenticatedSocket,
  ) {
    try {
      if (!client.userId) {
        client.emit?.('error', { message: 'Unauthorized' });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
      const chat = await this.chatService.getChatInfo(data.chatId);
      const isParticipant = chat.participants.some(p => p.userId === client.userId);

      if (!isParticipant) {
        client.emit?.('error', { message: 'Not a chat participant' });
        return;
      }

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞
      await client.join?.(`chat:${data.chatId}`);

      // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      await this.chatService.markMessagesAsRead(data.chatId, client.userId);

      client.emit?.('joinedChat', { chatId: data.chatId });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω –≤ —á–∞—Ç–µ
      client.to?.(`chat:${data.chatId}`)?.emit?.('userJoined', {
        userId: client.userId,
        chatId: data.chatId,
      });

      this.logger.log(`User ${client.userId} joined chat ${data.chatId}`);

    } catch (error) {
      this.logger.error('Error joining chat', error);
      client.emit?.('error', { message: 'Failed to join chat' });
    }
  }

  @SubscribeMessage('leaveChat')
  async handleLeaveChat(
    @MessageBody() data: { chatId: number },
    @ConnectedSocket() client: AuthenticatedSocket,
  ) {
    try {
      if (!client.userId) return;

      await client.leave?.(`chat:${data.chatId}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç
      client.to?.(`chat:${data.chatId}`)?.emit?.('userLeft', {
        userId: client.userId,
        chatId: data.chatId,
      });

      client.emit?.('leftChat', { chatId: data.chatId });

      this.logger.log(`User ${client.userId} left chat ${data.chatId}`);

    } catch (error) {
      this.logger.error('Error leaving chat', error);
    }
  }

  @SubscribeMessage('typing')
  handleTyping(
    @MessageBody() data: { chatId: number; isTyping: boolean },
    @ConnectedSocket() client: AuthenticatedSocket,
  ) {
    if (!client.userId) {
      this.logger.warn('Typing event from unauthenticated client');
      return;
    }

    this.logger.log(`üìù Typing event received from user ${client.userId}: ${data.isTyping ? 'started' : 'stopped'} typing in chat ${data.chatId}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
    const eventData = {
      userId: client.userId,
      chatId: data.chatId,
      isTyping: data.isTyping,
    };

    this.logger.log(`üì§ Broadcasting userTyping event to chat:${data.chatId}`, eventData);

    client.to?.(`chat:${data.chatId}`)?.emit?.('userTyping', eventData);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
  notifyNewChat(chatId: number, participantIds: number[]) {
    for (const userId of participantIds) {
      if (this.connectedUsers.has(userId)) {
        this.server.to(`user:${userId}`).emit('newChat', { chatId });
      }
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–µ
  notifyChatUpdate(chatId: number, participantIds: number[], updateData: any) {
    for (const userId of participantIds) {
      if (this.connectedUsers.has(userId)) {
        this.server.to?.(`user:${userId}`)?.emit?.('chatUpdated', {
          chatId,
          ...updateData
        });
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  isUserOnline(userId: number): boolean {
    return this.connectedUsers.has(userId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
  getOnlineUsersInChat(chatId: number): number[] {
    const room = this.server.sockets?.adapter?.rooms?.get(`chat:${chatId}`);
    if (!room) return [];

    const onlineUsers: number[] = [];
    for (const socketId of room) {
      const socket = this.server.sockets?.sockets?.get(socketId) as AuthenticatedSocket;
      if (socket?.userId) {
        onlineUsers.push(socket.userId);
      }
    }
    return onlineUsers;
  }
}
