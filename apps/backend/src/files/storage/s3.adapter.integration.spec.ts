import { ConfigService } from '@nestjs/config';
import { S3StorageAdapter } from './s3.adapter';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config({ path: '../../../../../.env' });

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è S3StorageAdapter
 *
 * –í–ê–ñ–ù–û: –≠—Ç–∏ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3!
 * –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ credentials:
 * - AWS_S3_BUCKET
 * - AWS_REGION
 * - AWS_ACCESS_KEY_ID
 * - AWS_SECRET_ACCESS_KEY
 * - AWS_S3_ENDPOINT (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â)
 *
 * –ó–∞–ø—É—Å–∫: npm test -- s3.adapter.integration.spec.ts
 */
describe('S3StorageAdapter Integration Tests', () => {
  let adapter: S3StorageAdapter;
  let configService: ConfigService;
  let uploadedFileUrl: string;

  beforeAll(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = [
      'AWS_S3_BUCKET',
      'AWS_REGION',
      'AWS_ACCESS_KEY_ID',
      'AWS_SECRET_ACCESS_KEY',
    ];

    const missingVars = requiredEnvVars.filter((varName) => !process.env[varName]);

    if (missingVars.length > 0) {
      throw new Error(
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(', ')}`,
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π ConfigService —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    configService = new ConfigService(process.env);
    adapter = new S3StorageAdapter(configService);
  });

  describe('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â—É', async () => {
      const isAvailable = await adapter.isAvailable();
      expect(isAvailable).toBe(true);
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  });

  describe('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤', () => {
    it('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª', async () => {
      const mockFile = {
        buffer: Buffer.from('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ S3 –∞–¥–∞–ø—Ç–µ—Ä–∞'),
        mimetype: 'text/plain',
        size: 87,
        originalname: 'test.txt',
      } as Express.Multer.File;

      const timestamp = Date.now();
      const fileName = `test-${timestamp}.txt`;

      const result = await adapter.upload(mockFile, 'test-uploads', fileName);

      expect(result).toBeDefined();
      expect(result.url).toContain('abai-bucket');
      expect(result.url).toContain('test-uploads');
      expect(result.pathname).toBe(`test-uploads/${fileName}`);
      expect(result.size).toBe(87);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      uploadedFileUrl = result.url;

      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', result.url);
    }, 15000);

    it('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', async () => {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –±—É—Ñ–µ—Ä–∞
      const mockImageBuffer = Buffer.from(
        'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==',
        'base64',
      );

      const mockFile = {
        buffer: mockImageBuffer,
        mimetype: 'image/png',
        size: mockImageBuffer.length,
        originalname: 'test-image.png',
      } as Express.Multer.File;

      const timestamp = Date.now();
      const fileName = `test-image-${timestamp}.png`;

      const result = await adapter.upload(mockFile, 'test-uploads', fileName);

      expect(result).toBeDefined();
      expect(result.url).toContain('.png');
      expect(result.mimetype || mockFile.mimetype).toBe('image/png');

      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', result.url);

      // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await adapter.delete(result.url);
    }, 15000);

    it('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
      const mockFile = {
        buffer: Buffer.from('–¢–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π'),
        mimetype: 'text/plain',
        size: 34,
        originalname: '—Ç–µ—Å—Ç.txt',
      } as Express.Multer.File;

      const timestamp = Date.now();
      const fileName = `test-cyrillic-${timestamp}.txt`;

      const result = await adapter.upload(mockFile, 'avatars', fileName);

      expect(result).toBeDefined();
      expect(result.pathname).toContain('avatars');

      console.log('‚úÖ –§–∞–π–ª —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', result.url);

      // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await adapter.delete(result.url);
    }, 15000);
  });

  describe('–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤', () => {
    it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª', async () => {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const mockFile = {
        buffer: Buffer.from('–§–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'),
        mimetype: 'text/plain',
        size: 35,
        originalname: 'to-delete.txt',
      } as Express.Multer.File;

      const timestamp = Date.now();
      const fileName = `to-delete-${timestamp}.txt`;

      const uploadResult = await adapter.upload(mockFile, 'test-uploads', fileName);

      // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º
      await expect(adapter.delete(uploadResult.url)).resolves.not.toThrow();

      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', uploadResult.url);
    }, 20000);

    it('–Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞', async () => {
      const fakeUrl = 'test-uploads/non-existent-file.txt';

      // S3 –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
      await expect(adapter.delete(fakeUrl)).resolves.not.toThrow();
    }, 10000);
  });

  describe('–†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
      const categories = ['avatars', 'documents', 'homework-submissions'];
      const uploadedFiles: string[] = [];

      for (const category of categories) {
        const mockFile = {
          buffer: Buffer.from(`–§–∞–π–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`),
          mimetype: 'text/plain',
          size: 50,
          originalname: 'test.txt',
        } as Express.Multer.File;

        const timestamp = Date.now();
        const fileName = `test-${timestamp}.txt`;

        const result = await adapter.upload(mockFile, category, fileName);

        expect(result.pathname).toContain(category);
        uploadedFiles.push(result.url);

        console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}":`, result.url);

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        await new Promise((resolve) => setTimeout(resolve, 500));
      }

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      for (const url of uploadedFiles) {
        await adapter.delete(url);
      }
    }, 30000);
  });

  afterAll(async () => {
    // –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    if (uploadedFileUrl) {
      try {
        await adapter.delete(uploadedFileUrl);
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω —Ñ–∞–π–ª', uploadedFileUrl);
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
      }
    }
  });
});
