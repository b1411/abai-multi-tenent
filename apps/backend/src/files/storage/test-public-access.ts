#!/usr/bin/env tsx

/**
 * –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –≤ S3
 */

import { ConfigService } from '@nestjs/config';
import { S3StorageAdapter } from './s3.adapter';
import * as dotenv from 'dotenv';
import * as path from 'path';

dotenv.config({ path: path.join(__dirname, '../../../../../.env') });

async function testPublicAccess() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –≤ S3...\n');

  const configService = new ConfigService(process.env);
  const adapter = new S3StorageAdapter(configService);

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    console.log('1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const testContent = `–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n–í—Ä–µ–º—è: ${new Date().toISOString()}`;
    const mockFile = {
      buffer: Buffer.from(testContent),
      mimetype: 'text/plain',
      size: Buffer.byteLength(testContent),
      originalname: 'test-public-access.txt',
    } as Express.Multer.File;

    const timestamp = Date.now();
    const fileName = `public-test-${timestamp}.txt`;

    const uploadResult = await adapter.upload(mockFile, 'test', fileName);
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log(`   URL: ${uploadResult.url}\n`);

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
    const urlsToTest = [
      uploadResult.url,
      `https://s3.kz-1.srvstorage.kz/abai-bucket/test/${fileName}`,
      `https://abai-bucket.s3.kz-1.srvstorage.kz/test/${fileName}`,
    ];

    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ —Ä–∞–∑–Ω—ã–º URL...\n');

    for (const url of urlsToTest) {
      console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º: ${url}`);
      try {
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'User-Agent': 'Mozilla/5.0',
          },
        });

        console.log(`   HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`   Status text: ${response.statusText}`);

        if (response.ok) {
          const content = await response.text();
          console.log(`   ‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω!`);
          console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${content.substring(0, 50)}...`);
          console.log('');

          // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
          await adapter.delete(uploadResult.url);
          console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω\n');

          console.log('üéâ –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
          console.log(`‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç URL: ${url}`);
          return;
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞\n`);

          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏
          const errorText = await response.text();
          if (errorText) {
            console.log(`   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${errorText.substring(0, 200)}\n`);
          }
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
      }
    }

    console.log('\n‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω URL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—É–±–ª–∏—á–Ω–æ!');
    console.log('\nüìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ srvstorage.kz:\n');
    console.log('1. –ó–∞–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ bucket "abai-bucket"');
    console.log('2. –ù–∞–π–¥–∏ —Ä–∞–∑–¥–µ–ª "–ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø" –∏–ª–∏ "ACL" –∏–ª–∏ "Bucket Policy"');
    console.log('3. –í–∫–ª—é—á–∏ –ø—É–±–ª–∏—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤');
    console.log('4. –°–æ—Ö—Ä–∞–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n');
    console.log('–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: apps/backend/src/files/storage/SRVSTORAGE_SETUP.md');

    // –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é
    console.log(`\nüí° –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ:`);
    console.log(uploadResult.url);

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.stack) {
      console.error(`\nüìö Stack trace:\n${error.stack}`);
    }
    process.exit(1);
  }
}

testPublicAccess().catch((error) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
