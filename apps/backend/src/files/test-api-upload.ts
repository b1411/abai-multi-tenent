#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API
 * –≠–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   npm run start:dev  # –≤ –æ–¥–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
 *   npx tsx apps/backend/src/files/test-api-upload.ts  # –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
 */

import * as fs from 'fs';
import * as path from 'path';

const API_URL = process.env.VITE_API_URL || 'http://localhost:8000';
const TEST_TOKEN = 'your-test-token'; // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω

interface UploadedFile {
  id: number;
  name: string;
  url: string;
  type: string;
  size: number;
  category: string;
}

async function uploadFile(
  filePath: string,
  category: string,
  token?: string,
): Promise<UploadedFile> {
  const formData = new FormData();

  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ–º Blob
  const fileBuffer = fs.readFileSync(filePath);
  const blob = new Blob([fileBuffer]);
  const fileName = path.basename(filePath);

  formData.append('file', blob, fileName);
  formData.append('category', category);

  const headers: HeadersInit = {
    // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å boundary
  };

  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  const response = await fetch(`${API_URL}/files/upload`, {
    method: 'POST',
    headers,
    body: formData,
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Upload failed: ${response.status} - ${error}`);
  }

  return response.json();
}

async function uploadMultipleFiles(
  filePaths: string[],
  category: string,
  token?: string,
): Promise<UploadedFile[]> {
  const formData = new FormData();

  for (const filePath of filePaths) {
    const fileBuffer = fs.readFileSync(filePath);
    const blob = new Blob([fileBuffer]);
    const fileName = path.basename(filePath);
    formData.append('files', blob, fileName);
  }

  formData.append('category', category);

  const headers: HeadersInit = {};
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  const response = await fetch(`${API_URL}/files/upload-multiple`, {
    method: 'POST',
    headers,
    body: formData,
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Upload failed: ${response.status} - ${error}`);
  }

  return response.json();
}

async function deleteFile(fileId: number, token?: string): Promise<void> {
  const headers: HeadersInit = {};
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  const response = await fetch(`${API_URL}/files/${fileId}`, {
    method: 'DELETE',
    headers,
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Delete failed: ${response.status} - ${error}`);
  }
}

async function testApiUpload() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API...\n');
  console.log(`API URL: ${API_URL}\n`);

  const uploadedFiles: number[] = [];

  try {
    // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const testFilePath = path.join(__dirname, 'api-test-file.txt');
    fs.writeFileSync(testFilePath, `–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª\n–í—Ä–µ–º—è: ${new Date().toISOString()}`);

    try {
      const uploadedFile = await uploadFile(testFilePath, 'test', TEST_TOKEN);

      console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ API');
      console.log(`   ID: ${uploadedFile.id}`);
      console.log(`   URL: ${uploadedFile.url}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${uploadedFile.size} –±–∞–π—Ç`);

      uploadedFiles.push(uploadedFile.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
      const fileResponse = await fetch(uploadedFile.url);
      if (fileResponse.ok) {
        console.log(`‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL (HTTP ${fileResponse.status})\n`);
      } else {
        console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP ${fileResponse.status})\n`);
      }
    } finally {
      if (fs.existsSync(testFilePath)) {
        fs.unlinkSync(testFilePath);
      }
    }

    // –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const imagePath = path.join(__dirname, 'api-test-image.png');
    const base64Image =
      'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==';
    fs.writeFileSync(imagePath, Buffer.from(base64Image, 'base64'));

    try {
      const uploadedImage = await uploadFile(imagePath, 'avatars', TEST_TOKEN);

      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ API');
      console.log(`   ID: ${uploadedImage.id}`);
      console.log(`   URL: ${uploadedImage.url}`);

      uploadedFiles.push(uploadedImage.id);

      const imageResponse = await fetch(uploadedImage.url);
      if (imageResponse.ok) {
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ (HTTP ${imageResponse.status})\n`);
      }
    } finally {
      if (fs.existsSync(imagePath)) {
        fs.unlinkSync(imagePath);
      }
    }

    // –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...');
    const file1 = path.join(__dirname, 'multi-test-1.txt');
    const file2 = path.join(__dirname, 'multi-test-2.txt');

    fs.writeFileSync(file1, '–ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª');
    fs.writeFileSync(file2, '–í—Ç–æ—Ä–æ–π —Ñ–∞–π–ª');

    try {
      const uploadedMultiple = await uploadMultipleFiles([file1, file2], 'documents', TEST_TOKEN);

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadedMultiple.length} —Ñ–∞–π–ª–æ–≤`);
      uploadedMultiple.forEach((file, index) => {
        console.log(`   –§–∞–π–ª ${index + 1}: ${file.url}`);
        uploadedFiles.push(file.id);
      });
      console.log('');
    } finally {
      if (fs.existsSync(file1)) fs.unlinkSync(file1);
      if (fs.existsSync(file2)) fs.unlinkSync(file2);
    }

    // –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    for (const fileId of uploadedFiles) {
      await deleteFile(fileId, TEST_TOKEN);
      console.log(`‚úÖ –§–∞–π–ª ${fileId} —É–¥–∞–ª–µ–Ω`);
    }
    console.log('');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n');
    console.log('‚ú® API –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚ú® –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ S3 –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—É–±–ª–∏—á–Ω–æ');
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);

    if (error.message.includes('401') || error.message.includes('403')) {
      console.log('\nüí° –°–æ–≤–µ—Ç: –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
      console.log('   –û–±–Ω–æ–≤–∏ TEST_TOKEN –≤ —Å–∫—Ä–∏–ø—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏ AuthGuard –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° –°–æ–≤–µ—Ç: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      console.log('   –ó–∞–ø—É—Å—Ç–∏: npm run start:dev');
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (const fileId of uploadedFiles) {
      try {
        await deleteFile(fileId, TEST_TOKEN);
      } catch (cleanupError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
      }
    }

    process.exit(1);
  }
}

testApiUpload().catch((error) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
