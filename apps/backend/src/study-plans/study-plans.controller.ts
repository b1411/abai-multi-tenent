import { Body, Controller, Delete, Get, Param, Patch, Post, UseGuards, Query, ParseIntPipe, Req } from '@nestjs/common';
import { StudyPlansService } from './study-plans.service';
import { StudyPlanFilterDto } from './dto/study-plan-filter.dto';
import { AuthGuard } from 'src/common/guards/auth.guard';
import { PermissionGuard, RequirePermission } from 'src/common/guards/permission.guard';
import { ApiBearerAuth, ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';
import { CreateStudyPlanDto } from './dto/create-study-plan.dto';
import { UpdateStudyPlanDto } from './dto/update-study-plan-dto';
import { StudyPlan } from './entities/study-plan.entity';
import { PaginateResponseDto } from 'src/common/dtos/paginate.dto';

@Controller('study-plans')
@ApiTags('Study Plans')
@ApiBearerAuth('JWT-auth')
@UseGuards(AuthGuard, PermissionGuard)
export class StudyPlansController {
  constructor(private readonly studyPlansService: StudyPlansService) { }

  @Get()
  @RequirePermission('study-plans', 'read')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã' })
  @ApiResponse({ 
    status: 200, 
    description: '–°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π',
    type: PaginateResponseDto<StudyPlan>
  })
  findAll(@Query() filter: StudyPlanFilterDto, @Req() req: any): Promise<PaginateResponseDto<StudyPlan>> {
    console.log(`üìö StudyPlansController.findAll: User role: ${req.user.role}, ID: ${req.user.id}`);
    
    // –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö –ø–ª–∞–Ω—ã
    if (req.user.role === 'STUDENT') {
      console.log(`üë®‚Äçüéì StudyPlansController: Returning student plans for user ${req.user.id}`);
      return this.studyPlansService.findStudentStudyPlans(filter, req.user.id);
    }
    
    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã
    console.log(`üë®‚Äçüíº StudyPlansController: Returning all plans for ${req.user.role}`);
    return this.studyPlansService.findAll(filter);
  }

  @Get('me')
  @RequirePermission('study-plans', 'read', { scope: 'OWN' })
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞' })
  @ApiResponse({ 
    status: 200, 
    description: '–°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞',
    type: PaginateResponseDto<StudyPlan>
  })
  findMyStudyPlans(@Query() filter: StudyPlanFilterDto, @Req() req: any): Promise<PaginateResponseDto<StudyPlan>> {
    return this.studyPlansService.findStudentStudyPlans(filter, req.user.id);
  }

  @Get(':id')
  @RequirePermission('study-plans', 'read', { scope: 'ASSIGNED' })
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ ID' })
  @ApiParam({ name: 'id', description: 'ID —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞' })
  @ApiResponse({ 
    status: 200, 
    description: '–î–∞–Ω–Ω—ã–µ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞',
    type: StudyPlan
  })
  @ApiResponse({ status: 404, description: '–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  findOne(@Param('id', ParseIntPipe) id: number): Promise<StudyPlan> {
    return this.studyPlansService.findOne(id);
  }

  @Post()
  @RequirePermission('study-plans', 'create')
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω' })
  @ApiResponse({ 
    status: 201, 
    description: '–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
    type: StudyPlan
  })
  @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  create(@Body() createStudyPlanDto: CreateStudyPlanDto): Promise<StudyPlan> {
    return this.studyPlansService.create(createStudyPlanDto);
  }

  @Patch(':id')
  @RequirePermission('study-plans', 'update')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω' })
  @ApiParam({ name: 'id', description: 'ID —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞' })
  @ApiResponse({ 
    status: 200, 
    description: '–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
    type: StudyPlan
  })
  @ApiResponse({ status: 404, description: '–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  update(@Param('id', ParseIntPipe) id: number, @Body() updateStudyPlanDto: UpdateStudyPlanDto): Promise<StudyPlan> {
    return this.studyPlansService.update(id, updateStudyPlanDto);
  }

  @Delete(':id')
  @RequirePermission('study-plans', 'delete')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)' })
  @ApiParam({ name: 'id', description: 'ID —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞' })
  @ApiResponse({ 
    status: 200, 
    description: '–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
    type: StudyPlan
  })
  @ApiResponse({ status: 404, description: '–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  remove(@Param('id', ParseIntPipe) id: number): Promise<StudyPlan> {
    return this.studyPlansService.softRemove(id);
  }
}
