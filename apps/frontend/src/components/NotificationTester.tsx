import React, { useState } from 'react';
import { notificationService } from '../services/notificationService';

export function NotificationTester() {
  const [userId, setUserId] = useState('1');
  const [message, setMessage] = useState('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
  const [type, setType] = useState('TEST_NOTIFICATION');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState('');

  const sendTestNotification = async () => {
    setLoading(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
      const token = localStorage.getItem('token');
      if (!token) {
        setResult('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const response = await fetch(`${import.meta.env.VITE_API_URL}notifications`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          userId: parseInt(userId),
          type,
          message,
          url: '/notifications'
        })
      });

      if (response.ok) {
        const data = await response.json();
        setResult(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: ${data.id}`);
      } else {
        const error = await response.text();
        setResult(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
      }
    } catch (error) {
      setResult(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setLoading(false);
    }
  };

  const testBulkNotifications = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setResult('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.');
        return;
      }

      const response = await fetch(`${import.meta.env.VITE_API_URL}notifications/add`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          userIds: [1, 2, 3], // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
          type: 'BULK_TEST',
          message: '–¢–µ—Å—Ç–æ–≤–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
          url: '/dashboard'
        })
      });

      if (response.ok) {
        const data = await response.json();
        setResult(`‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${data.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      } else {
        const error = await response.text();
        setResult(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
      }
    } catch (error) {
      setResult(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-xl font-bold mb-4">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          </label>
          <input
            type="number"
            value={userId}
            onChange={(e) => setUserId(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </label>
          <select
            value={type}
            onChange={(e) => setType(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="TEST_NOTIFICATION">–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</option>
            <option value="NEW_HOMEWORK">–ù–æ–≤–æ–µ –î–ó</option>
            <option value="NEW_QUIZ">–ù–æ–≤—ã–π —Ç–µ—Å—Ç</option>
            <option value="QUIZ_RESULT">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞</option>
            <option value="NEW_MESSAGE">–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –°–æ–æ–±—â–µ–Ω–∏–µ
          </label>
          <textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div className="flex gap-2">
          <button
            onClick={sendTestNotification}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}
          </button>

          <button
            onClick={testBulkNotifications}
            disabled={loading}
            className="flex-1 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 disabled:opacity-50"
          >
            {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞'}
          </button>
        </div>

        {result && (
          <div className={`p-3 rounded-md ${result.startsWith('‚úÖ') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
            {result}
          </div>
        )}
      </div>

      <div className="mt-6 p-4 bg-gray-50 rounded-md">
        <h3 className="font-medium mb-2">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
        <ol className="text-sm text-gray-600 space-y-1">
          <li>1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</li>
          <li>2. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1, 2, 3...)</li>
          <li>3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
          <li>4. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"</li>
          <li>5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —à–∞–ø–∫–µ</li>
          <li>6. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /notifications</li>
        </ol>
      </div>
    </div>
  );
}