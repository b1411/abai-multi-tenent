import { useState, useEffect, useCallback, useRef } from 'react';
import { io, Socket } from 'socket.io-client';
import { chatService, ChatRoom, ChatMessage, CreateChatDto, CreateMessageDto, UpdateMessageDto, User } from '../services/chatService';
import { useAuth } from './useAuth';

export const useChat = () => {
  const [chats, setChats] = useState<ChatRoom[]>([]);
  const [currentChat, setCurrentChat] = useState<ChatRoom | null>(null);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [messagesLoading, setMessagesLoading] = useState(false);
  const [sendingMessage, setSendingMessage] = useState(false);
  const [typingUsers, setTypingUsers] = useState<Set<number>>(new Set());
  const [isSocketConnected, setIsSocketConnected] = useState(false);
  const { user } = useAuth();
  
  const socketRef = useRef<Socket | null>(null);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO
  useEffect(() => {
    if (!user) return;

    const token = localStorage.getItem('authToken') || localStorage.getItem('token');
    if (!token) return;

    const baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:3000';
    const cleanUrl = baseUrl.replace(/\/+$/, '');

    console.log('üîó Connecting to Socket.IO...');
    
    const socket = io(`${cleanUrl}/chat`, {
      auth: {
        token: token
      },
      transports: ['websocket', 'polling'],
      upgrade: true,
      rememberUpgrade: true,
    });

    socketRef.current = socket;

    socket.on('connect', () => {
      console.log('‚úÖ Socket.IO connected');
      setIsSocketConnected(true);
      setError(null);
    });

    socket.on('disconnect', () => {
      console.log('‚ùå Socket.IO disconnected');
      setIsSocketConnected(false);
    });

    socket.on('error', (error: any) => {
      console.error('‚ùå Socket.IO error:', error);
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
    socket.on('newMessage', (data: { message: ChatMessage; chatId: number }) => {
      console.log('üì® New message received:', data);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
      if (currentChat && data.chatId === currentChat.id) {
        setMessages(prev => {
          const exists = prev.some(m => m.id === data.message.id);
          if (exists) return prev;
          return [...prev, data.message];
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
      setChats(prev => prev.map(chat => {
        if (chat.id === data.chatId) {
          // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
          const isMyMessage = user && data.message.senderId === user.id;
          // –ï—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç –∏–ª–∏ —ç—Ç–æ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—á–µ—Ç—á–∏–∫ = 0, –∏–Ω–∞—á–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
          const shouldIncrement = !isMyMessage && chat.id !== currentChat?.id;
          
          return { 
            ...chat, 
            lastMessage: data.message, 
            unreadCount: shouldIncrement ? (chat.unreadCount || 0) + 1 : 0
          };
        }
        return chat;
      }));
    });

    socket.on('messageSent', (data: { message: ChatMessage }) => {
      console.log('‚úÖ Message sent confirmation:', data);
      
      // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      if (currentChat && data.message.chatId === currentChat.id) {
        setMessages(prev => {
          // –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
          const tempMessageIndex = prev.findIndex(m => 
            m.content === data.message.content && 
            m.senderId === data.message.senderId &&
            m.id > 1000000000000 // –í—Ä–µ–º–µ–Ω–Ω—ã–µ ID –±–æ–ª—å—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          );
          
          if (tempMessageIndex !== -1) {
            // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
            const newMessages = [...prev];
            newMessages[tempMessageIndex] = data.message;
            return newMessages;
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const exists = prev.some(m => m.id === data.message.id);
            if (exists) return prev;
            return [...prev, data.message];
          }
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
      setChats(prev => prev.map(chat => 
        chat.id === data.message.chatId 
          ? { ...chat, lastMessage: data.message }
          : chat
      ));
    });

    socket.on('userTyping', (data: { userId: number; chatId: number; isTyping: boolean }) => {
      console.log('üëÄ userTyping event received:', data, {
        currentChatId: currentChat?.id,
        myUserId: user?.id,
        isForCurrentChat: currentChat && data.chatId === currentChat.id,
        isNotMyself: data.userId !== user?.id
      });
      
      if (currentChat && data.chatId === currentChat.id && data.userId !== user.id) {
        setTypingUsers(prev => {
          const newSet = new Set(prev);
          if (data.isTyping) {
            newSet.add(data.userId);
            console.log('‚úçÔ∏è Added user to typing:', data.userId, 'Total typing users:', newSet.size);
          } else {
            newSet.delete(data.userId);
            console.log('üõë Removed user from typing:', data.userId, 'Total typing users:', newSet.size);
          }
          return newSet;
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        if (data.isTyping) {
          setTimeout(() => {
            setTypingUsers(prev => {
              const newSet = new Set(prev);
              newSet.delete(data.userId);
              console.log('‚è∞ Auto-removed user from typing after timeout:', data.userId);
              return newSet;
            });
          }, 3000);
        }
      } else {
        console.log('üö´ userTyping event ignored because:', {
          noCurrentChat: !currentChat,
          wrongChat: currentChat && data.chatId !== currentChat.id,
          isMyself: data.userId === user?.id
        });
      }
    });

    socket.on('userJoined', (data: { userId: number; chatId: number }) => {
      console.log(`üëã User ${data.userId} joined chat ${data.chatId}`);
    });

    socket.on('userLeft', (data: { userId: number; chatId: number }) => {
      console.log(`üëã User ${data.userId} left chat ${data.chatId}`);
    });

    socket.on('newChat', (data: { chatId: number }) => {
      console.log(`üÜï New chat created: ${data.chatId}`);
      loadChats(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    });

    socket.on('joinedChat', (data: { chatId: number }) => {
      console.log(`‚úÖ Joined chat ${data.chatId}`);
    });

    socket.on('leftChat', (data: { chatId: number }) => {
      console.log(`‚úÖ Left chat ${data.chatId}`);
    });

    socket.on('connected', (data: { userId: number }) => {
      console.log(`‚úÖ User ${data.userId} connected`);
    });

    return () => {
      console.log('üîå Disconnecting Socket.IO...');
      socket.disconnect();
      socketRef.current = null;
      setIsSocketConnected(false);
    };
  }, [user, currentChat]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  const loadChats = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const chatsData = await chatService.getRecentChats();
      console.log('üìä Loaded chats with unreadCount:', chatsData.map(chat => ({
        id: chat.id,
        name: chat.name || 'No name',
        unreadCount: chat.unreadCount
      })));
      setChats(chatsData);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
      console.error('Error loading chats:', err);
    } finally {
      setLoading(false);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
  const loadMessages = useCallback(async (chatId: number, page: number = 1) => {
    try {
      setMessagesLoading(true);
      setError(null);
      const response = await chatService.getChatMessages(chatId, page);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å { messages: [...] } –∏–ª–∏ { data: [...] }
      const messages = (response as any)?.data || (response as any)?.messages || [];
      if (!Array.isArray(messages)) {
        console.warn('Messages data is not an array:', response);
        setMessages([]);
        return;
      }
      
      console.log('üì• Loaded messages:', messages);
      
      if (page === 1) {
        // –î–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –≤–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É)
        const sortedMessages = [...messages].sort((a, b) => 
          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        setMessages(sortedMessages);
      } else {
        // –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
        const sortedMessages = [...messages].sort((a, b) => 
          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        setMessages(prev => [...sortedMessages, ...prev]);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
      console.error('Error loading messages:', err);
    } finally {
      setMessagesLoading(false);
    }
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Socket.IO
  const sendMessage = useCallback(async (messageData: CreateMessageDto) => {
    if (!currentChat || !user) return;
    
    try {
      setSendingMessage(true);
      setError(null);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const tempMessage: ChatMessage = {
        id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
        content: messageData.content,
        senderId: user.id,
        chatId: messageData.chatId || currentChat.id,
        isRead: false,
        isEdited: false,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        replyToId: messageData.replyToId || undefined,
        sender: {
          id: user.id,
          name: user.name || '–í—ã',
          surname: user.surname || '',
          avatar: user.avatar
        },
        replyTo: undefined
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ UI (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
      setMessages(prev => [...prev, tempMessage]);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Socket.IO –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (socketRef.current && isSocketConnected) {
        console.log('üì§ Sending message via Socket.IO (optimistic update added)');
        
        socketRef.current.emit('sendMessage', messageData);
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        setTimeout(() => {
          setMessages(prev => prev.filter(msg => msg.id !== tempMessage.id));
        }, 10000);
        
        return Promise.resolve(null);
      } else {
        // Fallback –Ω–∞ HTTP API
        console.log('üì§ Sending message via HTTP (Socket.IO not connected)');
        
        const newMessage = await chatService.sendMessage(messageData);
        
        // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
        setMessages(prev => 
          prev.map(msg => msg.id === tempMessage.id ? newMessage : msg)
        );
        
        if (messageData.chatId) {
          setChats(prev => prev.map(chat => 
            chat.id === messageData.chatId 
              ? { ...chat, lastMessage: newMessage }
              : chat
          ));
        }
        
        return newMessage;
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      console.error('Error sending message:', err);
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setMessages(prev => prev.filter(msg => msg.id !== Date.now()));
      
      throw err;
    } finally {
      setSendingMessage(false);
    }
  }, [isSocketConnected, currentChat, user]);

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const updateMessage = useCallback(async (messageId: number, messageData: UpdateMessageDto) => {
    try {
      setError(null);
      const updatedMessage = await chatService.updateMessage(messageId, messageData);
      
      setMessages(prev => prev.map(msg => 
        msg.id === messageId ? updatedMessage : msg
      ));
      
      return updatedMessage;
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
      console.error('Error updating message:', err);
      throw err;
    }
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const deleteMessage = useCallback(async (messageId: number) => {
    try {
      setError(null);
      await chatService.deleteMessage(messageId);
      
      setMessages(prev => prev.filter(msg => msg.id !== messageId));
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
      console.error('Error deleting message:', err);
      throw err;
    }
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const createChat = useCallback(async (chatData: CreateChatDto) => {
    try {
      setLoading(true);
      setError(null);
      const newChat = await chatService.createChat(chatData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      setChats(prev => [newChat, ...prev]);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
      await loadChats();
      
      return newChat;
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
      console.error('Error creating chat:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [loadChats]);

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
  const openChat = useCallback(async (chat: ChatRoom) => {
    setCurrentChat(chat);
    setMessages([]);
    setTypingUsers(new Set());
    await loadMessages(chat.id);
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ Socket.IO
    if (socketRef.current && isSocketConnected) {
      socketRef.current.emit('joinChat', { chatId: chat.id });
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    try {
      await chatService.markChatAsRead(chat.id);
      setChats(prev => prev.map(c => 
        c.id === chat.id ? { ...c, unreadCount: 0 } : c
      ));
    } catch (err) {
      console.error('Error marking chat as read:', err);
    }
  }, [loadMessages, isSocketConnected]);

  // –ü–æ–∫–∏–¥–∞–Ω–∏–µ —á–∞—Ç–∞
  const leaveChat = useCallback((chatId: number) => {
    if (socketRef.current && isSocketConnected) {
      socketRef.current.emit('leaveChat', { chatId });
    }
  }, [isSocketConnected]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
  const openDirectChat = useCallback(async (userId: number) => {
    try {
      setLoading(true);
      const chat = await chatService.getOrCreateDirectChat(userId);
      await openChat(chat);
      return chat;
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞');
      console.error('Error opening direct chat:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [openChat]);

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const searchUsers = useCallback(async (query: string): Promise<User[]> => {
    try {
      return await chatService.searchUsers(query);
    } catch (err) {
      console.error('Error searching users:', err);
      return [];
    }
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
  const sendTypingIndicator = useCallback((isTyping: boolean) => {
    console.log('üìù sendTypingIndicator called:', {
      isTyping,
      currentChatId: currentChat?.id,
      socketConnected: isSocketConnected,
      hasSocket: !!socketRef.current
    });
    
    if (currentChat && socketRef.current && isSocketConnected) {
      console.log('üì§ Emitting typing event:', { 
        chatId: currentChat.id, 
        isTyping 
      });
      socketRef.current.emit('typing', { 
        chatId: currentChat.id, 
        isTyping 
      });
    } else {
      console.log('üö´ Cannot send typing indicator because:', {
        noCurrentChat: !currentChat,
        noSocket: !socketRef.current,
        notConnected: !isSocketConnected
      });
    }
  }, [currentChat, isSocketConnected]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞
  const getChatDisplayName = useCallback((chat: ChatRoom) => {
    if (!user) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç';
    return chatService.getChatDisplayName(chat, user.id);
  }, [user]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —á–∞—Ç–∞
  const getChatAvatar = useCallback((chat: ChatRoom) => {
    if (!user) return undefined;
    return chatService.getChatAvatar(chat, user.id);
  }, [user]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const formatMessageTime = useCallback((timestamp: string) => {
    return chatService.formatMessageTime(timestamp);
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const isMyMessage = useCallback((message: ChatMessage) => {
    return user?.id === message.senderId;
  }, [user]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (user) {
      loadChats();
    }
  }, [user, loadChats]);

  // –ü–æ–∫–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (currentChat) {
        leaveChat(currentChat.id);
      }
    };
  }, [currentChat, leaveChat]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    chats,
    currentChat,
    messages,
    loading,
    error,
    messagesLoading,
    sendingMessage,
    typingUsers,
    
    // –ú–µ—Ç–æ–¥—ã
    loadChats,
    loadMessages,
    sendMessage,
    updateMessage,
    deleteMessage,
    createChat,
    openChat,
    openDirectChat,
    searchUsers,
    sendTypingIndicator,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getChatDisplayName,
    getChatAvatar,
    formatMessageTime,
    isMyMessage,
    
    // Socket.IO —Å—Ç–∞—Ç—É—Å
    isWebSocketConnected: () => isSocketConnected,
  };
};
