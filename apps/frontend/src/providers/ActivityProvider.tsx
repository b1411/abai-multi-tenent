import React, { useEffect, useState, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';
import {
  ActivityContext,
  ActivityContextType,
  OnlineUser,
  ActivityItem,
  ActivityStats
} from '../contexts/ActivityContext';

interface ActivityProviderProps {
  children: React.ReactNode;
}

export const ActivityProvider: React.FC<ActivityProviderProps> = ({ children }) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [connected, setConnected] = useState(false);
  const [onlineUsers, setOnlineUsers] = useState<OnlineUser[]>([]);
  const [activities, setActivities] = useState<ActivityItem[]>([]);
  const [stats, setStats] = useState<ActivityStats | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  useEffect(() => {
    const token = localStorage.getItem('token');
    const userStr = localStorage.getItem('user');

    console.log('ActivityProvider: Checking auth data', {
      hasToken: !!token,
      hasUser: !!userStr
    });

    if (token && userStr) {
      try {
        const user = JSON.parse(userStr);
        console.log('ActivityProvider: User data parsed', {
          userId: user.id,
          role: user.role
        });
        setCurrentUser(user);
        setIsAdmin(user.role === 'ADMIN');
      } catch (e) {
        console.error('ActivityProvider: Error parsing user data:', e);
      }
    } else {
      console.log('ActivityProvider: No auth data found, will not connect to WebSocket');
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!currentUser) {
      console.log('ActivityProvider: Skipping WebSocket connection - no current user');
      return;
    }

    const token = localStorage.getItem('token');
    if (!token) {
      console.log('ActivityProvider: Skipping WebSocket connection - no token found');
      return;
    }

    console.log('ActivityProvider: All checks passed, creating WebSocket connection');

    const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';

    console.log('ActivityProvider: Attempting WebSocket connection', {
      url: apiUrl,
      userId: currentUser.id,
      userRole: currentUser.role,
      isAdmin: currentUser.role === 'ADMIN',
      envApiUrl: import.meta.env.VITE_API_URL,
      token: token.substring(0, 20) + '...'
    });

    const newSocket = io(apiUrl, {
      auth: {
        token,
      },
      transports: ['websocket'],
      reconnection: true,
      reconnectionDelay: 1000,
      reconnectionAttempts: 5,
    });

    console.log('ActivityProvider: Socket created', newSocket);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    newSocket.on('connect', () => {
      console.log('üü¢ Connected to activity monitoring WebSocket');
      setConnected(true);
      setError(null);
    });

    newSocket.on('disconnect', (reason) => {
      console.log('üî¥ Disconnected from activity monitoring:', reason);
      setConnected(false);
    });

    newSocket.on('connect_error', (error) => {
      console.error('üö´ WebSocket connection error:', error);
      setError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
      setConnected(false);
    });

    newSocket.on('connected', (data) => {
      console.log('‚úÖ Activity monitoring connection confirmed:', data);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      if (data.isAdmin !== undefined) {
        setIsAdmin(data.isAdmin);
      }
    });

    newSocket.on('error', (errorData) => {
      console.error('‚ùå WebSocket error:', errorData);
      setError(errorData.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      setConnected(false);
    });

    newSocket.on('online-users-update', (users: OnlineUser[]) => {
      setOnlineUsers(users);
    });

    newSocket.on('activity-update', (activityData) => {
      setActivities(activityData.activities || []);
    });

    newSocket.on('stats-update', (statsData: ActivityStats) => {
      setStats(statsData);
    });

    newSocket.on('new-activity', (activity: ActivityItem) => {
      setActivities(prev => [activity, ...prev.slice(0, 49)]);
    });

    newSocket.on('user-online', (data) => {
      console.log('User came online:', data);
    });

    newSocket.on('user-offline', (data) => {
      console.log('User went offline:', data);
    });

    setSocket(newSocket);

    return () => {
      newSocket.close();
    };
  }, [currentUser]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
  const updateCurrentPage = useCallback((page: string) => {
    if (socket && connected) {
      console.log('ActivityProvider: Sending page update to server:', page);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      socket.emit('update-current-page', { page });
    } else {
      console.log('ActivityProvider: Cannot send page update - socket not connected', {
        hasSocket: !!socket,
        connected
      });
    }
  }, [socket, connected]);

  const refreshOnlineUsers = useCallback(async () => {
    if (!isAdmin) return;

    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      let apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';
      apiUrl = apiUrl.endsWith('/') ? apiUrl.slice(0, -1) : apiUrl; // –£–¥–∞–ª—è–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ

      console.log('üîÑ Fetching online users from API...');
      const response = await fetch(`${apiUrl}activity-monitoring/online-users`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Online users received:', data);
      setOnlineUsers(data || []);
    } catch (error) {
      console.error('‚ùå Error fetching online users:', error);
      setError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setLoading(false);
    }
  }, [isAdmin]);

  const refreshActivities = useCallback(async (filters?: any) => {
    if (!isAdmin) return;

    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      let apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';
      apiUrl = apiUrl.endsWith('/') ? apiUrl.slice(0, -1) : apiUrl; // –£–¥–∞–ª—è–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ

      const params = new URLSearchParams({
        limit: '50',
        offset: '0',
        ...(filters?.userId && { userId: filters.userId.toString() }),
      });

      console.log('üîÑ Fetching activities from API...', { filters });
      const response = await fetch(`${apiUrl}/activity-monitoring/user-activity?${params}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Activities received:', data);
      setActivities(data.activities || []);
    } catch (error) {
      console.error('‚ùå Error fetching activities:', error);
      setError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setLoading(false);
    }
  }, [isAdmin]);

  const refreshStats = useCallback(async (days: number = 7) => {
    if (!isAdmin) return;

    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      let apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';
      apiUrl = apiUrl.endsWith('/') ? apiUrl.slice(0, -1) : apiUrl; // –£–¥–∞–ª—è–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ

      console.log('üîÑ Fetching stats from API...', { days });
      const response = await fetch(`${apiUrl}/activity-monitoring/stats?days=${days}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Stats received:', data);
      setStats(data || null);
    } catch (error) {
      console.error('‚ùå Error fetching stats:', error);
      setError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setLoading(false);
    }
  }, [isAdmin]);

  const exportActivities = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      let apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';
      apiUrl = apiUrl.endsWith('/') ? apiUrl.slice(0, -1) : apiUrl; // –£–¥–∞–ª—è–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ

      const response = await fetch(`${apiUrl}/activity-monitoring/user-activity?limit=1000`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      }

      const data = await response.json();

      // –°–æ–∑–¥–∞–µ–º CSV
      const csv = convertToCSV(data.activities);
      downloadCSV(csv, 'activity-export.csv');
    } catch (error) {
      console.error('Export error:', error);
      setError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (connected && socket) {
      const currentPath = window.location.pathname;
      updateCurrentPage(currentPath);
    }
  }, [connected, socket, updateCurrentPage]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    console.log('ActivityProvider: Setting up route change listeners', {
      connected,
      hasSocket: !!socket
    });

    const handleRouteChange = () => {
      const currentPath = window.location.pathname;
      console.log('ActivityProvider: Route changed to:', currentPath);

      if (connected && socket) {
        updateCurrentPage(currentPath);
      } else {
        console.log('ActivityProvider: Skipping route update - not connected', {
          connected,
          hasSocket: !!socket
        });
      }
    };

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    window.addEventListener('popstate', handleRouteChange);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;

    history.pushState = function (...args) {
      console.log('ActivityProvider: history.pushState called with:', args[2]);
      originalPushState.apply(history, args);
      handleRouteChange();
    };

    history.replaceState = function (...args) {
      console.log('ActivityProvider: history.replaceState called with:', args[2]);
      originalReplaceState.apply(history, args);
      handleRouteChange();
    };

    return () => {
      console.log('ActivityProvider: Cleaning up route change listeners');
      window.removeEventListener('popstate', handleRouteChange);
      history.pushState = originalPushState;
      history.replaceState = originalReplaceState;
    };
  }, [connected, socket, updateCurrentPage]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  useEffect(() => {
    if (connected && socket && isAdmin) {
      refreshOnlineUsers();
      refreshStats();
      refreshActivities();
    }
  }, [connected, socket, isAdmin, refreshOnlineUsers, refreshStats, refreshActivities]);

  const contextValue: ActivityContextType = {
    connected,
    onlineUsers,
    activities,
    stats,
    loading,
    error,
    isAdmin,
    refreshOnlineUsers,
    refreshActivities,
    refreshStats,
    exportActivities,
    updateCurrentPage,
  };

  return (
    <ActivityContext.Provider value={contextValue}>
      {children}
    </ActivityContext.Provider>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function convertToCSV(data: ActivityItem[]): string {
  if (!data || data.length === 0) return '';

  const headers = ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'Email', '–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ', '–î–∞—Ç–∞'];
  const rows = data.map(activity => [
    `${activity.user.name} ${activity.user.surname}`,
    activity.user.email,
    activity.type,
    activity.description,
    new Date(activity.createdAt).toLocaleString()
  ]);

  const csvContent = [headers, ...rows]
    .map(row => row.map(field => `"${field}"`).join(','))
    .join('\n');

  return csvContent;
}

function downloadCSV(csv: string, filename: string) {
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');

  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}
