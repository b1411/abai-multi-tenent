import apiClient from './apiClient';
import { UserRole, UserPermission } from '../contexts/AuthContext';

export interface RoleResponse {
  id: string;
  name: string;
  description?: string;
  isSystem: boolean;
  isActive: boolean;
  permissions: Permission[];
  assignedUsers: AssignedUser[];
  createdAt: string;
  updatedAt: string;
}

export interface RoleListItem {
  id: string;
  name: string;
  description?: string;
  isSystem: boolean;
  isActive: boolean;
  permissionCount: number;
  userCount: number;
  createdAt: string;
  updatedAt: string;
}

export interface Permission {
  id: string;
  module: string;
  action: string;
  resource?: string;
  scope: 'ALL' | 'OWN' | 'GROUP' | 'DEPARTMENT' | 'ASSIGNED';
  description?: string;
  isSystem: boolean;
  roleCount: number;
  createdAt: string;
  updatedAt: string;
}

export interface AssignedUser {
  id: number;
  name: string;
  email: string;
  assignedAt: string;
  expiresAt?: string;
  context?: any;
}

export interface CreateRoleDto {
  name: string;
  description?: string;
  permissions: string[];
}

export interface UpdateRoleDto {
  name?: string;
  description?: string;
  permissions?: string[];
}

export interface CreatePermissionDto {
  module: string;
  action: string;
  resource?: string;
  scope: 'ALL' | 'OWN' | 'GROUP' | 'DEPARTMENT' | 'ASSIGNED';
  description?: string;
}

export interface AssignRoleDto {
  context?: any;
  expiresAt?: string;
}

class RbacService {
  private baseUrl = '/rbac';

  // === –†–û–õ–ò ===

  async getRoles(includeInactive = false): Promise<RoleListItem[]> {
    const url = includeInactive ? `${this.baseUrl}/roles?includeInactive=true` : `${this.baseUrl}/roles`;
    const response = await apiClient.get<{ data: RoleListItem[] }>(url);
    return response.data;
  }

  async getRoleById(id: string): Promise<RoleResponse> {
    const response = await apiClient.get<{ data: RoleResponse }>(`${this.baseUrl}/roles/${id}`);
    return response.data;
  }

  async createRole(data: CreateRoleDto): Promise<RoleResponse> {
    console.log('üöÄ RbacService.createRole: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö', data);
    const response: any = await apiClient.post(`${this.baseUrl}/roles`, data);
    console.log('‚úÖ RbacService.createRole: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω', response);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å data
    const responseData = response.data;
    if (responseData && typeof responseData === 'object' && 'data' in responseData) {
      return responseData.data;
    }
    return responseData;
  }

  async updateRole(id: string, data: UpdateRoleDto): Promise<RoleResponse> {
    const response = await apiClient.put<{ data: RoleResponse }>(`${this.baseUrl}/roles/${id}`, data);
    return response.data;
  }

  async deleteRole(id: string): Promise<void> {
    await apiClient.delete(`${this.baseUrl}/roles/${id}`);
  }

  async toggleRoleStatus(id: string): Promise<RoleResponse> {
    const response = await apiClient.put<{ data: RoleResponse }>(`${this.baseUrl}/roles/${id}/toggle-status`);
    return response.data;
  }

  async getUsersByRole(roleId: string): Promise<AssignedUser[]> {
    const response = await apiClient.get<{ data: AssignedUser[] }>(`${this.baseUrl}/roles/${roleId}/users`);
    return response.data;
  }

  async addPermissionToRole(roleId: string, permissionId: string, conditions?: any): Promise<void> {
    const body = conditions ? { conditions } : {};
    await apiClient.post(`${this.baseUrl}/roles/${roleId}/permissions/${permissionId}`, body);
  }

  async removePermissionFromRole(roleId: string, permissionId: string): Promise<void> {
    await apiClient.delete(`${this.baseUrl}/roles/${roleId}/permissions/${permissionId}`);
  }

  // === –†–ê–ó–†–ï–®–ï–ù–ò–Ø ===

  async getPermissions(module?: string): Promise<Permission[]> {
    const url = module ? `${this.baseUrl}/permissions?module=${module}` : `${this.baseUrl}/permissions`;
    const response = await apiClient.get<{ data: Permission[] }>(url);
    return response.data;
  }

  async getPermissionsByModule(): Promise<Array<{
    module: string;
    permissions: Permission[];
    count: number;
  }>> {
    const response = await apiClient.get<{ data: Array<{ module: string; permissions: Permission[]; count: number; }> }>(`${this.baseUrl}/permissions/by-module`);
    return response.data;
  }

  async getPermissionById(id: string): Promise<Permission & { usedByRoles: RoleResponse[] }> {
    const response = await apiClient.get<{ data: Permission & { usedByRoles: RoleResponse[] } }>(`${this.baseUrl}/permissions/${id}`);
    return response.data;
  }

  async createPermission(data: CreatePermissionDto): Promise<Permission> {
    const response = await apiClient.post<{ data: Permission }>(`${this.baseUrl}/permissions`, data);
    return response.data;
  }

  async updatePermission(id: string, data: Partial<CreatePermissionDto>): Promise<Permission> {
    const response = await apiClient.put<{ data: Permission }>(`${this.baseUrl}/permissions/${id}`, data);
    return response.data;
  }

  async deletePermission(id: string): Promise<void> {
    await apiClient.delete(`${this.baseUrl}/permissions/${id}`);
  }

  async createStandardPermissions(module: string): Promise<Permission[]> {
    const response = await apiClient.post<{ data: Permission[] }>(`${this.baseUrl}/permissions/create-standard/${module}`);
    return response.data;
  }

  // === –ú–ï–¢–ê–î–ê–ù–ù–´–ï ===

  async getAvailableModules(): Promise<Array<{ module: string; permissionCount: number }>> {
    const response = await apiClient.get<{ data: Array<{ module: string; permissionCount: number }> }>(`${this.baseUrl}/meta/modules`);
    return response.data;
  }

  async getAvailableActions(): Promise<string[]> {
    const response = await apiClient.get<{ data: string[] }>(`${this.baseUrl}/meta/actions`);
    return response.data;
  }

  async getAvailableScopes(): Promise<Array<{
    value: string;
    label: string;
    description: string;
  }>> {
    const response = await apiClient.get<{ data: Array<{ value: string; label: string; description: string; }> }>(`${this.baseUrl}/meta/scopes`);
    return response.data;
  }

  async getActionsForModule(module: string): Promise<Array<{
    action: string;
    scope: string;
    description?: string;
  }>> {
    const response = await apiClient.get<{ data: Array<{ action: string; scope: string; description?: string; }> }>(`${this.baseUrl}/meta/modules/${module}/actions`);
    return response.data;
  }

  // === –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –†–û–õ–ï–ô ===

  async assignRoleToUser(userId: number, roleId: string, data?: AssignRoleDto): Promise<void> {
    await apiClient.post(`${this.baseUrl}/users/${userId}/roles/${roleId}`, data);
  }

  async revokeRoleFromUser(userId: number, roleId: string): Promise<void> {
    await apiClient.delete(`${this.baseUrl}/users/${userId}/roles/${roleId}`);
  }

  async getUserRoles(userId: number): Promise<UserRole[]> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      const response = await apiClient.get<{ data: UserRole[] }>(`${this.baseUrl}/users/${userId}/roles`);
      return response.data;
    } catch (error) {
      console.log(`‚ö†Ô∏è RbacService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ users/${userId}/roles, –ø—Ä–æ–±—É–µ–º my-roles`);
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
      const response = await apiClient.get<{ data: UserRole[] }>(`${this.baseUrl}/my-roles`);
      return response.data;
    }
  }

  async clearUserPermissionCache(userId: number): Promise<void> {
    await apiClient.delete(`${this.baseUrl}/users/${userId}/permissions-cache`);
  }

  // === –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô ===

  async checkPermission(data: {
    module: string;
    action: string;
    resource?: string;
    resourceId?: string;
    ownerId?: number;
    groupId?: number;
    departmentId?: number;
  }): Promise<{
    hasPermission: boolean;
    userId: number;
    check: typeof data;
  }> {
    const response = await apiClient.post<{ data: { hasPermission: boolean; userId: number; check: typeof data; } }>(`${this.baseUrl}/check-permission`, data);
    return response.data;
  }

  async getMyPermissions(): Promise<UserRole[]> {
    const response = await apiClient.get<{ data: UserRole[] }>(`${this.baseUrl}/my-permissions`);
    return response.data;
  }

  // === –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  extractPermissionsFromRoles(roles: UserRole[]): UserPermission[] {
    const permissions: UserPermission[] = [];
    
    for (const role of roles) {
      for (const permission of role.permissions) {
        // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        const exists = permissions.find(p => 
          p.module === permission.module && 
          p.action === permission.action && 
          p.resource === permission.resource &&
          p.scope === permission.scope
        );
        
        if (!exists) {
          permissions.push(permission);
        }
      }
    }
    
    return permissions;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
   */
  hasPermission(
    permissions: UserPermission[], 
    module: string, 
    action: string, 
    options?: {
      resource?: string;
      scope?: string;
    }
  ): boolean {
    console.log(`üîç RbacService.hasPermission: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ${module}:${action}`, {
      permissions: permissions.map(p => `${p.module}:${p.action}:${p.scope}`),
      checkModule: module,
      checkAction: action,
      options
    });

    const result = permissions.some(permission => {
      const moduleMatch = permission.module === module || permission.module === '*';
      const actionMatch = permission.action === action || permission.action === '*';
      const resourceMatch = !options?.resource || 
        permission.resource === options.resource || 
        !permission.resource;
      const scopeMatch = !options?.scope || permission.scope === options.scope;
      
      const matches = moduleMatch && actionMatch && resourceMatch && scopeMatch;
      
      if (matches) {
        console.log(`‚úÖ RbacService: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: ${permission.module}:${permission.action}:${permission.scope}`);
      }
      
      return matches;
    });

    console.log(`üìã RbacService.hasPermission: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${module}:${action} = ${result}`);
    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª—é–±–æ–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
   */
  hasAnyPermission(
    permissions: UserPermission[],
    requiredPermissions: Array<{
      module: string;
      action: string;
      resource?: string;
      scope?: string;
    }>
  ): boolean {
    return requiredPermissions.some(required => 
      this.hasPermission(permissions, required.module, required.action, {
        resource: required.resource,
        scope: required.scope
      })
    );
  }
}

export default new RbacService();
